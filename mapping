*.btn"< Back"=< Back
*.btn"Cancel"=Cancel
*.btn"Close"=Close
*.btn"Finish"=Finish
*.btn"Next >"=Next >
*.btn"OK"=OK
*.hnt"Filter"=Filter
dlgCommit.replaceMessage.btn"Replace"=Replace
dlgCommit.replaceMessage.chk=Always replace
dlgCommit.replaceMessage.fur=After replacing you can find the previous message when clicking the history button.
dlgCommit.replaceMessage.hdl=Replace the existing message?
dlgCommit.replaceMessage.tle=Replace Message
dlgDgAbout.edt"Build Date"=Build Date
dlgDgAbout.edt"Email"=Email
dlgDgAbout.edt"Java Version"=Java Version
dlgDgAbout.edt"Maximum Heap"=Maximum Heap
dlgDgAbout.edt"Name"=Name
dlgDgAbout.edt"Settings Path"=Settings Path
dlgDgAbout.edt"Version"=Version
dlgDgAbout.tab"Credits"=Credits
dlgDgAbout.tab"Information"=Information
dlgDgAbout.tab"Licensee"=Licensee
dlgDgAbout.tle=About DeepGit
dlgDgRefMapperGroupConfig.hdl=Configure patterns for grouping tags of this repository
dlgDgRefMapperGroupConfig.inf=Tags, branches and other refs matched by this configuration will be displayed in the Navigation graph.
dlgDgRefMapperGroupConfig.tle=Configure Tag-Grouping
dlgDgSetEncoding.edt"Text File Encoding"=Text File Encoding
dlgDgSetEncoding.hdl=Configure Encoding
dlgDgSetEncoding.inf=Specify the encoding which should be used for processing and viewing files. Note, that UTF-8 encoding will be auto-detected, regardless of the configuration here.
dlgDgSetEncoding.tle=Set Encoding
dlgDgSetPerspectiveCantSwitch.fur=In order to inspect available Origins, they have to be evaluated first. Select a line in the Blame view. Then wait until the calculation of possible Origins has finished.
dlgDgSetPerspectiveCantSwitch.hdl=Can't switch perspective.
dlgDgSetPerspectiveCantSwitch.tle=Origins Perspective
dlgInfo.tle=Discard
dlgProgress.btn"Stop"=Stop
dlgProgress.tle"Checking connectivity"=Checking connectivity
dlgProgress.tle"Checking push conditions"=Checking push conditions
dlgProgress.tle"JIRA"=JIRA
dlgProgress.tle"Jump To"=Jump To
dlgProgress.tle"Layouting Graph"=Layouting Graph
dlgProgress.tle"Refresh"=Refresh
dlgProgress.tle"Reveal Commit"=Reveal Commit
dlgProgress.tle"SmartGit Installation Update"=SmartGit Installation Update
dlgProgress.tle"Upgrade"=Upgrade
dlgQBugFileSendingFailed.fur%1=Maybe you need to configure a proxy or our server is temporarily down.\nDetails: $1
dlgQBugFileSendingFailed.hdl%1=Could not send the crash logs to $1
dlgQBugFileSendingFailed.tle=Native Crash Logs
dlgQBugReportSend.btn"Force Exit"=Force Exit
dlgQBugReportSend.btn"Ignore \(Dangerous\)"=Ignore \(Dangerous\)
dlgQBugReportSend.btn"Just Exit"=Just Exit
dlgQBugReportSend.btn"Report && Exit"=Report && Exit
dlgQBugReportSend.btn"Report Bug"=Report Bug
dlgQBugReportSend.edt"Comments or Steps to Reproduce"=Comments or Steps to Reproduce
dlgQBugReportSend.edt"Email"=Email
dlgQBugReportSend.edt"Reply To"=Reply To
dlgQBugReportSend.lbl"Sorry for the trouble!"=Sorry for the trouble!
dlgQBugReportSend.tle=Internal Error
dlgQDockManagerClosedView.chk=Don't show again
dlgQDockManagerClosedView.fur=To reopen it again, use the corresponding menu item from the Window menu.
dlgQDockManagerClosedView.hdl%1=You've closed the view '$1'.
dlgQDockManagerClosedView.tle=Closed View
dlgQFileSaveAcceptFilterOverwrite.btn"Overwrite"=Overwrite
dlgQFileSaveAcceptFilterOverwrite.fur=To save to a different file, click 'Cancel'.
dlgQFileSaveAcceptFilterOverwrite.hdl%1=The file $1 already exists. Do you want to overwrite it?
dlgQFileSaveAcceptFilterOverwrite.tle=Overwrite File
dlgQFrameManagerExit.btn"Discard Changes && Exit"=Discard Changes && Exit
dlgQFrameManagerExit.fur=There are unsaved changes which would be lost when exiting now!
dlgQFrameManagerExit.hdl=Do you really want to exit SmartGit?
dlgQFrameManagerExit.tle=Exit
dlgQIntegerInputProviderInvalidValue.fur%2=Port must be in the range from $1 to $2.
dlgQIntegerInputProviderInvalidValue.hdl%1=The text in field '$1' is not valid.
dlgQIntegerInputProviderInvalidValue.tle=Input Validation
dlgQProxyConfigure.chk"Proxy requires authentication"=Proxy requires authentication
dlgQProxyConfigure.edt"Host"=Host
dlgQProxyConfigure.edt"Password"=Password
dlgQProxyConfigure.edt"Port"=Port
dlgQProxyConfigure.edt"Username"=Username
dlgQProxyConfigure.lbl"Note: The password will be stored in plain text in SmartGit's configuration area!"=\
 Note: The password will be stored in plain text in SmartGit's configuration area!
dlgQProxyConfigure.rbt"Auto-detect the system proxy"=Auto-detect the system proxy
dlgQProxyConfigure.rbt"Don't use a proxy"=Don't use a proxy
dlgQProxyConfigure.rbt"Use following proxy"=Use following proxy
dlgQProxyConfigure.tle=Configure Proxy
dlgQProxyConnectionFailed.btn"Configure Proxy"=Configure Proxy
dlgQProxyConnectionFailed.btn"Retry"=Retry
dlgQProxyConnectionFailed.fur=Details: syntevo.com
dlgQProxyConnectionFailed.hdl%1=Could not connect to $1.
dlgQProxyConnectionFailed.tle=Connection Failed
dlgQUpdateCheckForNewVersion.btn"Configure Proxy"=Configure Proxy
dlgQUpdateCheckForNewVersion.btn"Exit"=Exit
dlgQUpdateCheckForNewVersion.btn"Retry"=Retry
dlgQUpdateCheckForNewVersion.btn"Skip"=Skip
dlgQUpdateCheckForNewVersion.hdl=SmartGit needs to check for updates
dlgQUpdateCheckForNewVersion.inf=If necessary, please configure the proxy and retry.
dlgQUpdateCheckForNewVersion.tle=Check for New Version
dlgQUpdateCheckForNewVersionFailed.fur%1=Details: Failed to connect to '$1'.
dlgQUpdateCheckForNewVersionFailed.hdl=Checking for new versions has failed.
dlgQUpdateCheckForNewVersionFailed.tle=Check for New Version
dlgQUpdateCheckLatestBuild.btn"Get Latest Build"=Get Latest Build
dlgQUpdateCheckLatestBuild.fur=Only use the latest build if requested by the support team.
dlgQUpdateCheckLatestBuild.hdl=Do you want to download the latest build?
dlgQUpdateCheckLatestBuild.tle=Check for Latest Build
dlgQUpdateCheckLatestBuildFetchFailed.fur%1=Details: $1
dlgQUpdateCheckLatestBuildFetchFailed.hdl=Initializing upgrade failed.
dlgQUpdateCheckLatestBuildFetchFailed.tle=Check for Latest Build
dlgQUpdateCheckNewVersion.btn"Download"=Download
dlgQUpdateCheckNewVersion.fur=It's recommended to update to the new version.
dlgQUpdateCheckNewVersion.hdl=A new version of SmartGit is available.
dlgQUpdateCheckNewVersion.tle=Check for New Version
dlgQUpdateCheckNoNewerLatestBuild.fur=You are already using the latest build.
dlgQUpdateCheckNoNewerLatestBuild.hdl=No newer build found.
dlgQUpdateCheckNoNewerLatestBuild.tle=Check for Latest Build
dlgQUpdateCheckNowNewerVersion.fur=You are already using the latest version.
dlgQUpdateCheckNowNewerVersion.hdl=No newer version found.
dlgQUpdateCheckNowNewerVersion.tle=Check for New Version
dlgRewriteTextFiles.btn"Fix Line-Endings"=Fix Line-Endings
dlgRewriteTextFiles.chk"Enforce line-ending on end of file"=\
 Enforce line-ending on end of file
dlgRewriteTextFiles.edt"Line-Endings"=Line-Endings
dlgRewriteTextFiles.hdl=Rewrite text files with selected line-endings
dlgRewriteTextFiles.inf=Select the line-endings that should be used to write the text files.
dlgRewriteTextFiles.tle=Fix Line-Endings
dlgScAboutUpdateInstallation.btn"Upgrade Installation"=Upgrade Installation
dlgScAboutUpdateInstallation.fur=This will take a few moments and has to restart SmartGit.
dlgScAboutUpdateInstallation.hdl%1=Do you want to upgrade the installation directory to version $1?
dlgScAboutUpdateInstallation.tle=Upgrade Installation
dlgScApplicationStarterRestart.btn"Exit"=Exit
dlgScApplicationStarterRestart.btn"Remind Later"=Remind Later
dlgScApplicationStarterRestart.btn"Restart"=Restart
dlgScApplicationStarterRestart.fur=The downloaded program update should be applied now.
dlgScApplicationStarterRestart.hdl=SmartGit requires a restart.
dlgScApplicationStarterRestart.tle=Restart
dlgScConflictSolverAdd.hdl=Add conflict solver
dlgScConflictSolverAdd.tle=Add
dlgScConflictSolverEdit.hdl=Edit conflict solver
dlgScConflictSolverEdit.tle=Edit
dlgScConflictSolverInconsistentLineEndings.fur=The merge file content contains mixed \(inconsistent\) line-endings. If these line-endings are intentionally mixed, be sure to not overwrite them while saving this file.
dlgScConflictSolverInconsistentLineEndings.hdl=The file contains mixed \(inconsistent\) line-endings.
dlgScConflictSolverInconsistentLineEndings.tle%1=\[$1\] - Conflict Solver
dlgScConflictSolverUnresolvedConflicts.chk=Don't warn me again
dlgScConflictSolverUnresolvedConflicts.fur=Not all conflicts have been resolved.
dlgScConflictSolverUnresolvedConflicts.hdl=Do you want to close the Conflict Solver?
dlgScConflictSolverUnresolvedConflicts.tle=Unresolved Conflicts
dlgScConflictSolver(Add|Edit).edt"Arguments"=Arguments
dlgScConflictSolver(Add|Edit).edt"Command"=Command
dlgScConflictSolver(Add|Edit).edt"File Pattern"=File Pattern
dlgScConflictSolver(Add|Edit).inf=Define the file pattern \(e.g. \*.txt\) and select the merge tool which should be used to resolve conflicting files matching this pattern.
dlgScConflictSolver(Add|Edit).lbl"Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html"=\
 Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html
dlgScConflictSolver(Add|Edit).lbl"You must use the variables \$\{leftFile\}, \$\{rightFile\} and \$\{mergedFile\}."=\
 You must use the variables \$\{leftFile\}, \$\{rightFile\} and \$\{mergedFile\}.
dlgScConflictSolver(Add|Edit).mni"Base File"=Base File
dlgScConflictSolver(Add|Edit).mni"Encoding"=Encoding
dlgScConflictSolver(Add|Edit).mni"Left File"=Left File
dlgScConflictSolver(Add|Edit).mni"Left Title"=Left Title
dlgScConflictSolver(Add|Edit).mni"Merged File"=Merged File
dlgScConflictSolver(Add|Edit).mni"Merged Title"=Merged Title
dlgScConflictSolver(Add|Edit).mni"Right File"=Right File
dlgScConflictSolver(Add|Edit).mni"Right Title"=Right Title
dlgScConflictSolver(Add|Edit).rbt"Built-in Conflict Solver"=Built-in Conflict Solver
dlgScConflictSolver(Add|Edit).rbt"External Conflict Solver"=External Conflict Solver
dlgScCustomizeAccelerators.btn"Assign"=Assign
dlgScCustomizeAccelerators.btn"Clear"=Clear
dlgScCustomizeAccelerators.btn"Reset"=Reset
dlgScCustomizeAccelerators.col"Accelerator"=Accelerator
dlgScCustomizeAccelerators.col"Default"=Default
dlgScCustomizeAccelerators.col"Menu Item"=Menu Item
dlgScCustomizeAccelerators.edt"Accelerator"=Accelerator
dlgScCustomizeAccelerators.hdl=Customize Accelerators
dlgScCustomizeAccelerators.inf=Double click on the menu item for which the accelerator should be changed, then press the accelerator keys and click the Assign button.
dlgScCustomizeAccelerators.tle=Customize
dlgScCustomizeToolBar.btn"Add"=Add
dlgScCustomizeToolBar.btn"Remove"=Remove
dlgScCustomizeToolBar.btn"Reset to Default"=Reset to Default
dlgScCustomizeToolBar.chk"Show text below icon"=Show text below icon
dlgScCustomizeToolBar.col"Available"=Available
dlgScCustomizeToolBar.col"Selected"=Selected
dlgScCustomizeToolBar.tle=Configure Toolbar
dlgScDevOpsCredentials.btn"Login"=Login
dlgScDevOpsCredentials.chk"Store password"=Store password
dlgScDevOpsCredentials.edt"Password"=Password
dlgScDevOpsCredentials.edt"User Name"=User Name
dlgScDevOpsCredentials.hdl%1=Login to '$1'
dlgScDevOpsCredentials.inf=Provide the user name and password for authenticating to JIRA.
dlgScDevOpsCredentials.tle=Login to JIRA
dlgScDevOpsCredentials.wrn"HTTP response code $1"=HTTP response code $1
dlgScDevOpsSslClientCertificate.btn"Login"=Login
dlgScDevOpsSslClientCertificate.chk"Store passphrase"=Store passphrase
dlgScDevOpsSslClientCertificate.edt"Certificate"=Certificate
dlgScDevOpsSslClientCertificate.edt"Passphrase"=Passphrase
dlgScDevOpsSslClientCertificate.hdl%1=Select the client certificate for $1
dlgScDevOpsSslClientCertificate.inf=Select the client certificate file for authenticating to JIRA.
dlgScDevOpsSslClientCertificate.tle=JIRA Client Certificate
dlgScDevOpsSslClientCertificate.wrn"$1"=$1
dlgScDevOpsSslFingerprintNew.btn"Accept"=Accept
dlgScDevOpsSslFingerprintNew.btn"Reject"=Reject
dlgScDevOpsSslFingerprintNew.edt"MD5 fingerprint"=MD5 fingerprint
dlgScDevOpsSslFingerprintNew.edt"SHA fingerprint"=SHA fingerprint
dlgScDevOpsSslFingerprintNew.edt"Server"=Server
dlgScDevOpsSslFingerprintNew.lbl"Is the following server fingerprint correct?"=\
 Is the following server fingerprint correct?
dlgScDevOpsSslFingerprintNew.lbl"When in doubt, contact your server administrator."=\
 When in doubt, contact your server administrator.
dlgScDevOpsSslFingerprintNew.tle=SSL Authentication
dlgScDialogAssertionHandler.btn"Send Logs"=Send Logs
dlgScDialogAssertionHandler.edt"Details on frequency of the problem \(or steps to reproduce\)"=\
 Details on frequency of the problem \(or steps to reproduce\)
dlgScDialogAssertionHandler.edt"Email"=Email
dlgScDialogAssertionHandler.edt"Optional comments or steps to reproduce \(in case you still recall\)"=\
 Optional comments or steps to reproduce \(in case you still recall\)
dlgScDialogAssertionHandler.lbl"SmartGit has crashed due to insufficient system memory"=\
 SmartGit has crashed due to insufficient system memory
dlgScDialogAssertionHandler.tle=Native Crash Logs
dlgScDialogAssertionHandlerLinkageError.btn"Copy"=Copy
dlgScDialogAssertionHandlerLinkageError.btn"Force Exit"=Force Exit
dlgScDialogAssertionHandlerLinkageError.lbl"SmartGit has detected inconsistencies within its installation files \(JAR files\), what has most likely been caused by a faulty installation.\n\nPlease uninstall SmartGit completely, make sure there are no more installation files left \(especially JAR files\), then reinstall.\n\nIf the problem persists, send following log file as an attachment to smartgit@syntevo.com."=\
 SmartGit has detected inconsistencies within its installation files \(JAR files\), what has most likely been caused by a faulty installation.\n\nPlease uninstall SmartGit completely, make sure there are no more installation files left \(especially JAR files\), then reinstall.\n\nIf the problem persists, send following log file as an attachment to smartgit@syntevo.com.
dlgScDialogAssertionHandlerLinkageError.tle=Internal Error
dlgScEvaluationReminderContinue.btn"Continue"=Continue
dlgScEvaluationReminderContinue.btn"Register"=Register
dlgScEvaluationReminderContinue.fur%2=To use SmartGit in a commercial environment, you will have to \[$1 purchase a license\].\n\nFor \[$2 certain uses\] we grant free licenses.
dlgScEvaluationReminderContinue.hdl%1=Your SmartGit evaluation ends in $1 days.
dlgScEvaluationReminderContinue.tle=Evaluation
dlgScExternalFileStarterCommandInvocationFailed.hdl%2=Cannot run program "$1": $2
dlgScExternalFileStarterCommandInvocationFailed.tle%1=\[$1\] - Conflict Solver
dlgScFileComparatorAdd.hdl=Add external diff tool
dlgScFileComparatorAdd.mni"Base Encoding"=Base Encoding
dlgScFileComparatorAdd.mni"Base File"=Base File
dlgScFileComparatorAdd.mni"Base Title"=Base Title
dlgScFileComparatorAdd.tle=Add
dlgScFileComparatorEdit.hdl=Edit external diff tool
dlgScFileComparatorEdit.mni"Base Encoding"=Base Encoding
dlgScFileComparatorEdit.mni"Base File"=Base File
dlgScFileComparatorEdit.mni"Base Title"=Base Title
dlgScFileComparatorEdit.tle=Edit
dlgScFileComparator(Add|Edit).edt"Arguments"=Arguments
dlgScFileComparator(Add|Edit).edt"Command"=Command
dlgScFileComparator(Add|Edit).edt"File Pattern"=File Pattern
dlgScFileComparator(Add|Edit).inf=Define the file pattern \(e.g. \*.png\) and select the compare command which should be used to compare files matching the file pattern.
dlgScFileComparator(Add|Edit).lbl"Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html"=\
 Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html
dlgScFileComparator(Add|Edit).mni"File"=File
dlgScFileComparator(Add|Edit).mni"Left Encoding"=Left Encoding
dlgScFileComparator(Add|Edit).mni"Left File"=Left File
dlgScFileComparator(Add|Edit).mni"Left Local File"=Left Local File
dlgScFileComparator(Add|Edit).mni"Left Title"=Left Title
dlgScFileComparator(Add|Edit).mni"Right Encoding"=Right Encoding
dlgScFileComparator(Add|Edit).mni"Right File"=Right File
dlgScFileComparator(Add|Edit).mni"Right Local File"=Right Local File
dlgScFileComparator(Add|Edit).mni"Right Title"=Right Title
dlgScFileComparator(Add|Edit).rbt"Built-in file compare"=Built-in file compare
dlgScFileComparator(Add|Edit).rbt"External diff tool:"=External diff tool:
dlgScFileComparator(Add|Edit).rbt"External viewer \(invoked for both compared files\):"=\
 External viewer \(invoked for both compared files\):
dlgScFileCompareFileChanged.btn"Discard"=Discard
dlgScFileCompareFileChanged.btn"Save"=Save
dlgScFileCompareFileChanged.fur=Your changes will be lost, if you don't save them.
dlgScFileCompareFileChanged.hdl=Do you want to save your changes?
dlgScFileCompareFileChanged.tle=File Changed
dlgScFileCompareSaveAll.btn"Discard Changes"=Discard Changes
dlgScFileCompareSaveAll.btn"Save"=Save
dlgScFileCompareSaveAll.chk"Left file"=Left file
dlgScFileCompareSaveAll.chk"Right file"=Right file
dlgScFileCompareSaveAll.hdl=Save file changes
dlgScFileCompareSaveAll.inf=Decide which file content to save.
dlgScFileCompareSaveAll.tle=Save Changes
dlgScFilePatternsEdit.edt"File Pattern"=File Pattern
dlgScFilePatternsEdit.hdl%1=Language: $1
dlgScFilePatternsEdit.inf=File patterns are used to determine file language, which is used for syntax coloring.
dlgScFilePatternsEdit.lbl"Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html"=\
 Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html
dlgScFilePatternsEdit.tle=File Patterns
dlgScFindAction.edt"Action name"=Action name
dlgScFindAction.tle=Find Command
dlgScHostKeyVerifier.btn"Accept"=Accept
dlgScHostKeyVerifier.btn"Reject"=Reject
dlgScHostKeyVerifier.edt"Fingerprint"=Fingerprint
dlgScHostKeyVerifier.edt"Server"=Server
dlgScHostKeyVerifier.fur=If you are unsure, contact your administrator.
dlgScHostKeyVerifier.hdl=Please confirm the SSH server fingerprint.
dlgScHostKeyVerifier.tle=SSH Server Verification
dlgScJiraCommitMessageSelect.btn"Refresh"=Refresh
dlgScJiraCommitMessageSelect.btn"Reset to default"=Reset to default
dlgScJiraCommitMessageSelect.btn"Select"=Select
dlgScJiraCommitMessageSelect.chk"Query Configuration"=Query Configuration
dlgScJiraCommitMessageSelect.col"Fix Version"=Fix Version
dlgScJiraCommitMessageSelect.col"Key"=Key
dlgScJiraCommitMessageSelect.col"Status"=Status
dlgScJiraCommitMessageSelect.col"Summary"=Summary
dlgScJiraCommitMessageSelect.hdl=Select commit message by JIRA issue
dlgScJiraCommitMessageSelect.inf=The selected issue summary will be used as commit message.
dlgScJiraCommitMessageSelect.lbl"Enter the JQL-Queries which will be loaded in the specified order: every query on a new line, \$\{projects\} will be substituted by the JIRA project key\(s\) which is derived or explicitly specified in your .gitbugtraq file.\n\nYou can compose a JQL query directly in JIRA, using Issues\|Search and go to Advanced view there."=\
 Enter the JQL-Queries which will be loaded in the specified order: every query on a new line, \$\{projects\} will be substituted by the JIRA project key\(s\) which is derived or explicitly specified in your .gitbugtraq file.\n\nYou can compose a JQL query directly in JIRA, using Issues\|Search and go to Advanced view there.
dlgScJiraCommitMessageSelect.lbl"Load All Issues"=Load All Issues
dlgScJiraCommitMessageSelect.lbl"Query Configuration"=Query Configuration
dlgScJiraCommitMessageSelect.tle=Select Issue
dlgScJiraResolveIssue.btn"Don't Resolve"=Don't Resolve
dlgScJiraResolveIssue.btn"Ignore"=Ignore
dlgScJiraResolveIssue.btn"Resolve Issue"=Resolve Issue
dlgScJiraResolveIssue.btn"Resolve"=Resolve
dlgScJiraResolveIssue.edt"Resolution"=Resolution
dlgScJiraResolveIssue.edt"Summary"=Summary
dlgScJiraResolveIssue.hdl%1=Resolve issue $1
dlgScJiraResolveIssue.inf=Select whether to resolve this issue and for which version to mark as resolved.
dlgScJiraResolveIssue.tle=Resolve JIRA Issue
dlgScMasterPasswordChange.edt"Current Master Password"=Current Master Password
dlgScMasterPasswordChange.edt"New Master Password"=New Master Password
dlgScMasterPasswordChange.edt"Retype New Master Password"=Retype New Master Password
dlgScMasterPasswordChange.hdl=Change or reset the master password
dlgScMasterPasswordChange.inf=To change the master password, enter the current one. To go without a master password, leave the new field blank.
dlgScMasterPasswordChange.lbl"When setting a new master password, all stored passwords and passphrases will be lost and need to be re-entered when required!"=\
 When setting a new master password, all stored passwords and passphrases will be lost and need to be re-entered when required!
dlgScMasterPasswordChange.rbt"Change master password"=Change master password
dlgScMasterPasswordChange.rbt"Set new master password"=Set new master password
dlgScMasterPasswordChange.tle=Change Master Password
dlgScMasterPasswordCreate.edt"Master Password"=Master Password
dlgScMasterPasswordCreate.edt"Retype Again"=Retype Again
dlgScMasterPasswordCreate.hdl=Configure the master password for the encrypted password store
dlgScMasterPasswordCreate.inf=The master password is used to protect passwords and passphrases which are used to authenticate with servers.
dlgScMasterPasswordCreate.lbl"Not using a master password makes your passwords and passphrases readable for everyone who has access to the password file located at $1. Use this option only if you are sure that this file is safe."=\
 Not using a master password makes your passwords and passphrases readable for everyone who has access to the password file located at $1. Use this option only if you are sure that this file is safe.
dlgScMasterPasswordCreate.lbl"This master password is case-sensitive and should contain lowercase and uppercase characters, digits and other characters. Longer passwords are in general more secure than shorter ones."=\
 This master password is case-sensitive and should contain lowercase and uppercase characters, digits and other characters. Longer passwords are in general more secure than shorter ones.
dlgScMasterPasswordCreate.rbt"Don't use a master password"=Don't use a master password
dlgScMasterPasswordCreate.rbt"Use the following master password"=Use the following master password
dlgScMasterPasswordCreate.tle=Master Password
dlgScMasterPasswordEnter.edt"Master Password"=Master Password
dlgScMasterPasswordEnter.hdl=Enter the master password
dlgScMasterPasswordEnter.inf=A stored password or passphrase has been requested from the password store.
dlgScMasterPasswordEnter.tle=Passwords
dlgScNotificationUpdateCheckHandlerUpdateFailure.fur=The process could not be started.
dlgScNotificationUpdateCheckHandlerUpdateFailure.hdl=Launching updater directly failed.
dlgScNotificationUpdateCheckHandlerUpdateFailure.tle=SmartGit Installation Update
dlgScPasswordMasterChangeSuccessfulChange.fur=Be sure to remember it, otherwise you won't be able to access your stored passwords anymore.
dlgScPasswordMasterChangeSuccessfulChange.hdl=The master password has been changed.
dlgScPasswordMasterChangeSuccessfulChange.tle=Change Master Password
dlgScPropertiesReset.btn"Reset"=Reset
dlgScPropertiesReset.fur=The new values will be active after restarting SmartGit.
dlgScPropertiesReset.hdl%1=Do you want to reset $1 system properties to their defaults?
dlgScPropertiesReset.tle=Reset Properties
dlgScPropertyEdit.edt"Value"=Value
dlgScPropertyEdit.hdl=Edit low-level property value
dlgScPropertyEdit.inf%1=Set the value for property '$1'
dlgScPropertyEdit.rbt"false"=false
dlgScPropertyEdit.rbt"true"=true
dlgScPropertyEdit.tle=Edit Property
dlgScRegisterFormLicenseConfirmDetails.edt"Add-on"=Add-on
dlgScRegisterFormLicenseConfirmDetails.edt"Address"=Address
dlgScRegisterFormLicenseConfirmDetails.edt"Email"=Email
dlgScRegisterFormLicenseConfirmDetails.edt"Free Updates Until"=Free Updates Until
dlgScRegisterFormLicenseConfirmDetails.edt"Name"=Name
dlgScRegisterFormLicenseConfirmDetails.edt"Support Until"=Support Until
dlgScRegisterFormLicenseConfirmDetails.edt"User Count"=User Count
dlgScRegisterFormLicenseConfirmDetails.tle=SmartGit License
dlgScRegisterFreeUpdatesExpiredLicense.btn"Purchase Update"=Purchase Update
dlgScRegisterFreeUpdatesExpiredLicense.fur=You may use an older SmartGit version or purchase an update license.
dlgScRegisterFreeUpdatesExpiredLicense.hdl=The free update period for this license does not cover this version.
dlgScRegisterFreeUpdatesExpiredLicense.tle=SmartGit License
dlgScRegisterRequestRejected.fur=The license server rejected the request. Please manually register the latest license file you've got by email or try again later.
dlgScRegisterRequestRejected.hdl=Failed to update license file.
dlgScRegisterRequestRejected.tle=SmartGit License
dlgScSetupLicense.btn"Configure Proxy"=Configure Proxy
dlgScSetupLicense.btn"Purchase Update"=Purchase Update
dlgScSetupLicense.btn"Register"=Register
dlgScSetupLicense.edt"License File"=License File
dlgScSetupLicense.hdl=Register license file
dlgScSetupLicense.inf=Please provide your SmartGit license file you've received by email after purchase.
dlgScSetupLicense.tle=SmartGit License
dlgScSpellCheckDictionaryAdd.hdl=Add spell checker dictionary
dlgScSpellCheckDictionaryAdd.tle=Add
dlgScSpellCheckDictionaryEdit.hdl=Edit spell checker dictionary
dlgScSpellCheckDictionaryEdit.tle=Edit
dlgScSpellCheckDictionary(Add|Edit).edt"Dictionary File"=Dictionary File
dlgScSpellCheckDictionary(Add|Edit).edt"Name"=Name
dlgScSpellCheckDictionary(Add|Edit).inf=Specify the MySpell dictionary file to use, e.g. \*.dic from Mozilla Firefox' or Thunderbird's "dictionary" directory\). The name is used when switching between different dictionaries.
dlgScSslFingerprint.btn"Accept"=Accept
dlgScSslFingerprint.btn"Reject"=Reject
dlgScSslFingerprint.edt"SHA fingerprint"=SHA fingerprint
dlgScSslFingerprint.edt"Server"=Server
dlgScSslFingerprint.lbl"The server fingerprint has changed! Is the change correct?"=\
 The server fingerprint has changed! Is the change correct?
dlgScSslFingerprint.lbl"This might indicate a security problem! When in doubt, contact your server administrator."=\
 This might indicate a security problem! When in doubt, contact your server administrator.
dlgScSslFingerprint.tle=Server Fingerprint
dlgScTextFinderFindFromEnd.btn"Find from End"=Find from End
dlgScTextFinderFindFromEnd.fur=No occurrences have been found until the beginning of the document.
dlgScTextFinderFindFromEnd.hdl=Do you want to continue from the end of the document?
dlgScTextFinderFindFromEnd.tle=Find Text
dlgScTextFinderFindFromStart.btn"Find from Beginning"=Find from Beginning
dlgScTextFinderFindFromStart.fur=No occurrences have been found until the end of the document.
dlgScTextFinderFindFromStart.hdl=Do you want to continue from the beginning of the document?
dlgScTextFinderFindFromStart.tle=Find Text
dlgScTextFinderNothingFound.hdl=No \(more\) occurrences have been found.
dlgScTextFinderNothingFound.tle=Find Text
dlgScTextMultiComponentGoToLine.edt"Line Number"=Line Number
dlgScTextMultiComponentGoToLine.tle=Go to Line
dlgScTextMultiComponentSyntaxHighlightingSelection.tle=Select Syntax-Highlighting
dlgScTextReplace.btn"< Find"=< Find
dlgScTextReplace.btn"Find >"=Find >
dlgScTextReplace.btn"Replace All"=Replace All
dlgScTextReplace.btn"Replace"=Replace
dlgScTextReplace.chk"Case-sensitive"=Case-sensitive
dlgScTextReplace.chk"Regular Expression search"=Regular Expression search
dlgScTextReplace.chk"Replace With:"=Replace With:
dlgScTextReplace.edt"Text to Find"=Text to Find
dlgScTextReplace.tle=Find and Replace
dlgScTextSettings.chk"Coalesce nearby change blocks"=Coalesce nearby change blocks
dlgScTextSettings.chk"Split leading/trailing added or removed lines into separate blocks"=\
 Split leading/trailing added or removed lines into separate blocks
dlgScTextSettings.chk"Trim equal start/end of Inner-Line changes"=\
 Trim equal start/end of Inner-Line changes
dlgScTextSettings.edt"Inner-Line Comparison"=Inner-Line Comparison
dlgScTextSettings.edt"Show Whitespaces"=Show Whitespaces
dlgScTextSettings.edt"Tab Size"=Tab Size
dlgScTextSettings.rbt"All"=All
dlgScTextSettings.rbt"Alphanumeric words"=Alphanumeric words
dlgScTextSettings.rbt"C identifiers"=C identifiers
dlgScTextSettings.rbt"Character-based"=Character-based
dlgScTextSettings.rbt"Java identifiers"=Java identifiers
dlgScTextSettings.rbt"None"=None
dlgScTextSettings.rbt"Off"=Off
dlgScTextSettings.rbt"Trailing and changed"=Trailing and changed
dlgScTextSettings.tab"Compare"=Compare
dlgScTextSettings.tab"General"=General
dlgScTextSettings.tle=Settings
dlgScUpdateInstallationUpdateManuallyFailure.fur=The process could not be started.
dlgScUpdateInstallationUpdateManuallyFailure.hdl=Launching updater directly failed.
dlgScUpdateInstallationUpdateManuallyFailure.tle=SmartGit Installation Update
dlgScUpdateInstallationUpdateManuallyInfo.fur%1=Please get rid of '$1' manually and retry the upgrade.
dlgScUpdateInstallationUpdateManuallyInfo.hdl=Clearing updater directory failed.
dlgScUpdateInstallationUpdateManuallyInfo.tle=SmartGit Installation Update
dlgScUpdateInstallationUpgrade.btn"Upgrade Now"=Upgrade Now
dlgScUpdateInstallationUpgrade.fur%1=The new version $1 has been downloaded which needs to be installed.
dlgScUpdateInstallationUpgrade.hdl=Do you want to upgrade SmartGit now?
dlgScUpdateInstallationUpgrade.tle=Upgrade SmartGit
dlgSelectDiff.col"Command"=Command
dlgSelectDiff.hdl=Select the diff tool
dlgSelectDiff.inf=Select which matching diff tool should be used.
dlgSelectDiff.tle=File Compare
dlgSgAbortBisectingConfirm.btn"Abort Bisect"=Abort Bisect
dlgSgAbortBisectingConfirm.fur=Your working tree is in 'bisecting' state. You may abort it to get out of this state.\n\nAborting will checkout the branch or commit before starting bisect.
dlgSgAbortBisectingConfirm.hdl=Do you want to reset your working tree?
dlgSgAbortBisectingConfirm.tle=Abort
dlgSgAbortCherryPickingConfirm.btn"Abort Cherry-Pick"=Abort Cherry-Pick
dlgSgAbortCherryPickingConfirm.fur=Your working tree is in 'cherry-picking' state. You may abort it to get out of this state and freshly start over with the cherry-picking afterwards.\n\nAborting will clean any local modification \(by invoking 'git reset --hard'\)!
dlgSgAbortCherryPickingConfirm.hdl=Do you want to reset your working tree?
dlgSgAbortCherryPickingConfirm.tle=Abort
dlgSgAbortMergingConfirm.btn"Abort Merge"=Abort Merge
dlgSgAbortMergingConfirm.fur=Your working tree is in 'merging' state. You may abort it to get out of this state and freshly start over with the merge afterwards.\n\nAborting will try to reconstruct the pre-merge state \(by invoking 'git merge --abort'\)!
dlgSgAbortMergingConfirm.hdl=Do you want to abort the current merge?
dlgSgAbortMergingConfirm.tle=Discard
dlgSgAbortRebasingConfirm.btn"Abort Rebase"=Abort Rebase
dlgSgAbortRebasingConfirm.fur=Your working tree is in 'rebasing' state. You may abort rebasing; if you just want to skip the current patch, use Branch \| Rebase \| Rebase HEAD To instead.\n\nAborting will clean any local modification \(by invoking 'git reset --hard'\)!
dlgSgAbortRebasingConfirm.hdl=Do you want to abort the rebasing?
dlgSgAbortRebasingConfirm.tle=Discard
dlgSgAbortRevertingConfirm.btn"Abort Revert"=Abort Revert
dlgSgAbortRevertingConfirm.fur=Your working tree is in 'reverting' state. You may abort it to get out of this state and freshly start over with the revert afterwards.\n\nAborting will clean any local modification \(by invoking 'git reset --hard'\)!
dlgSgAbortRevertingConfirm.hdl=Do you want to reset your working tree?
dlgSgAbortRevertingConfirm.tle=Discard
dlgSgAbout.btn"Register"=Register
dlgSgAbout.edt"Add-on"=Add-on
dlgSgAbout.edt"Address"=Address
dlgSgAbout.edt"Build Date"=Build Date
dlgSgAbout.edt"Email"=Email
dlgSgAbout.edt"Free Updates Until"=Free Updates Until
dlgSgAbout.edt"Java Version"=Java Version
dlgSgAbout.edt"Maximum Heap"=Maximum Heap
dlgSgAbout.edt"Name"=Name
dlgSgAbout.edt"Settings Path"=Settings Path
dlgSgAbout.edt"Support Until"=Support Until
dlgSgAbout.edt"User Count"=User Count
dlgSgAbout.edt"Version"=Version
dlgSgAbout.tab"Credits"=Credits
dlgSgAbout.tab"Information"=Information
dlgSgAbout.tab"Licensee"=Licensee
dlgSgAbout.tle=About SmartGit
dlgSgApplicationUpgradeError.fur=The process could not be started.
dlgSgApplicationUpgradeError.hdl=Launching updater directly failed.
dlgSgApplicationUpgradeError.tle=Upgrade
dlgSgAuthenticationRemoveAllCredentials.btn"Remove All"=Remove All
dlgSgAuthenticationRemoveAllCredentials.fur=You will have to re-enter all authentication details.
dlgSgAuthenticationRemoveAllCredentials.hdl=Do you want to remove all known credentials?
dlgSgAuthenticationRemoveAllCredentials.tle=Remove All
dlgSgAuthenticationShowPassword.edt"Password"=Password
dlgSgAuthenticationShowPassword.tle%1=Password for $1
dlgSgBisectResult.btn"Continue Bisect"=Continue Bisect
dlgSgBisectResult.btn"Leave Bisect"=Leave Bisect
dlgSgBisectResult.fur%1=$1
dlgSgBisectResult.hdl=Bisect has determined the first bad commit.
dlgSgBisectResult.tle=Bisect Finished
dlgSgBisectStartConfirm.btn"Start Bisect with Bad HEAD"=Start Bisect with Bad HEAD
dlgSgBisectStartConfirm.btn"Start Bisect"=Start Bisect
dlgSgBisectStartConfirm.fur=You need to mark 1 commit as good and 1 commit as bad before Git can start the binary search.
dlgSgBisectStartConfirm.hdl=Should the bisect be started with a bad commit?
dlgSgBisectStartConfirm.tle=Start Bisect
dlgSgBitbucketGenerateToken.edt"Code"=Code
dlgSgBitbucketGenerateToken.edt"Link"=Link
dlgSgBitbucketGenerateToken.hdl=Enter the generated code
dlgSgBitbucketGenerateToken.inf=Authenticate at Bitbucket and enter the generated token
dlgSgBitbucketGenerateToken.lbl"Your browser should have opened automatically, let you authenticate with your preferred account at Bitbucket and grant access to SmartGit. If this didn't happen, manually open following link:"=\
 Your browser should have opened automatically, let you authenticate with your preferred account at Bitbucket and grant access to SmartGit. If this didn't happen, manually open following link:
dlgSgBitbucketGenerateToken.tle=Request Access Token
dlgSgBranchAddCheckout.btn"Add Branch && Checkout"=Add Branch && Checkout
dlgSgBranchAddCheckout.btn"Add Branch"=Add Branch
dlgSgBranchAddCheckout.edt"Branch"=Branch
dlgSgBranchAddCheckout.err"A remote branch with this name already exists. Use a different name."=\
 A remote branch with this name already exists. Use a different name.
dlgSgBranchAddCheckout.err"Choose a different branch, the current branch can't be used."=\
 Choose a different branch, the current branch can't be used.
dlgSgBranchAddCheckout.err"Enter the name of the local branch."=\
 Enter the name of the local branch.
dlgSgBranchAddCheckout.err"The name must not end with a slash or dot."=\
 The name must not end with a slash or dot.
dlgSgBranchAddCheckout.err"This branch already exists at this commit."=\
 This branch already exists at this commit.
dlgSgBranchAddCheckout.hdl"Add branch at commit $1"=Add branch at commit $1
dlgSgBranchAddCheckout.hdl"Add branch at current HEAD commit"=\
 Add branch at current HEAD commit
dlgSgBranchAddCheckout.inf=Enter the name of the local branch to create.
dlgSgBranchAddCheckout.tle=Add Branch
dlgSgBranchAddCheckoutOverwriteExisting.btn"Overwrite"=Overwrite
dlgSgBranchAddCheckoutOverwriteExisting.fur=Click 'Cancel' to choose a different branch name.
dlgSgBranchAddCheckoutOverwriteExisting.hdl%1=The branch '$1' already exists. Do you want to overwrite it?
dlgSgBranchAddCheckoutOverwriteExisting.tle=Add Branch
dlgSgBranchDeleteCurrentNotPossible.fur=By default, SmartGit disallows to delete the current branch. To skip this restriction, set low-level property 'branch.delete.allowToDeleteCurrentBranch'.
dlgSgBranchDeleteCurrentNotPossible.hdl=You can't delete the current branch.
dlgSgBranchDeleteCurrentNotPossible.tle=Delete
dlgSgBranchDeleteLocalConfirmMultiple.btn"Delete"=Delete
dlgSgBranchDeleteLocalConfirmMultiple.chk"Delete from remote repository"=Delete from remote repository
dlgSgBranchDeleteLocalConfirmMultiple.chk"Delete tracked branches"=Delete tracked branches
dlgSgBranchDeleteLocalConfirmMultiple.fur=It might be complicated to restore deleted branches.\n\nYou may only delete a branch from your local list of remote branches, but this may bring back the branch with the next fetch.
dlgSgBranchDeleteLocalConfirmMultiple.hdl%1=Do you want to delete $1 local branches?
dlgSgBranchDeleteLocalConfirmMultiple.tle=Delete
dlgSgBranchDeleteLocalConfirmSingle.btn"Delete"=Delete
dlgSgBranchDeleteLocalConfirmSingle.chk"Delete from remote repository '$1'"=Delete from remote repository '$1'
dlgSgBranchDeleteLocalConfirmSingle.chk"Delete tracked branch '$1'"=Delete tracked branch '$1'
dlgSgBranchDeleteLocalConfirmSingle.fur=You may lose unpushed changes or it might be complicated to restore the branch\(es\)!
dlgSgBranchDeleteLocalConfirmSingle.hdl%1=Do you want to delete the local branch '$1'?
dlgSgBranchDeleteLocalConfirmSingle.tle=Delete
dlgSgBranchDeleteRemoteConfirmSingle.btn"Delete"=Delete
dlgSgBranchDeleteRemoteConfirmSingle.chk"Delete from remote '$1'"=Delete from remote '$1'
dlgSgBranchDeleteRemoteConfirmSingle.chk"Delete from remote repository '$1'"=Delete from remote repository '$1'
dlgSgBranchDeleteRemoteConfirmSingle.fur=You may only delete a branch from your local list of remote branches, but this may bring back the branch with the next fetch.
dlgSgBranchDeleteRemoteConfirmSingle.hdl"Do you want to delete the branch '$1'?"=\
 Do you want to delete the branch '$1'?
dlgSgBranchDeleteRemoteConfirmSingle.hdl"Do you want to delete the remote branch '$1'?"=\
 Do you want to delete the remote branch '$1'?
dlgSgBranchDeleteRemoteConfirmSingle.tle=Delete
dlgSgBranchTrackingResetConfirm.btn"Stop Tracking"=Stop Tracking
dlgSgBranchTrackingResetConfirm.fur=The necessary configuration will be performed in the .git/config file.
dlgSgBranchTrackingResetConfirm.hdl%2=Should branch '$1' stop tracking '$2'?
dlgSgBranchTrackingResetConfirm.tle=Stop Tracking
dlgSgBranchTrackingSetConfirm.btn"Configure"=Configure
dlgSgBranchTrackingSetConfirm.fur=The necessary configuration will be performed in the .git/config file.
dlgSgBranchTrackingSetConfirm.hdl%2=Do you want to configure '$1' to track '$2'?
dlgSgBranchTrackingSetConfirm.tle=Set Tracked Branch
dlgSgBugReportSettings.btn"Exit"=Exit
dlgSgBugReportSettings.chk"Automatically send 'crash footprints' after an internal error has occurred"=\
 Automatically send 'crash footprints' after an internal error has occurred
dlgSgBugReportSettings.chk"Send 'crash footprints' after an internal error has occurred"=\
 Send 'crash footprints' after an internal error has occurred
dlgSgBugReportSettings.err"Sending 'crash footprints' is required for preview builds, because their main purposes is to get as much as possible bugs reported and fixed before release."=\
 Sending 'crash footprints' is required for preview builds, because their main purposes is to get as much as possible bugs reported and fixed before release.
dlgSgBugReportSettings.hdl=Crash Reporting
dlgSgBugReportSettings.inf=Please help to improve SmartGit's quality by automatically sending 'crash footprints' which do not contain any sensitive information. You can change this option later in the preferences.
dlgSgBugReportSettings.lbl"A 'crash footprint' contains details about your machine \(e.g. version of operating system\), SmartGit's version/build number, the JVM state and where the internal error occurred.\n\nIt contains NO POTENTIALLY SENSITIVE INFORMATION like user names, email addresses, file contents, file paths or server names."=\
 A 'crash footprint' contains details about your machine \(e.g. version of operating system\), SmartGit's version/build number, the JVM state and where the internal error occurred.\n\nIt contains NO POTENTIALLY SENSITIVE INFORMATION like user names, email addresses, file contents, file paths or server names.
dlgSgBugReportSettings.tle=SmartGit
dlgSgCheckout.btn"Branches"=Branches
dlgSgCheckout.btn"Check Out"=Check Out
dlgSgCheckout.hdl=Check out a commit
dlgSgCheckout.inf=Select the commit to check out. This allows to switch \(back\) the working tree to any commit.
dlgSgCheckout.tle=Check Out
dlgSgCheckoutFastForwardMerge.btn"Fast-Forward-Merge"=Fast-Forward-Merge
dlgSgCheckoutFastForwardMerge.btn"Just Checkout"=Just Checkout
dlgSgCheckoutFastForwardMerge.fur=Fast-forward-merging automatically moves the branch forward to the tracked remote branch.
dlgSgCheckoutFastForwardMerge.hdl%1=Do you want to fast-forward-merge remote changes after checking out '$1'?
dlgSgCheckoutFastForwardMerge.tle=Check Out
dlgSgCheckoutLocalBranchConfirm.btn"Checkout"=Checkout
dlgSgCheckoutLocalBranchConfirm.chk=Don't show again
dlgSgCheckoutLocalBranchConfirm.fur%1=This will make '$1' your current branch.
dlgSgCheckoutLocalBranchConfirm.hdl%1=Do you want to checkout the branch '$1'?
dlgSgCheckoutLocalBranchConfirm.tle=Check Out
dlgSgCheckoutTarget.btn"Checkout"=Checkout
dlgSgCheckoutTarget.chk"Track remote branch '$1'"=Track remote branch '$1'
dlgSgCheckoutTarget.chk"Track remote branch"=Track remote branch
dlgSgCheckoutTarget.hdl"Check out commit"=Check out commit
dlgSgCheckoutTarget.hdl"Check out remote branch"=Check out remote branch
dlgSgCheckoutTarget.hdl"Checkout commit"=Checkout commit
dlgSgCheckoutTarget.hdl"Checkout remote branch"=Checkout remote branch
dlgSgCheckoutTarget.inf=Be careful when checking out a commit instead of a local branch: commits on top of a commit can get lost easily.
dlgSgCheckoutTarget.rbt"Checkout and fast-forward local branch 'dev'"=\
 Checkout and fast-forward local branch 'dev'
dlgSgCheckoutTarget.rbt"Checkout local branch '$1'"=Checkout local branch '$1'
dlgSgCheckoutTarget.rbt"Create local branch:"=Create local branch:
dlgSgCheckoutTarget.rbt"Don't create local branch \(just work read-only\)"=\
 Don't create local branch \(just work read-only\)
dlgSgCheckoutTarget.tle=Check Out
dlgSgCheckoutTarget.wrn"Local branch '$1' is behind checkout target '$2'."=\
 Local branch '$1' is behind checkout target '$2'.
dlgSgCheckoutTarget.wrn"Local branch '$1' is diverged from checkout target '$2'."=\
 Local branch '$1' is diverged from checkout target '$2'.
dlgSgCheckoutTarget.wrn"Local branch is ahead of remote branch. The checkout will end up at a more recent commit."=\
 Local branch is ahead of remote branch. The checkout will end up at a more recent commit.
dlgSgCheckoutTargetAlreadyExistsOverwrite.btn"Overwrite"=Overwrite
dlgSgCheckoutTargetAlreadyExistsOverwrite.fur=Click 'Cancel' to choose a different branch name.
dlgSgCheckoutTargetAlreadyExistsOverwrite.hdl%1=The branch '$1' already exists. Do you want to overwrite it?
dlgSgCheckoutTargetAlreadyExistsOverwrite.tle=Check Out
dlgSgCherryPickConfigurationFile.btn"Cherry-Pick"=Cherry-Pick
dlgSgCherryPickConfigurationFile.fur=Only changes of these files will be cherry-picked \(without committing\).
dlgSgCherryPickConfigurationFile.hdl"Do you want to cherry-pick changes of $1 files?"=\
 Do you want to cherry-pick changes of $1 files?
dlgSgCherryPickConfigurationFile.hdl"Do you want to cherry-pick changes of '$1'?"=\
 Do you want to cherry-pick changes of '$1'?
dlgSgCherryPickConfigurationFile.tle=Cherry-Pick
dlgSgCherryPickConfirmation.btn"Cherry-Pick && Commit"=Cherry-Pick && Commit
dlgSgCherryPickConfirmation.btn"Cherry-Pick"=Cherry-Pick
dlgSgCherryPickConfirmation.chk=Append source commit ID to commit message
dlgSgCherryPickConfirmation.fur=This will cherry-pick the selected commit into the Working Tree.
dlgSgCherryPickConfirmation.hdl=Do you want to cherry-pick?
dlgSgCherryPickConfirmation.tle=Cherry-Pick
dlgSgCherryPickFailedBecauseOfConflicts.chk=Don't show again
dlgSgCherryPickFailedBecauseOfConflicts.fur=You may need to resolve the conflicts before proceeding.
dlgSgCherryPickFailedBecauseOfConflicts.hdl=Cherry-picking failed because of conflicts.
dlgSgCherryPickFailedBecauseOfConflicts.tle=Cherry Pick
dlgSgCherryPickUnpushedCommits.btn"Cherry-Pick"=Cherry-Pick
dlgSgCherryPickUnpushedCommits.fur=At least one of the selected commits has not been pushed yet, hence cherry-pick is only local and won't be translated to SVN \(mergeinfo\).
dlgSgCherryPickUnpushedCommits.hdl=Do you want to cherry-pick unpushed commits?
dlgSgCherryPickUnpushedCommits.tle=Cherry-Pick
dlgSgClean.btn"Clean Working Tree"=Clean Working Tree
dlgSgClean.chk"Remove only ignored files"=Remove only ignored files
dlgSgClean.chk"Remove untracked directories"=Remove untracked directories
dlgSgClean.hdl=Remove untracked files
dlgSgClean.inf=Select which untracked files should be removed.
dlgSgClean.tle=Clean Working Tree
dlgSgClone.chk"Create upstream remote"=Create upstream remote
dlgSgClone.chk"Fetch all Heads and Tags"=Fetch all Heads and Tags
dlgSgClone.chk"Fetch all commits"=Fetch all commits
dlgSgClone.chk"Include Submodules"=Include Submodules
dlgSgClone.chk"Just initialize clone \(expert mode, not officially supported!\)"=\
 Just initialize clone \(expert mode, not officially supported!\)
dlgSgClone.chk"Map SVN trunk, tags and branches to Git"=\
 Map SVN trunk, tags and branches to Git
dlgSgClone.chk"Skip large files \(\"partial clone\"\)"=Skip large files \("partial clone"\)
dlgSgClone.edt"Check Out Branch"=Check Out Branch
dlgSgClone.edt"Fetch Only"=Fetch Only
dlgSgClone.edt"Fetch only the latest"=Fetch only the latest
dlgSgClone.edt"Local Directory"=Local Directory
dlgSgClone.edt"Omit files larger than"=Omit files larger than
dlgSgClone.edt"Path"=Path
dlgSgClone.edt"Repository URL"=Repository URL
dlgSgClone.err"Please select an empty, local directory for the new repository."=\
 Please select an empty, local directory for the new repository.
dlgSgClone.err"Please specify the URL of the remote repository to be cloned."=\
 Please specify the URL of the remote repository to be cloned.
dlgSgClone.err"Please specify the root directory of a local repository."=\
 Please specify the root directory of a local repository.
dlgSgClone.inf"Customize how and what to clone."=\
 Customize how and what to clone.
dlgSgClone.inf"Specify the Git or SVN repository to clone."=\
 Specify the Git or SVN repository to clone.
dlgSgClone.inf"Specify the Git, Mercurial or SVN repository to clone."=\
 Specify the Git, Mercurial or SVN repository to clone.
dlgSgClone.inf"Specify the local directory for the new repository."=\
 Specify the local directory for the new repository.
dlgSgClone.inf"Specify the repository to clone."=Specify the repository to clone.
dlgSgClone.lbl"Note: Pull or Fetch will not bring other refs, you will need to use Fetch More."=\
 Note: Pull or Fetch will not bring other refs, you will need to use Fetch More.
dlgSgClone.lbl"e.g. https://user@server:port/path/to/repository"=e.g. https://user@server:port/path/to/repository
dlgSgClone.mni"Add Hosting Provider"=Add Hosting Provider
dlgSgClone.rbt"Clone all revisions \(recommended\)"=Clone all revisions \(recommended\)
dlgSgClone.rbt"Clone from revision:"=Clone from revision:
dlgSgClone.rbt"Local Git or Mercurial repository"=Local Git or Mercurial repository
dlgSgClone.rbt"Local Git repository"=Local Git repository
dlgSgClone.rbt"Local repository"=Local repository
dlgSgClone.rbt"Remote Git or SVN repository"=Remote Git or SVN repository
dlgSgClone.rbt"Remote Git, Mercurial or SVN repository"=\
 Remote Git, Mercurial or SVN repository
dlgSgClone.rbt"Remote repository"=Remote repository
dlgSgClone.tle=Clone
dlgSgCloneRepositoryType.btn"Git"=Git
dlgSgCloneRepositoryType.btn"Mercurial"=Mercurial
dlgSgCloneRepositoryType.btn"SVN"=SVN
dlgSgCloneRepositoryType.fur=The specified URL protocol is ambiguous and may refer to different types of repositories.
dlgSgCloneRepositoryType.hdl=Select the type of repository you are going to clone.
dlgSgCloneRepositoryType.tle=Clone
dlgSgCloneSvnDetachedHeadSuccess.fur=SmartGit now continues to fetch all other revisions in the background. You may safely start working with the repository now; only log-related operations will be affected by this intermediate state.\n\nOnce SmartGit has finished the background part of the clone, it will let you know in the notifications area \(status bar\) and you can complete the clone there.
dlgSgCloneSvnDetachedHeadSuccess.hdl=HEAD revision has been successfully cloned.
dlgSgCloneSvnDetachedHeadSuccess.tle=Clone
dlgSgCommit.btn"Commit && Push"=Commit && Push
dlgSgCommit.btn"Commit"=Commit
dlgSgCommit.btn"Select from Log"=Select from Log
dlgSgCommit.btn"Select"=Select
dlgSgCommit.chk"Add 'Signed-off-by' signature"=Add 'Signed-off-by' signature
dlgSgCommit.chk"Amend last commit instead of creating new one"=\
 Amend last commit instead of creating new one
dlgSgCommit.chk"Amend last commit"=Amend last commit
dlgSgCommit.chk"Bypass commit hook"=Bypass commit hook
dlgSgCommit.chk"More Options"=More Options
dlgSgCommit.col"Directory"=Directory
dlgSgCommit.col"Name"=Name
dlgSgCommit.edt"Commit Message"=Commit Message
dlgSgCommit.edt"Create"=Create
dlgSgCommit.err"Enter a commit message describing \(the reason for\) the commit."=\
 Enter a commit message describing \(the reason for\) the commit.
dlgSgCommit.hdl=Commit local or staged changes
dlgSgCommit.inf=Select the files you want to commit and provide a commit message.
dlgSgCommit.mni"Deselect All"=Deselect All
dlgSgCommit.mni"JIRA"=JIRA
dlgSgCommit.mni"Log"=Log
dlgSgCommit.mni"Select All"=Select All
dlgSgCommit.mni"Select from Log"=Select from Log
dlgSgCommit.mni"Show Changes"=Show Changes
dlgSgCommit.mni"Toggle"=Toggle
dlgSgCommit.rbt"Local Changes"=Local Changes
dlgSgCommit.rbt"Merge commit \(multiple parents\)"=Merge commit \(multiple parents\)
dlgSgCommit.rbt"Simple commit \(one parent, \"squash\"\)"=Simple commit \(one parent, "squash"\)
dlgSgCommit.rbt"Staged Changes"=Staged Changes
dlgSgCommit.tle=Commit
dlgSgCommit.wrn"All staged changes have been selected for commit, as this is necessary in 'Reverting' state."=\
 All staged changes have been selected for commit, as this is necessary in 'Reverting' state.
dlgSgCommit.wrn"When modifying or splitting a commit, you first need to commit all local changes before being able to continue the rebase."=\
 When modifying or splitting a commit, you first need to commit all local changes before being able to continue the rebase.
dlgSgCommitAmendAlreadyPushedCommit.btn"Amend"=Amend
dlgSgCommitAmendAlreadyPushedCommit.fur=If you amend a pushed commit, you will need to force-push it later. This might overwrite other users' changes.
dlgSgCommitAmendAlreadyPushedCommit.hdl=Do you want to amend an already pushed commit?
dlgSgCommitAmendAlreadyPushedCommit.tle=Commit
dlgSgCommitCantAmend.fur=Can't modify an already pushed commit. If you know what you are doing and want to enable it, select the option 'Allow modifying pushed commits' in the preferences.
dlgSgCommitCantAmend.hdl=Can't amend commit.
dlgSgCommitCantAmend.tle=Commit
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.btn"Continue Rebase"=Continue Rebase
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.btn"Create Commit"=Create Commit
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.fur=The repository is in 'rebasing' state. Instead of creating an additional commit as part of your rebased commits, you will usually just want continue the rebase.
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.hdl=Do you want to continue the rebase or create an additional commit?
dlgSgCommitContinueRebaseOrCreateAdditionalCommit.tle=Rebase
dlgSgCommitDirectlyTo.btn"Commit Anyway"=Commit Anyway
dlgSgCommitDirectlyTo.fur=You have Git-Flow configured and committing to the Git-Flow master branch should not happen directly but only with the help of the Git-Flow commands and merging.\n\nIf in doubt, please contact your administrator.
dlgSgCommitDirectlyTo.hdl=Do you want to commit directly to 'master'?
dlgSgCommitDirectlyTo.tle=Commit
dlgSgCommitIndexAllWorkingTreeChanges.btn"Commit All Working Tree Changes"=Commit All Working Tree Changes
dlgSgCommitIndexAllWorkingTreeChanges.chk=Don't show again
dlgSgCommitIndexAllWorkingTreeChanges.fur=No file is staged yet. To stage individual changes, click Cancel. Otherwise all working tree changes will get staged and committed.
dlgSgCommitIndexAllWorkingTreeChanges.hdl=Do you want to commit all working tree changes?
dlgSgCommitIndexAllWorkingTreeChanges.tle=Commit
dlgSgCommitIndexNoFilesFound.fur=Neither staged files nor locally changed files were found.
dlgSgCommitIndexNoFilesFound.hdl=There is nothing to commit.
dlgSgCommitIndexNoFilesFound.tle=Commit
dlgSgCommitNoFilesFoundNotAllowEmpty.fur=Neither staged files nor locally changed files were found.
dlgSgCommitNoFilesFoundNotAllowEmpty.hdl=There is nothing to commit.
dlgSgCommitNoFilesFoundNotAllowEmpty.tle=Commit
dlgSgCommitSelectMessageFromLog.btn"Branches"=Branches
dlgSgCommitSelectMessageFromLog.btn"Select"=Select
dlgSgCommitSelectMessageFromLog.chk"Add 'fixup!' prefix for easier automatic squashing using Interactive Rebase"=\
 Add 'fixup!' prefix for easier automatic squashing using Interactive Rebase
dlgSgCommitSelectMessageFromLog.hdl=Select a commit
dlgSgCommitSelectMessageFromLog.inf=Choose the commit whose message should be used.
dlgSgCommitSelectMessageFromLog.mni"Author"=Author
dlgSgCommitSelectMessageFromLog.mni"Branches and Tags"=Branches and Tags
dlgSgCommitSelectMessageFromLog.mni"Committer"=Committer
dlgSgCommitSelectMessageFromLog.mni"Copy ID"=Copy ID
dlgSgCommitSelectMessageFromLog.mni"Copy Message"=Copy Message
dlgSgCommitSelectMessageFromLog.mni"File Content \(very expensive\)"=File Content \(very expensive\)
dlgSgCommitSelectMessageFromLog.mni"File \(expensive\)"=File \(expensive\)
dlgSgCommitSelectMessageFromLog.mni"Forget Pattern"=Forget Pattern
dlgSgCommitSelectMessageFromLog.mni"ID"=ID
dlgSgCommitSelectMessageFromLog.mni"Message"=Message
dlgSgCommitSelectMessageFromLog.mni"Refresh"=Refresh
dlgSgCommitSelectMessageFromLog.mni"Regular Expressions"=Regular Expressions
dlgSgCommitSelectMessageFromLog.mni"Remember Pattern"=Remember Pattern
dlgSgCommitSelectMessageFromLog.tle=Select Commit Message
dlgSgCommitSingleOrAllWorkingTreeChanges.btn"Commit All Changes"=Commit All Changes
dlgSgCommitSingleOrAllWorkingTreeChanges.btn"Commit File"=Commit File
dlgSgCommitSingleOrAllWorkingTreeChanges.fur=You either can commit the single selected file or all changed files.
dlgSgCommitSingleOrAllWorkingTreeChanges.hdl=What do you want to commit?
dlgSgCommitSingleOrAllWorkingTreeChanges.tle=Commit
dlgSgCommitToDetachedHead.btn"Commit Anyway"=Commit Anyway
dlgSgCommitToDetachedHead.fur=The repository HEAD currently does not point to a branch, but directly refers to a commit \(SHA\). When committing, the newly created commit will only be reachable by its SHA and hence may get lost easily.\n\nInstead of committing now, you should first create a branch for your current HEAD and commit afterwards.
dlgSgCommitToDetachedHead.hdl=Do you want to commit to a detached HEAD?
dlgSgCommitToDetachedHead.tle=Commit
dlgSgCompareTwoFiles.btn"Compare with Each Other"=Compare with Each Other
dlgSgCompareTwoFiles.btn"Compare with Repository"=Compare with Repository
dlgSgCompareTwoFiles.fur=The files can be compared to their repository content or to each other.
dlgSgCompareTwoFiles.hdl=Should the selected two files be compared with each other?
dlgSgCompareTwoFiles.tle=Compare
dlgSgConflictResolverExternalStarted.btn"Mark Resolved"=Mark Resolved
dlgSgConflictResolverExternalStarted.fur=The external conflict solver has been started. After you have resolved the conflict, you may now mark the file as resolved.
dlgSgConflictResolverExternalStarted.hdl=Do you want to mark the file as resolved?
dlgSgConflictResolverExternalStarted.tle=External Conflict Solver
dlgSgConflictSolverMarkResolved.btn"Leave Conflicted"=Leave Conflicted
dlgSgConflictSolverMarkResolved.btn"Mark Resolved"=Mark Resolved
dlgSgConflictSolverMarkResolved.fur=To complete a conflict resolution, the file needs to be marked as resolved \(git stage\). Until marked as resolved, the file remains in conflicted state and you can try other conflict resolutions.
dlgSgConflictSolverMarkResolved.hdl=Do you want to mark the file as resolved?
dlgSgConflictSolverMarkResolved.tle=Mark Resolved
dlgSgConflictSolverStageForCommit.btn"Don't Stage"=Don't Stage
dlgSgConflictSolverStageForCommit.btn"Stage"=Stage
dlgSgConflictSolverStageForCommit.fur=Staging is necessary to resolve the file's conflict status.
dlgSgConflictSolverStageForCommit.hdl=Do you want to stage the file for commit now?
dlgSgConflictSolverStageForCommit.tle=Stage for Commit
dlgSgCustomizeProjectUi.btn"Add"=Add
dlgSgCustomizeProjectUi.btn"Assign"=Assign
dlgSgCustomizeProjectUi.btn"Clear"=Clear
dlgSgCustomizeProjectUi.btn"Remove"=Remove
dlgSgCustomizeProjectUi.btn"Reset"=Reset
dlgSgCustomizeProjectUi.chk"Show text below icon"=Show text below icon
dlgSgCustomizeProjectUi.col"Accelerator"=Accelerator
dlgSgCustomizeProjectUi.col"Available"=Available
dlgSgCustomizeProjectUi.col"Default"=Default
dlgSgCustomizeProjectUi.col"Menu Item"=Menu Item
dlgSgCustomizeProjectUi.col"Selected"=Selected
dlgSgCustomizeProjectUi.edt"Accelerator"=Accelerator
dlgSgCustomizeProjectUi.mni"Regular Expressions"=Regular Expressions
dlgSgCustomizeProjectUi.tab"Accelerators"=Accelerators
dlgSgCustomizeProjectUi.tab"Toolbar"=Toolbar
dlgSgCustomizeProjectUi.tle=Customize
dlgSgDeleteFileTrash.hdl%1=Do you want to delete '$1'?
dlgSgDeleteFilesTrash.hdl%1=Do you want to delete the $1 selected files?
dlgSgDiscard.btn"Discard to Stash"=Discard to Stash
dlgSgDiscard.btn"Discard"=Discard
dlgSgDiscard.col"Directory"=Directory
dlgSgDiscard.col"Name"=Name
dlgSgDiscard.edt"Revert to"=Revert to
dlgSgDiscard.hdl=Discard local or staged changes
dlgSgDiscard.inf=Select the files for which changes should be discarded and whether to set them back to Index or HEAD state.
dlgSgDiscard.mni"Copy Selection in Column"=Copy Selection in Column
dlgSgDiscard.mni"Deselect All"=Deselect All
dlgSgDiscard.mni"Directory"=Directory
dlgSgDiscard.mni"Name"=Name
dlgSgDiscard.mni"Select All"=Select All
dlgSgDiscard.mni"Show Changes"=Show Changes
dlgSgDiscard.mni"Toggle"=Toggle
dlgSgDiscard.rbt"HEAD"=HEAD
dlgSgDiscard.rbt"Index"=Index
dlgSgDiscard.tle=Discard
dlgSgDiscardNoFilesFound.fur=Neither staged files nor locally changed files were found.
dlgSgDiscardNoFilesFound.hdl=There is nothing to discard.
dlgSgDiscardNoFilesFound.tle=Discard
dlgSgDiscardRevertToHead.hdl%1=Do you want to reset $1 files back to their HEAD state?
dlgSgDiscardRevertToIndex.hdl%1=Do you want to reset $1 files back to their Index state?
dlgSgDiscardRevertTo(Head|Index).btn"Discard"=Discard
dlgSgDiscardRevertTo(Head|Index).fur=The content might be hard to restore!
dlgSgDiscardRevertTo(Head|Index).tle=Discard
dlgSgErrorUtilsClientException.fur"Commit '$1' was not found in repository."=\
 Commit '$1' was not found in repository.
dlgSgErrorUtilsClientException.fur"Could not determine URL for submodule $1. Is it correctly initialized?"=\
 Could not determine URL for submodule $1. Is it correctly initialized?
dlgSgErrorUtilsClientException.fur"GIT_DIR for repository at '$1' does not exist."=\
 GIT_DIR for repository at '$1' does not exist.
dlgSgErrorUtilsClientException.fur"Repository '$1' is not valid."=Repository '$1' is not valid.
dlgSgErrorUtilsClientException.fur"svn: $1"=svn: $1
dlgSgErrorUtilsClientException.hdl=Executing a command has failed.
dlgSgErrorUtilsClientException.tle=Command Failed
dlgSgExitConfirmation.btn"Exit Now"=Exit Now
dlgSgExitConfirmation.chk=Don't show again
dlgSgExitConfirmation.fur=By closing the last window you will exit SmartGit.
dlgSgExitConfirmation.hdl=Do you want to exit SmartGit now?
dlgSgExitConfirmation.tle=Exit
dlgSgFileCompareNoChanges.btn"Open"=Open
dlgSgFileCompareNoChanges.chk=Don't show again
dlgSgFileCompareNoChanges.fur=Both file contents are byte-wise equal.\nTo see the file contents anyway, click 'Open'.
dlgSgFileCompareNoChanges.hdl=Open the file compare though no changes will be shown?
dlgSgFileCompareNoChanges.tle=File Compare
dlgSgFindObject.edt"Repository Path, Commit ID or Ref"=\
 Repository Path, Commit ID or Ref
dlgSgFindObject.tle=Find Object
dlgSgFlowBranchDivergedHandlerFastForward.btn"Fast-Forward"=Fast-Forward
dlgSgFlowBranchDivergedHandlerFastForward.fur%3=The local branch '$1' is behind its tracked branch '$2'. You may fast-forward now or do it manually later, e.g. by checking out the branch '$3'.
dlgSgFlowBranchDivergedHandlerFastForward.hdl%2=Should branch '$1' be fast-forwarded to '$2'?
dlgSgFlowBranchDivergedHandlerFastForward.tle=Start Feature
dlgSgFlowBranchDivergedHandlerReplaceRemote.btn"Replace"=Replace
dlgSgFlowBranchDivergedHandlerReplaceRemote.fur%2=The local branch '$1' seems to contain more recent but rewritten commits of remote branch '$2'.\n\nIf you are not sure whether the local branch is actually more recent than the remote branch, you should better cancel this operation and investigate local and remote changes in more detail.
dlgSgFlowBranchDivergedHandlerReplaceRemote.hdl%2=Should branch '$1' replace remote branch '$2'?
dlgSgFlowBranchDivergedHandlerReplaceRemote.tle=Finish Feature
dlgSgFlowBranchDivergedHandlerResetToRemote.btn"Reset"=Reset
dlgSgFlowBranchDivergedHandlerResetToRemote.fur%2=The remote branch '$1' seems to contain more recent but rewritten commits of local branch '$2'.\n\nIf you are not sure whether the remote branch is actually more recent than the local branch, you should better cancel this operation and investigate local and remote changes in more detail.
dlgSgFlowBranchDivergedHandlerResetToRemote.hdl%2=Should branch '$1' be reset to remote branch '$2'?
dlgSgFlowBranchDivergedHandlerResetToRemote.tle=Finish Feature
dlgSgFlowConfigure.btn"Reset to Defaults"=Reset to Defaults
dlgSgFlowConfigure.edt"Develop Branch"=Develop Branch
dlgSgFlowConfigure.edt"Feature Branches"=Feature Branches
dlgSgFlowConfigure.edt"Git-Flow Type"=Git-Flow Type
dlgSgFlowConfigure.edt"Hot-Fix Branches"=Hot-Fix Branches
dlgSgFlowConfigure.edt"Main Development Branch"=Main Development Branch
dlgSgFlowConfigure.edt"Master Branch"=Master Branch
dlgSgFlowConfigure.edt"Prefix for Feature Branches"=Prefix for Feature Branches
dlgSgFlowConfigure.edt"Release Branches"=Release Branches
dlgSgFlowConfigure.edt"Remote"=Remote
dlgSgFlowConfigure.edt"Support Branches"=Support Branches
dlgSgFlowConfigure.edt"Version Tags"=Version Tags
dlgSgFlowConfigure.hdl=Configure the branch naming scheme
dlgSgFlowConfigure.inf=Configure how your feature, release and hotfix branches should be named.
dlgSgFlowConfigure.rbt"Full \(feature, release, hotfix, support branches\)"=\
 Full \(feature, release, hotfix, support branches\)
dlgSgFlowConfigure.rbt"Light \(just feature branches\)"=Light \(just feature branches\)
dlgSgFlowConfigure.tle=Configure Git-Flow
dlgSgFlowConfigureChangeOrSwitchOff.btn"Change Configuration"=Change Configuration
dlgSgFlowConfigureChangeOrSwitchOff.btn"Switch-Off Git-Flow"=Switch-Off Git-Flow
dlgSgFlowConfigureChangeOrSwitchOff.fur=Git-Flow is already configured for this repository. You may change the Git-Flow configuration or switch-off the Git-Flow features. In both cases, the file ~/.git/config will be modified accordingly.
dlgSgFlowConfigureChangeOrSwitchOff.hdl=Do you want to change or switch-off the Git-Flow configuration?
dlgSgFlowConfigureChangeOrSwitchOff.tle=Configure Git-Flow
dlgSgFlowFeatureFinish.btn"Finish"=Finish
dlgSgFlowFeatureFinish.btn"Select from Log"=Select from Log
dlgSgFlowFeatureFinish.btn"Select"=Select
dlgSgFlowFeatureFinish.chk"Delete feature branch"=Delete feature branch
dlgSgFlowFeatureFinish.chk"Fetch latest commits and remove remote feature branch"=\
 Fetch latest commits and remove remote feature branch
dlgSgFlowFeatureFinish.edt"Commit Message"=Commit Message
dlgSgFlowFeatureFinish.hdl=Finish current feature
dlgSgFlowFeatureFinish.inf"Choose how to finish the current feature. This operation will integrate the feature into the '$1' branch."=\
 Choose how to finish the current feature. This operation will integrate the feature into the '$1' branch.
dlgSgFlowFeatureFinish.inf"Choose how to finish the feature branch '$1'. This operation will integrate the feature into the '$2' branch."=\
 Choose how to finish the feature branch '$1'. This operation will integrate the feature into the '$2' branch.
dlgSgFlowFeatureFinish.mni"JIRA"=JIRA
dlgSgFlowFeatureFinish.mni"Log"=Log
dlgSgFlowFeatureFinish.rbt"Create merge commit"=Create merge commit
dlgSgFlowFeatureFinish.rbt"Create simple commit \(squash\)"=Create simple commit \(squash\)
dlgSgFlowFeatureFinish.rbt"Rebase onto '$1'"=Rebase onto '$1'
dlgSgFlowFeatureFinish.tle=Finish Feature
dlgSgFlowFeatureStart.btn"Start"=Start
dlgSgFlowFeatureStart.edt"Base"=Base
dlgSgFlowFeatureStart.edt"Feature Name"=Feature Name
dlgSgFlowFeatureStart.err"A feature with this name already exists. Choose a different name."=\
 A feature with this name already exists. Choose a different name.
dlgSgFlowFeatureStart.err"Invalid feature name: The name must not end with a slash or dot."=\
 Invalid feature name: The name must not end with a slash or dot.
dlgSgFlowFeatureStart.hdl=Start a new feature
dlgSgFlowFeatureStart.inf%1=Enter the name of the new feature branch. This operation will fork a new branch from the '$1' branch.
dlgSgFlowFeatureStart.lbl"Resulting Branch: $1"=Resulting Branch: $1
dlgSgFlowFeatureStart.tle=Start Feature
dlgSgFlowHotfixFinish.btn"Finish"=Finish
dlgSgFlowHotfixFinish.btn"Select from Log"=Select from Log
dlgSgFlowHotfixFinish.chk"Create version tag"=Create version tag
dlgSgFlowHotfixFinish.chk"Create version tag:"=Create version tag:
dlgSgFlowHotfixFinish.chk"Delete hotfix branch"=Delete hotfix branch
dlgSgFlowHotfixFinish.chk"Fetch latest '$1' commits"=Fetch latest '$1' commits
dlgSgFlowHotfixFinish.chk"Merge to develop"=Merge to develop
dlgSgFlowHotfixFinish.chk"Push results and remove remote hotfix branch"=\
 Push results and remove remote hotfix branch
dlgSgFlowHotfixFinish.edt"Commit Message"=Commit Message
dlgSgFlowHotfixFinish.edt"Commit/Tag Message"=Commit/Tag Message
dlgSgFlowHotfixFinish.hdl=Finish a hotfix
dlgSgFlowHotfixFinish.inf"Choose how to finish the current hotfix. This operation will merge the hotfix into the '$1' and '$2' branches."=\
 Choose how to finish the current hotfix. This operation will merge the hotfix into the '$1' and '$2' branches.
dlgSgFlowHotfixFinish.inf"Choose how to finish the hotfix branch '$1'. This operation will merge the hotfix into the '$2' and '$3' branches."=\
 Choose how to finish the hotfix branch '$1'. This operation will merge the hotfix into the '$2' and '$3' branches.
dlgSgFlowHotfixFinish.inf"Choose how to finish the hotfix branch '$1'."=\
 Choose how to finish the hotfix branch '$1'.
dlgSgFlowHotfixFinish.tle=Finish Hotfix
dlgSgFlowHotfixStart.btn"Start"=Start
dlgSgFlowHotfixStart.chk"Fetch from '$1' branch"=Fetch from '$1' branch
dlgSgFlowHotfixStart.chk"Fetch from base branch"=Fetch from base branch
dlgSgFlowHotfixStart.edt"Base"=Base
dlgSgFlowHotfixStart.edt"Hotfix Name"=Hotfix Name
dlgSgFlowHotfixStart.hdl=Start a new hotfix
dlgSgFlowHotfixStart.inf%1=Enter the name of the new hotfix branch. This operation will fork a new branch from the '$1' branch.
dlgSgFlowHotfixStart.lbl"Resulting Branch: $1"=Resulting Branch: $1
dlgSgFlowHotfixStart.tle=Start Hotfix
dlgSgFlowIntegrateDevelop.btn"Integrate"=Integrate
dlgSgFlowIntegrateDevelop.chk"Fetch latest '$1' commits from remote repository"=\
 Fetch latest '$1' commits from remote repository
dlgSgFlowIntegrateDevelop.hdl%1=Integrate commits from '$1'
dlgSgFlowIntegrateDevelop.inf"Merge or rebase commits from the base branch to the current feature."=\
 Merge or rebase commits from the base branch to the current feature.
dlgSgFlowIntegrateDevelop.inf"Merge or rebase commits from the main development line to the current feature."=\
 Merge or rebase commits from the main development line to the current feature.
dlgSgFlowIntegrateDevelop.inf"Merge or rebase commits from the main development line to the feature branch '$1'."=\
 Merge or rebase commits from the main development line to the feature branch '$1'.
dlgSgFlowIntegrateDevelop.rbt"Merge from '$1'"=Merge from '$1'
dlgSgFlowIntegrateDevelop.rbt"Rebase current feature onto '$1'"=Rebase current feature onto '$1'
dlgSgFlowIntegrateDevelop.tle=Integrate Develop
dlgSgFlowReleaseFinish.btn"Finish"=Finish
dlgSgFlowReleaseFinish.btn"Select from Log"=Select from Log
dlgSgFlowReleaseFinish.chk"Create version tag"=Create version tag
dlgSgFlowReleaseFinish.chk"Create version tag:"=Create version tag:
dlgSgFlowReleaseFinish.chk"Delete release branch"=Delete release branch
dlgSgFlowReleaseFinish.chk"Fetch latest '$1' and '$2' commits"=\
 Fetch latest '$1' and '$2' commits
dlgSgFlowReleaseFinish.chk"Push results and remove remote release branch"=\
 Push results and remove remote release branch
dlgSgFlowReleaseFinish.edt"Commit Message"=Commit Message
dlgSgFlowReleaseFinish.hdl=Finish a release
dlgSgFlowReleaseFinish.inf"Choose how to finish the release branch '$1'. This operation will merge the current release into the '$2' and '$3' branches."=\
 Choose how to finish the release branch '$1'. This operation will merge the current release into the '$2' and '$3' branches.
dlgSgFlowReleaseFinish.inf"Choose how to finish the release branch '$1'."=\
 Choose how to finish the release branch '$1'.
dlgSgFlowReleaseFinish.tle=Finish Release
dlgSgFlowReleaseStart.btn"Start"=Start
dlgSgFlowReleaseStart.chk"Fetch from base branch"=Fetch from base branch
dlgSgFlowReleaseStart.edt"Base"=Base
dlgSgFlowReleaseStart.edt"Release Name"=Release Name
dlgSgFlowReleaseStart.hdl=Start a new release
dlgSgFlowReleaseStart.inf%1=Enter the name of the new release branch. This operation will fork a new branch from the '$1' branch.
dlgSgFlowReleaseStart.lbl"Resulting Branch: $1"=Resulting Branch: $1
dlgSgFlowReleaseStart.tle=Start Release
dlgSgFlowSupportStart.btn"Start"=Start
dlgSgFlowSupportStart.chk"Fetch from '$1' branch"=Fetch from '$1' branch
dlgSgFlowSupportStart.edt"Support Name"=Support Name
dlgSgFlowSupportStart.hdl=Start a new support
dlgSgFlowSupportStart.inf%1=Enter the name of the new support branch. This operation will fork a new branch from the '$1' branch.
dlgSgFlowSupportStart.lbl"Resulting Branch: $1"=Resulting Branch: $1
dlgSgFlowSupportStart.tle=Start Support
dlgSgGarbageCollector.btn"Run Garbage Collector"=Run Garbage Collector
dlgSgGarbageCollector.chk"Also prune recently created objects"=Also prune recently created objects
dlgSgGarbageCollector.chk"Expire reflog now \(will also delete stashes!\)"=\
 Expire reflog now \(will also delete stashes!\)
dlgSgGarbageCollector.chk"Optimize repository more aggressively \(may take a while\)"=\
 Optimize repository more aggressively \(may take a while\)
dlgSgGarbageCollector.hdl=Run Garbage Collector
dlgSgGarbageCollector.inf=Running the Git garbage collector will prune unreachable objects and optimize the local repository in order to reduce disk space and increase performance.
dlgSgGarbageCollector.tle=Run Garbage Collector
dlgSgGarbageCollectorDeleteAllStashes.btn"Delete Stashes"=Delete Stashes
dlgSgGarbageCollectorDeleteAllStashes.fur=Expiring the reflog now will also delete all stashes.
dlgSgGarbageCollectorDeleteAllStashes.hdl=Do you want to also delete all stashes?
dlgSgGarbageCollectorDeleteAllStashes.tle=Run Garbage Collector
dlgSgGitHubGenerateToken.btn"Authenticate"=Authenticate
dlgSgGitHubGenerateToken.edt"Account"=Account
dlgSgGitHubGenerateToken.edt"Code"=Code
dlgSgGitHubGenerateToken.edt"Link"=Link
dlgSgGitHubGenerateToken.edt"Password"=Password
dlgSgGitHubGenerateToken.hdl=Generate a new API token for GitHub
dlgSgGitHubGenerateToken.inf=Authenticate at GitHub using OAuth or by providing your credentials.
dlgSgGitHubGenerateToken.lbl"Your browser should have opened automatically, let you authenticate with your preferred account at GitHub and grant access to SmartGit. If this didn't happen, manually open following link:"=\
 Your browser should have opened automatically, let you authenticate with your preferred account at GitHub and grant access to SmartGit. If this didn't happen, manually open following link:
dlgSgGitHubGenerateToken.rbt"Authenticate using OAuth \(recommended\)"=Authenticate using OAuth \(recommended\)
dlgSgGitHubGenerateToken.rbt"Authenticate with your GitHub account and password"=\
 Authenticate with your GitHub account and password
dlgSgGitHubGenerateToken.tle=Generate API Token
dlgSgGitHubPullRequestCreate.btn"Create"=Create
dlgSgGitHubPullRequestCreate.chk"Draft \(don\'t notify code owners yet\)"=\
 Draft \(don\'t notify code owners yet\)
dlgSgGitHubPullRequestCreate.edt"$1 \u21d2"=$1 \u21d2
dlgSgGitHubPullRequestCreate.edt"Title and Description"=Title and Description
dlgSgGitHubPullRequestCreate.hdl=Create a Pull Request
dlgSgGitHubPullRequestCreate.inf=Send pull request to another repository or branch.
dlgSgGitHubPullRequestCreate.tle=Create Pull Request
dlgSgGitHubPullRequestMerge.btn"Merge"=Merge
dlgSgGitHubPullRequestMerge.btn"Select from Log"=Select from Log
dlgSgGitHubPullRequestMerge.edt"Commit Message"=Commit Message
dlgSgGitHubPullRequestMerge.hdl=Merge a Pull Request
dlgSgGitHubPullRequestMerge.inf=Choose how to merge the selected Pull Request.
dlgSgGitHubPullRequestMerge.lbl"If you have integrated the Pull Request manually, choose this option to close the Pull Request on the server."=\
 If you have integrated the Pull Request manually, choose this option to close the Pull Request on the server.
dlgSgGitHubPullRequestMerge.lbl"If your are fine with the Pull Request changes, choose this option to perform the merge directly on the GitHub server."=\
 If your are fine with the Pull Request changes, choose this option to perform the merge directly on the GitHub server.
dlgSgGitHubPullRequestMerge.lbl"To locally check how a Pull Request integrates with the latest commits, choose this option."=\
 To locally check how a Pull Request integrates with the latest commits, choose this option.
dlgSgGitHubPullRequestMerge.rbt"Mark as merged on GitHub Server"=\
 Mark as merged on GitHub Server
dlgSgGitHubPullRequestMerge.rbt"Merge on GitHub Server"=Merge on GitHub Server
dlgSgGitHubPullRequestMerge.rbt"Merge to Local Repository"=Merge to Local Repository
dlgSgGitHubPullRequestMerge.tle=Merge Pull Request
dlgSgGitLabGenerateToken.edt"Code"=Code
dlgSgGitLabGenerateToken.edt"Link"=Link
dlgSgGitLabGenerateToken.edt"Token"=Token
dlgSgGitLabGenerateToken.hdl=Enter the generated token
dlgSgGitLabGenerateToken.inf=Authenticate at GitLab and enter the generated token.
dlgSgGitLabGenerateToken.lbl"Your browser should have opened automatically, let you authenticate with your preferred account at GitLab and grant access to SmartGit. If this didn't happen, manually open following link:"=\
 Your browser should have opened automatically, let you authenticate with your preferred account at GitLab and grant access to SmartGit. If this didn't happen, manually open following link:
dlgSgGitLabGenerateToken.tle=Request Access Token
dlgSgGitLabMergeRequestCreate.btn"Create"=Create
dlgSgGitLabMergeRequestCreate.edt"$1 \u21d2"=$1 \u21d2
dlgSgGitLabMergeRequestCreate.edt"Title and Description"=Title and Description
dlgSgGitLabMergeRequestCreate.hdl=Create a Merge Request
dlgSgGitLabMergeRequestCreate.inf=Send merge request to another repository or branch.
dlgSgGitLabMergeRequestCreate.tle=Create Merge Request
dlgSgGitLabSettingsInvalidToken.fur=Use a Personal Access Token from your GitLab account.
dlgSgGitLabSettingsInvalidToken.hdl=Please enter a Personal Access Token for your GitLab account.
dlgSgGitLabSettingsInvalidToken.tle=Input Validation
dlgSgHeadMessageListenerReplaceMessage.btn"Don't Replace"=Don't Replace
dlgSgHeadMessageListenerReplaceMessage.btn"Replace This Time"=Replace This Time
dlgSgHeadMessageListenerReplaceMessage.chk=Never replace if a message is already entered
dlgSgHeadMessageListenerReplaceMessage.fur=If the commit message input field is empty, the HEAD commit's message will be re-used automatically.
dlgSgHeadMessageListenerReplaceMessage.hdl=Replace entered commit message with the HEAD commit's message?
dlgSgHeadMessageListenerReplaceMessage.tle=Commit
dlgSgHistoryEditAuthor.btn"Set Author"=Set Author
dlgSgHistoryEditAuthor.edt"Email"=Email
dlgSgHistoryEditAuthor.edt"User Name"=User Name
dlgSgHistoryEditAuthor.hdl=Edit commit author
dlgSgHistoryEditAuthor.inf=Enter the new commit author and its email address.
dlgSgHistoryEditAuthor.tle=Edit Author
dlgSgHistoryEditMessage.btn"JIRA"=JIRA
dlgSgHistoryEditMessage.btn"Select from Log"=Select from Log
dlgSgHistoryEditMessage.btn"Select"=Select
dlgSgHistoryEditMessage.btn"Set Message"=Set Message
dlgSgHistoryEditMessage.edt"Commit Message"=Commit Message
dlgSgHistoryEditMessage.hdl=Edit commit message
dlgSgHistoryEditMessage.inf=Enter the new commit message.
dlgSgHistoryEditMessage.mni"JIRA"=JIRA
dlgSgHistoryEditMessage.mni"Log"=Log
dlgSgHistoryEditMessage.tle=Edit Commit Message
dlgSgHistoryModifySplitConfirm.btn"Modify"=Modify
dlgSgHistoryModifySplitConfirm.btn"Split"=Split
dlgSgHistoryModifySplitConfirm.fur='Modify' will stop after the commit.\n\n'Split' will put the changes into the Index. You may discard some changes that should go into the second commit.\n\nAfter you've done the changes, process the remaining commits by continuing the rebase.
dlgSgHistoryModifySplitConfirm.hdl%1=Do you want to modify or split commit $1?
dlgSgHistoryModifySplitConfirm.tle=Modify or Split Commit
dlgSgHistoryPushCommitsReplaceRemoteBranch.btn"Force Push"=Force Push
dlgSgHistoryPushCommitsReplaceRemoteBranch.fur=Pushing to the remote branch is not fast-forward, so the push has to be forced. The commits in the remote branch will be lost.
dlgSgHistoryPushCommitsReplaceRemoteBranch.hdl%1=Do you want to replace the remote branch by commit $1?
dlgSgHistoryPushCommitsReplaceRemoteBranch.tle=Push Up To
dlgSgHistoryPushCommitsUpToCommit.btn"Push"=Push
dlgSgHistoryPushCommitsUpToCommit.fur=All commits up to the selected commit will be pushed to the remote repository.
dlgSgHistoryPushCommitsUpToCommit.hdl%1=Do you want to push changes up to commit $1?
dlgSgHistoryPushCommitsUpToCommit.tle=Push Up To
dlgSgHistoryPushedCommitsModifyPushedCommits.btn"Modify Pushed Commits"=Modify Pushed Commits
dlgSgHistoryPushedCommitsModifyPushedCommits.fur=Commits which are already pushed are known to other users and may have been used by them to build theirs commits upon. When modifying such commits, these users may run into unexpected conflicts later.
dlgSgHistoryPushedCommitsModifyPushedCommits.hdl=Do you want to modify commits which are already pushed?
dlgSgHistoryPushedCommitsModifyPushedCommits.tle=Journal
dlgSgHistorySplitConfirm.btn"Split"=Split
dlgSgHistorySplitConfirm.chk=Don't show again
dlgSgHistorySplitConfirm.fur=This will put the commit's changes into the Index. Unstage those changes that should go into a second commit, then commit the staged changes. Commit the remaining changes in a second \(or third\) commit.\n\nAfter you are done, process the remaining commits by continuing the rebase.
dlgSgHistorySplitConfirm.hdl=Do you want to split the selected commit into multiple commits?
dlgSgHistorySplitConfirm.tle=Split Commit
dlgSgHistorySquash.btn"JIRA"=JIRA
dlgSgHistorySquash.btn"Select from Log"=Select from Log
dlgSgHistorySquash.btn"Select"=Select
dlgSgHistorySquash.btn"Squash Commits"=Squash Commits
dlgSgHistorySquash.edt"Authorship"=Authorship
dlgSgHistorySquash.edt"Commit Message"=Commit Message
dlgSgHistorySquash.hdl=Squash multiple commits
dlgSgHistorySquash.inf=The selected commits will be replaced by one squashed commit containing all changes of the individual commits.
dlgSgHistorySquash.mni"JIRA"=JIRA
dlgSgHistorySquash.mni"Log"=Log
dlgSgHistorySquash.tle=Squash Commits
dlgSgHostingProviderAdd.btn"Add"=Add
dlgSgHostingProviderAdd.btn"Generate API Token"=Generate API Token
dlgSgHostingProviderAdd.btn"Generate Token"=Generate Token
dlgSgHostingProviderAdd.chk"Use OAuth token for repository authentication \(instead of password\)"=\
 Use OAuth token for repository authentication \(instead of password\)
dlgSgHostingProviderAdd.chk"Use SSH instead of HTTPS to access repositories"=\
 Use SSH instead of HTTPS to access repositories
dlgSgHostingProviderAdd.chk"Use SSL client certificates \(usually not required\)"=\
 Use SSL client certificates \(usually not required\)
dlgSgHostingProviderAdd.chk"Use a GitHub Enterprise instance"=Use a GitHub Enterprise instance
dlgSgHostingProviderAdd.chk"Use a custom Azure DevOps server"=\
 Use a custom Azure DevOps server
dlgSgHostingProviderAdd.chk"Use a custom GitLab server"=Use a custom GitLab server
dlgSgHostingProviderAdd.edt"Account"=Account
dlgSgHostingProviderAdd.edt"Certificate Password"=Certificate Password
dlgSgHostingProviderAdd.edt"Client Certificate"=Client Certificate
dlgSgHostingProviderAdd.edt"Domain"=Domain
dlgSgHostingProviderAdd.edt"Password"=Password
dlgSgHostingProviderAdd.edt"Server URL \(including collection\)"=Server URL \(including collection\)
dlgSgHostingProviderAdd.edt"Server URL"=Server URL
dlgSgHostingProviderAdd.edt"Token"=Token
dlgSgHostingProviderAdd.edt"User Name"=User Name
dlgSgHostingProviderAdd.hdl=Configure a new hosting provider account
dlgSgHostingProviderAdd.inf=Select for which hosting provider you want to configure a new account.
dlgSgHostingProviderAdd.lbl"For example: https://azure.devops.server/DefaultCollection"=For example: https://azure.devops.server/DefaultCollection
dlgSgHostingProviderAdd.lbl"The \(API\) token is a special auto-generated credential which SmartGit will use to authenticate at GitHub. It adds another layer of security, as you can easily revoke access by removing the token from the GitHub front-end."=\
 The \(API\) token is a special auto-generated credential which SmartGit will use to authenticate at GitHub. It adds another layer of security, as you can easily revoke access by removing the token from the GitHub front-end.
dlgSgHostingProviderAdd.lbl"The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your Azure DevOps account settings."=\
 The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your Azure DevOps account settings.
dlgSgHostingProviderAdd.lbl"The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your GitHub account settings."=\
 The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your GitHub account settings.
dlgSgHostingProviderAdd.lbl"The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your GitLab account settings."=\
 The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your GitLab account settings.
dlgSgHostingProviderAdd.lbl"Use the same login information as for the assembla website."=\
 Use the same login information as for the assembla website.
dlgSgHostingProviderAdd.lbl"Use the same login information as for the beanstalk website and make sure that for 'My Profile' - 'Account' - 'Account Settings' - 'Developer API' is enabled."=\
 Use the same login information as for the beanstalk website and make sure that for 'My Profile' - 'Account' - 'Account Settings' - 'Developer API' is enabled.
dlgSgHostingProviderAdd.lbl"Use the same login information as for the codebasehq website."=\
 Use the same login information as for the codebasehq website.
dlgSgHostingProviderAdd.lbl"Use the same login information as for the unfuddle website."=\
 Use the same login information as for the unfuddle website.
dlgSgHostingProviderAdd.tle=Add Hosting Provider
dlgSgHostingProviderEdit.btn"Generate API Token"=Generate API Token
dlgSgHostingProviderEdit.btn"Generate Token"=Generate Token
dlgSgHostingProviderEdit.chk"Use OAuth token for repository authentication \(instead of password\)"=\
 Use OAuth token for repository authentication \(instead of password\)
dlgSgHostingProviderEdit.chk"Use SSH instead of HTTPS to access repositories"=\
 Use SSH instead of HTTPS to access repositories
dlgSgHostingProviderEdit.chk"Use SSL client certificates \(usually not required\)"=\
 Use SSL client certificates \(usually not required\)
dlgSgHostingProviderEdit.chk"Use a GitHub Enterprise instance"=Use a GitHub Enterprise instance
dlgSgHostingProviderEdit.chk"Use a custom GitLab server"=Use a custom GitLab server
dlgSgHostingProviderEdit.edt"Account"=Account
dlgSgHostingProviderEdit.edt"Certificate Password"=Certificate Password
dlgSgHostingProviderEdit.edt"Client Certificate"=Client Certificate
dlgSgHostingProviderEdit.edt"Name"=Name
dlgSgHostingProviderEdit.edt"Password"=Password
dlgSgHostingProviderEdit.edt"Server URL"=Server URL
dlgSgHostingProviderEdit.edt"Token"=Token
dlgSgHostingProviderEdit.err"Please enter a Personal Access Token for your GitLab account."=\
 Please enter a Personal Access Token for your GitLab account.
dlgSgHostingProviderEdit.err"Please enter an OAuth 'refresh' token."=\
 Please enter an OAuth 'refresh' token.
dlgSgHostingProviderEdit.err"Please enter the API token."=Please enter the API token.
dlgSgHostingProviderEdit.err"Please specify the private key file."=\
 Please specify the private key file.
dlgSgHostingProviderEdit.hdl%1=Configure $1 account
dlgSgHostingProviderEdit.inf%1=Please specify your credentials to connect to $1.
dlgSgHostingProviderEdit.lbl"The \(API\) token is a special auto-generated credential which SmartGit will use to authenticate at GitHub. It adds another layer of security, as you can easily revoke access by removing the token from the GitHub front-end."=\
 The \(API\) token is a special auto-generated credential which SmartGit will use to authenticate at GitHub. It adds another layer of security, as you can easily revoke access by removing the token from the GitHub front-end.
dlgSgHostingProviderEdit.lbl"The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your GitHub account settings."=\
 The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your GitHub account settings.
dlgSgHostingProviderEdit.lbl"The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your GitLab account settings."=\
 The token may either be an autogenerated OAuth-token \(use 'Generate Token' below\) or a 'personal access token' which you can generate yourself in your GitLab account settings.
dlgSgHostingProviderEdit.tle=GitLab
dlgSgHostingProviderEdit.wrn"Connection to '$1' failed: $2"=Connection to '$1' failed: $2
dlgSgHostingProviderSelectRepository.btn"Select"=Select
dlgSgHostingProviderSelectRepository.col"Name"=Name
dlgSgHostingProviderSelectRepository.col"Namespace"=Namespace
dlgSgHostingProviderSelectRepository.col"Repository"=Repository
dlgSgHostingProviderSelectRepository.mni"Copy Selection in Column"=Copy Selection in Column
dlgSgHostingProviderSelectRepository.mni"Name"=Name
dlgSgHostingProviderSelectRepository.mni"Owner"=Owner
dlgSgHostingProviderSelectRepository.mni"Repository"=Repository
dlgSgHostingProviderSelectRepository.tle=GitHub Projects
dlgSgHttpPasswordAuthenticationFailedCause1.fur%3=The OAuth-access token could not be requested. Most likely your $1 configuration has changed and SmartGit's stored OAuth credentials are invalid.\n\nTo resolve, recreate the $2 hosting provider in the Preferences.\n\nDetails:\n\n$3
dlgSgHttpPasswordAuthenticationFailedCause1.hdl%1=$1 OAuth-authentication failed
dlgSgHttpPasswordAuthenticationFailedCause1.tle=HTTP authentication
dlgSgHttpPasswordCredentials.btn"Login"=Login
dlgSgHttpPasswordCredentials.chk"Store password"=Store password
dlgSgHttpPasswordCredentials.edt"Password"=Password
dlgSgHttpPasswordCredentials.edt"User Name"=User Name
dlgSgHttpPasswordCredentials.hdl%1=Login to '$1'
dlgSgHttpPasswordCredentials.inf=Provide the user name and password for authenticating to the repository.
dlgSgHttpPasswordCredentials.tle=Login
dlgSgIgnoreChanged.btn"Discard Changes"=Discard Changes
dlgSgIgnoreChanged.fur=The changes will be discarded when proceeding!
dlgSgIgnoreChanged.hdl=Are you sure to remove changed files?
dlgSgIgnoreChanged.tle=Ignore
dlgSgIgnoreDirectoryConfirm.btn"Ignore"=Ignore
dlgSgIgnoreDirectoryConfirm.edt"Ignore File"=Ignore File
dlgSgIgnoreDirectoryConfirm.fur=The directory name will be added to the ignore file. If the ignore file does not exist, it will be created.
dlgSgIgnoreDirectoryConfirm.hdl%1=Do you want to ignore directory '$1'?
dlgSgIgnoreDirectoryConfirm.tle=Ignore
dlgSgIgnoreEdit.btn"Edit"=Edit
dlgSgIgnoreEdit.hdl=Edit Git ignore file
dlgSgIgnoreEdit.inf=Select the Git ignore file to edit.
dlgSgIgnoreEdit.mni"Copy Path"=Copy Path
dlgSgIgnoreEdit.mni"Reveal"=Reveal
dlgSgIgnoreEdit.tle=Edit Ignore File
dlgSgIgnoreFile.btn"Ignore"=Ignore
dlgSgIgnoreFile.btn"Remove && Ignore"=Remove && Ignore
dlgSgIgnoreFile.edt"Ignore File"=Ignore File
dlgSgIgnoreFile.err"The pattern must match all selected file names. For instance, '$1' is not matched."=\
 The pattern must match all selected file names. For instance, '$1' is not matched.
dlgSgIgnoreFile.hdl=Mark files to be ignored
dlgSgIgnoreFile.inf=Choose whether to ignore only the selected file or all files matching the specified pattern. Tracked files will be removed \(stopped from tracking\).
dlgSgIgnoreFile.lbl"Use ? to match a single or \* to match multiple arbitrary characters. The pattern will be saved in the .gitignore file of the same directory."=\
 Use ? to match a single or \* to match multiple arbitrary characters. The pattern will be saved in the .gitignore file of the same directory.
dlgSgIgnoreFile.rbt"Ignore as pattern \(e.g. '\*.obj'\):"=Ignore as pattern \(e.g. '\*.obj'\):
dlgSgIgnoreFile.rbt"Ignore explicitly \(e.g. 'Makefile'\)"=Ignore explicitly \(e.g. 'Makefile'\)
dlgSgIgnoreFile.tle=Ignore
dlgSgIndexEditorSaveOrDiscard.btn"Discard"=Discard
dlgSgIndexEditorSaveOrDiscard.btn"Save"=Save
dlgSgIndexEditorSaveOrDiscard.fur=Your changes will be lost, if you don't save them now.
dlgSgIndexEditorSaveOrDiscard.hdl=Do you want to save your changes?
dlgSgIndexEditorSaveOrDiscard.tle=Close
dlgSgJournalDoubleClick.btn"Check Out '$1'"=Check Out '$1'
dlgSgJournalDoubleClick.btn"Open Log"=Open Log
dlgSgJournalDoubleClick.fur%1=Select either to check out '$1' or to open the Log for the selected commit.
dlgSgJournalDoubleClick.hdl%1=Do you want to check out '$1'?
dlgSgJournalDoubleClick.tle=Journal
dlgSgJournalFormCommitCantBeModified.fur=Not part of your head's first-parent history
dlgSgJournalFormCommitCantBeModified.hdl=At least one selected commit can't be modified.
dlgSgJournalFormCommitCantBeModified.tle=Edit Author
dlgSgLfsInstallConfirm.btn"Install"=Install
dlgSgLfsInstallConfirm.fur=This will configure hooks and filters required for LFS.
dlgSgLfsInstallConfirm.hdl=Would you like to initialize this repository for Large File Support \(LFS\)?
dlgSgLfsInstallConfirm.tle=LFS Install
dlgSgLfsTrack.edt"Pattern"=Pattern
dlgSgLfsTrack.err"File '$1' does not match the specified pattern."=\
 File '$1' does not match the specified pattern.
dlgSgLfsTrack.hdl=Mark a file or pattern as tracked
dlgSgLfsTrack.inf=Specify the file name pattern that should be handled by Large File Support \(LFS\).
dlgSgLfsTrack.tle=LFS Track
dlgSgLocalChangesFormTakeBlockListenerRevertWorkingTreeFile.btn"Revert"=Revert
dlgSgLocalChangesFormTakeBlockListenerRevertWorkingTreeFile.fur%1=You are about to apply lines from the Index to the working tree file '$1'. The modifications will be saved immediately.
dlgSgLocalChangesFormTakeBlockListenerRevertWorkingTreeFile.hdl=Do you really want to revert changes in the working tree file?
dlgSgLocalChangesFormTakeBlockListenerRevertWorkingTreeFile.tle=Revert Working Tree File
dlgSgLocalCommandRepositoryEmpty.fur=It's not possible to perform the requested operation on an empty repository.
dlgSgLocalCommandRepositoryEmpty.hdl=The repository is empty.
dlgSgLocalCommandRepositoryEmpty.tle=Save Stash
dlgSgLogCheckoutFileAs.btn"Save After"=Save After
dlgSgLogCheckoutFileAs.btn"Save Before"=Save Before
dlgSgLogCheckoutFileAs.edt"Target File"=Target File
dlgSgLogCheckoutFileAs.hdl=Save the repository file
dlgSgLogCheckoutFileAs.inf"Select the local file to saved to."=\
 Select the local file to saved to.
dlgSgLogCheckoutFileAs.inf"Select whether to save the file state Before or After the selected commit."=\
 Select whether to save the file state Before or After the selected commit.
dlgSgLogCheckoutFileAs.tle=Save File As
dlgSgLogCommentDeleteConfirm.hdl%1=Do you really want to delete comment '$1'?
dlgSgLogComment(|s)DeleteConfirm.btn"Delete Comment"=Delete Comment
dlgSgLogComment(|s)DeleteConfirm.fur=Comments can't be restored after deletion.
dlgSgLogComment(|s)DeleteConfirm.tle=Delete Comment
dlgSgLogCommentsDeleteConfirm.hdl%1=Do you really want to delete $1 comments?
dlgSgLogCompareSelectedFilesAgainstEachOther.btn"Compare Separately"=Compare Separately
dlgSgLogCompareSelectedFilesAgainstEachOther.btn"Compare With Each Other"=Compare With Each Other
dlgSgLogCompareSelectedFilesAgainstEachOther.fur=You may compare the selected files against each other or open up two separate compares for each file against its previous state.
dlgSgLogCompareSelectedFilesAgainstEachOther.hdl=Do you want to compare the selected files against each other?
dlgSgLogCompareSelectedFilesAgainstEachOther.tle=Compare
dlgSgLogCompareWithWorkingTree.btn"Compare After"=Compare After
dlgSgLogCompareWithWorkingTree.btn"Compare Before"=Compare Before
dlgSgLogCompareWithWorkingTree.edt"Working Tree File"=Working Tree File
dlgSgLogCompareWithWorkingTree.hdl=Compare repository file with local file
dlgSgLogCompareWithWorkingTree.inf=Select whether to compare with the repository file as it was Before or After the selected commit.
dlgSgLogCompareWithWorkingTree.tle=Compare with Working Tree
dlgSgLogGraphRootSwitch.chk"Include tracked remote branches"=Include tracked remote branches
dlgSgLogGraphRootSwitch.hdl=Select shown branches
dlgSgLogGraphRootSwitch.inf=Select the branches for which to show commits in the graph.
dlgSgLogGraphRootSwitch.mni"Toggle"=Toggle
dlgSgLogGraphRootSwitch.tle=Select Branches
dlgSgLogOpenFailedRepository.fur=Is the repository still valid?
dlgSgLogOpenFailedRepository.hdl=Repository could not be opened.
dlgSgLogOpenFailedRepository.tle=Log
dlgSgLogOpenFailedSubmodule.fur=Is the repository still valid?
dlgSgLogOpenFailedSubmodule.hdl=Submodule could not be opened.
dlgSgLogOpenFailedSubmodule.tle=Log
dlgSgLogOpenNewWindow.btn"Existing Window"=Existing Window
dlgSgLogOpenNewWindow.btn"New Window"=New Window
dlgSgLogOpenNewWindow.fur=There is already an existing Log window which can be revealed.
dlgSgLogOpenNewWindow.hdl=Do you want to open a new Log window?
dlgSgLogOpenNewWindow.tle=Log
dlgSgLogOpenSubmoduleLinkOrRepository.btn"History of Updates"=History of Updates
dlgSgLogOpenSubmoduleLinkOrRepository.btn"Submodule Log"=Submodule Log
dlgSgLogOpenSubmoduleLinkOrRepository.fur=The history of submodule updates will show changes to the submodule link \('GITLINK'\) from the parent repository's perspective. The Log for the submodule repository will show all commits which have occurred in the submodule repository itself.
dlgSgLogOpenSubmoduleLinkOrRepository.hdl=Do you want to show the history of submodule updates or the Log for the submodule repository?
dlgSgLogOpenSubmoduleLinkOrRepository.tle=Open Log
dlgSgLogRefActionsDeleteConfirm.btn"Delete Branch"=Delete Branch
dlgSgLogRefActionsDeleteConfirm.fur=You may lose unpushed changes or it might be complicated to restore the branch\(es\)!
dlgSgLogRefActionsDeleteConfirm.hdl%1=Do you really want to delete the local branch '$1'?
dlgSgLogRefActionsDeleteConfirm.tle=Delete Local Branch
dlgSgLogRefreshRepositoryInvalid.btn"Close Repository"=Close Repository
dlgSgLogRefreshRepositoryInvalid.btn"Remove Repository"=Remove Repository
dlgSgLogRefreshRepositoryInvalid.fur%1=This could mean that the repository at\n\n$1was removed or renamed outside SmartGit.
dlgSgLogRefreshRepositoryInvalid.hdl%1=The opened repository '$1' became invalid.
dlgSgLogRefreshRepositoryInvalid.tle=Refresh
dlgSgMerge.btn"Branches"=Branches
dlgSgMerge.btn"Create Merge-Commit"=Create Merge-Commit
dlgSgMerge.btn"Merge to Working Tree"=Merge to Working Tree
dlgSgMerge.btn"Squash-Merge"=Squash-Merge
dlgSgMerge.hdl=Merge
dlgSgMerge.inf=Select the branch or commit to merge and how they should be merged into the Working Tree.
dlgSgMerge.mni"Copy ID"=Copy ID
dlgSgMerge.mni"Copy Message"=Copy Message
dlgSgMerge.mni"Refresh"=Refresh
dlgSgMerge.tle=Merge
dlgSgMergeConfirmNoCommit.btn"Merge"=Merge
dlgSgMergeConfirmNoCommit.fur=The selected revisions\(s\) will be merged to the working tree.\n\nNote that merging directly to the GitFlow-master branch is not recommended. Instead, you should start a hotfix.
dlgSgMergeConfirmNoCommit.hdl=Do you want to perform the merge?
dlgSgMergeConfirmNoCommit.tle=Merge
dlgSgMergeHowToMerge.btn"Create Merge-Commit"=Create Merge-Commit
dlgSgMergeHowToMerge.btn"Fast-Forward"=Fast-Forward
dlgSgMergeHowToMerge.btn"Merge to Working Tree"=Merge to Working Tree
dlgSgMergeHowToMerge.btn"Squash-Merge"=Squash-Merge
dlgSgMergeHowToMerge.fur=Fast-forward merge means to just move the current branch \(HEAD\) forward to the selected commit. As an alternative you can create a merge commit or merge to the working tree. In the latter case you can review the changes and later create a merge or normal \(squash\) commit later.
dlgSgMergeHowToMerge.hdl"How to merge from branch '$1'?"=\
 How to merge from branch '$1'?
dlgSgMergeHowToMerge.hdl"How to merge from tag '$1'?"=\
 How to merge from tag '$1'?
dlgSgMergeHowToMerge.tle=Merge
dlgSgMergeNoop.fur=Merging a commit's own history into itself is technically allowed by Git but it's a no-op and will not give a new commit nor any other meaningful changes.
dlgSgMergeNoop.hdl=There is nothing to merge.
dlgSgMergeNoop.tle=Merge
dlgSgOpenRepository.edt"Repository"=Repository
dlgSgOpenRepository.err"Please specify the root directory of a Git or Mercurial repository."=\
 Please specify the root directory of a Git or Mercurial repository.
dlgSgOpenRepository.err"Please specify the root directory of a Git repository."=\
 Please specify the root directory of a Git repository.
dlgSgOpenRepository.hdl=Add existing or create new repository
dlgSgOpenRepository.inf=Specify the local Git or Mercurial repository to open. To create a new repository, specify an empty directory.
dlgSgOpenRepository.tle=Add or Create Repository
dlgSgOpenRepositoryInitializeChooseVcs.btn"Git"=Git
dlgSgOpenRepositoryInitializeChooseVcs.btn"Mercurial"=Mercurial
dlgSgOpenRepositoryInitializeChooseVcs.fur=The specified directory does not appear to be a valid Git or Mercurial repository.
dlgSgOpenRepositoryInitializeChooseVcs.hdl=What VCS should be used to initialize 'swt'?
dlgSgOpenRepositoryInitializeChooseVcs.tle=Add or Create Repository
dlgSgOpenRepositoryInitializeGit.btn"Initialize"=Initialize
dlgSgOpenRepositoryInitializeGit.fur=The specified directory does not appear to be a valid Git repository.
dlgSgOpenRepositoryInitializeGit.hdl%1=Should '$1' be initialized as a new Git repository?
dlgSgOpenRepositoryInitializeGit.tle=Add or Create Repository
dlgSgOpenRepositorySvnWorkingCopy.fur%1=You are trying to open an existing SVN working copy which is not possible with SmartGit. Instead, please use $1 to create a Git clone of your SVN repository \(i.e. a working copy based on Git instead of SVN\).
dlgSgOpenRepositorySvnWorkingCopy.hdl=Can't open SVN working copy, please re-clone with SmartGit.
dlgSgOpenRepositorySvnWorkingCopy.tle=Add or Create Repository
dlgSgOutput.chk"Don't show again for these $1 warnings"=\
 Don't show again for these $1 warnings
dlgSgOutput.chk"Don't show again for this warning"=\
 Don't show again for this warning
dlgSgOutput.chk"Show automatically for failed command"=Show automatically for failed command
dlgSgOutput.lbl"Branches need merging first."=Branches need merging first.
dlgSgOutput.lbl"Command Abort failed!"=Command Abort failed!
dlgSgOutput.lbl"Command Check Out Branch failed!"=Command Check Out Branch failed!
dlgSgOutput.lbl"Command Cherry-Pick produced warnings."=Command Cherry-Pick produced warnings.
dlgSgOutput.lbl"Command Commit failed!"=Command Commit failed!
dlgSgOutput.lbl"Command Discard failed!"=Command Discard failed!
dlgSgOutput.lbl"Command Pull \(Rebase\) failed!"=Command Pull \(Rebase\) failed!
dlgSgOutput.lbl"Command Pull \(Rebase\) produced warnings."=Command Pull \(Rebase\) produced warnings.
dlgSgOutput.lbl"Command Reset failed!"=Command Reset failed!
dlgSgOutput.lbl"Command Start Support Branch failed!"=Command Start Support Branch failed!
dlgSgOutput.lbl"If in question, please ask your repository administrator."=\
 If in question, please ask your repository administrator.
dlgSgOutput.lbl"Not all refs have been pushed."=\
 Not all refs have been pushed.
dlgSgOutput.lbl"Your local changes to the following files would be overwritten by checkout:\ncould not detach HEAD"=\
 Your local changes to the following files would be overwritten by checkout:\ncould not detach HEAD
dlgSgOutput.tle"Command Failed"=Command Failed
dlgSgOutput.tle"Command Output"=Command Output
dlgSgOutput.tle"Command Succeeded"=Command Succeeded
dlgSgOutput.tle"Output"=Output
dlgSgPingRepositoryFailed.fur%1=Please check the repository URL.\n\n$1
dlgSgPingRepositoryFailed.hdl%1=Could not connect to the repository '$1'.
dlgSgPingRepositoryFailed.tle=Clone
dlgSgPreferences.btn"Add"=Add
dlgSgPreferences.btn"Assign"=Assign
dlgSgPreferences.btn"Change Master Password"=Change Master Password
dlgSgPreferences.btn"Clear Cache"=Clear Cache
dlgSgPreferences.btn"Clear"=Clear
dlgSgPreferences.btn"Copy"=Copy
dlgSgPreferences.btn"Edit"=Edit
dlgSgPreferences.btn"Export"=Export
dlgSgPreferences.btn"I accept the risk!"=I accept the risk!
dlgSgPreferences.btn"Import"=Import
dlgSgPreferences.btn"Move Down"=Move Down
dlgSgPreferences.btn"Move Up"=Move Up
dlgSgPreferences.btn"Re-Add Defaults"=Re-Add Defaults
dlgSgPreferences.btn"Remove All"=Remove All
dlgSgPreferences.btn"Remove"=Remove
dlgSgPreferences.btn"Reset to Defaults"=Reset to Defaults
dlgSgPreferences.btn"Reset"=Reset
dlgSgPreferences.btn"Show Password"=Show Password
dlgSgPreferences.cdl"Authentication"=Authentication
dlgSgPreferences.cdl"Background Commands"=Background Commands
dlgSgPreferences.cdl"Built-in Text Editors"=Built-in Text Editors
dlgSgPreferences.cdl"Commands"=Commands
dlgSgPreferences.cdl"Conflict Solvers"=Conflict Solvers
dlgSgPreferences.cdl"Diff Tools"=Diff Tools
dlgSgPreferences.cdl"Executables"=Executables
dlgSgPreferences.cdl"Git Config"=Git Config
dlgSgPreferences.cdl"Git Executable"=Git Executable
dlgSgPreferences.cdl"Hosting Providers"=Hosting Providers
dlgSgPreferences.cdl"Keyboard Shortcuts"=Keyboard Shortcuts
dlgSgPreferences.cdl"Log and Working Tree window"=Log and Working Tree window
dlgSgPreferences.cdl"Log"=Log
dlgSgPreferences.cdl"Low-level Properties"=Low-level Properties
dlgSgPreferences.cdl"Privacy"=Privacy
dlgSgPreferences.cdl"Proxy"=Proxy
dlgSgPreferences.cdl"Refresh"=Refresh
dlgSgPreferences.cdl"SmartGit Updates"=SmartGit Updates
dlgSgPreferences.cdl"Spell Checker"=Spell Checker
dlgSgPreferences.cdl"Standard Window"=Standard Window
dlgSgPreferences.cdl"Tools"=Tools
dlgSgPreferences.cdl"User Interface"=User Interface
dlgSgPreferences.chk"Add untracked files"=Add untracked files
dlgSgPreferences.chk"Allow all commands on stash and pull request commits"=\
 Allow all commands on stash and pull request commits
dlgSgPreferences.chk"Allow modifying pushed commits \(e.g. forced-push\)"=\
 Allow modifying pushed commits \(e.g. forced-push\)
dlgSgPreferences.chk"Allow to open multiple Log windows for the same repository/file"=\
 Allow to open multiple Log windows for the same repository/file
dlgSgPreferences.chk"Also detect renames for untracked and missing files"=\
 Also detect renames for untracked and missing files
dlgSgPreferences.chk"Always fetch new commits, tags and branches from submodule"=\
 Always fetch new commits, tags and branches from submodule
dlgSgPreferences.chk"Ask for master password on startup"=\
 Ask for master password on startup
dlgSgPreferences.chk"Autoindent new lines"=Autoindent new lines
dlgSgPreferences.chk"Automatically save stash on common commands, if they fail due to local changes"=\
 Automatically save stash on common commands, if they fail due to local changes
dlgSgPreferences.chk"Automatically send 'crash footprints' after an internal error has occurred"=\
 Automatically send 'crash footprints' after an internal error has occurred
dlgSgPreferences.chk"Automatically set up tracking for new branches \(requires push.default to be unset\)"=\
 Automatically set up tracking for new branches \(requires push.default to be unset\)
dlgSgPreferences.chk"Automatically set up tracking for new branches"=\
 Automatically set up tracking for new branches
dlgSgPreferences.chk"Begin of line: jump to first non-whitespace character"=\
 Begin of line: jump to first non-whitespace character
dlgSgPreferences.chk"Closed 'favorite' repositories"=Closed 'favorite' repositories
dlgSgPreferences.chk"Compare with working tree, even if all changes are staged"=\
 Compare with working tree, even if all changes are staged
dlgSgPreferences.chk"Detect local changes in closed 'favorite' repositories"=\
 Detect local changes in closed 'favorite' repositories
dlgSgPreferences.chk"Detect remote changes"=Detect remote changes
dlgSgPreferences.chk"Detect renames \(for added and removed files, as command line Git does\)"=\
 Detect renames \(for added and removed files, as command line Git does\)
dlgSgPreferences.chk"Distinguish between content and EOL-only changes \(slightly more expensive\)"=\
 Distinguish between content and EOL-only changes \(slightly more expensive\)
dlgSgPreferences.chk"Enable integration for configured hosting providers \(pull requests, comments\)"=\
 Enable integration for configured hosting providers \(pull requests, comments\)
dlgSgPreferences.chk"Focus next change after accepting change \(Take Left/Take Right\)"=\
 Focus next change after accepting change \(Take Left/Take Right\)
dlgSgPreferences.chk"For Preview versions, automatically download the latest build"=\
 For Preview versions, automatically download the latest build
dlgSgPreferences.chk"For ambiguous protocols like 'https', show dialog to choose between Git and SVN clone"=\
 For ambiguous protocols like 'http', show dialog to choose between Git and SVN clone
dlgSgPreferences.chk"Highlight current line in text content"=\
 Highlight current line in text content
dlgSgPreferences.chk"Home and end: operate on line, not the document"=\
 Home and end: operate on line, not the document
dlgSgPreferences.chk"Include untracked files"=Include untracked files
dlgSgPreferences.chk"Initialize new submodules"=Initialize new submodules
dlgSgPreferences.chk"Left and right cursor moves: limit to current line"=\
 Left and right cursor moves: limit to current line
dlgSgPreferences.chk"Open repositories when idle"=Open repositories when idle
dlgSgPreferences.chk"Open the last used repositories"=Open the last used repositories
dlgSgPreferences.chk"Periodically invoke Git's garbage collection when idle"=\
 Periodically invoke Git's garbage collection when idle
dlgSgPreferences.chk"Preselect 'Staged' if files are staged, even if a file without staged changes is selected"=\
 Preselect 'Staged' if files are staged, even if a file without staged changes is selected
dlgSgPreferences.chk"Proxy requires authentication"=Proxy requires authentication
dlgSgPreferences.chk"Prune obsolete remote tracked branches"=Prune obsolete remote tracked branches
dlgSgPreferences.chk"Push all tags"=Push all tags
dlgSgPreferences.chk"Refresh file system also while SmartGit is in background"=\
 Refresh file system also while SmartGit is in background
dlgSgPreferences.chk"Remember from last used single Log or Working Tree window"=\
 Remember from last used single Log or Working Tree window
dlgSgPreferences.chk"Remove leading and trailing whitespace from commit message"=\
 Remove leading and trailing whitespace from commit message
dlgSgPreferences.chk"Remove missing files"=Remove missing files
dlgSgPreferences.chk"Restore all confirmation dialogs"=Restore all confirmation dialogs
dlgSgPreferences.chk"Send 'crash footprints' after an internal error has occurred"=\
 Send 'crash footprints' after an internal error has occurred
dlgSgPreferences.chk"Send usage statistics"=Send usage statistics
dlgSgPreferences.chk"Show also the resolve dialog for external conflict solvers"=\
 Show also the resolve dialog for external conflict solvers
dlgSgPreferences.chk"Show chooser dialog if multiple entries match"=\
 Show chooser dialog if multiple entries match
dlgSgPreferences.chk"Show line length guides \(only useful for monospaced-font\)"=\
 Show line length guides \(only useful for monospaced-font\)
dlgSgPreferences.chk"Show verbose date for last days, e.g. Yesterday"=\
 Show verbose date for last days, e.g. Yesterday
dlgSgPreferences.chk"Show welcome dialog if no repository has been reopened"=\
 Show welcome dialog if no repository has been reopened
dlgSgPreferences.chk"Sign all commits"=Sign all commits
dlgSgPreferences.chk"Swap 'ours' and 'theirs' on Rebase conflicts for easier understanding"=\
 Swap 'ours' and 'theirs' on Rebase conflicts for easier understanding
dlgSgPreferences.chk"Tab enters and Backspace deletes multiple leading spaces"=\
 Tab enters and Backspace deletes multiple leading spaces
dlgSgPreferences.chk"Trim whitespace"=Trim whitespace
dlgSgPreferences.chk"Update registered submodules"=Update registered submodules
dlgSgPreferences.chk"Use gravatar.com to show images for the users"=\
 Use gravatar.com to show images for the users
dlgSgPreferences.chk"Use indentation from previous non-empty line"=\
 Use indentation from previous non-empty line
dlgSgPreferences.chk"Use pre-installed \(\"system\"\) Git-Flow\*"=Use pre-installed \("system"\) Git-Flow\*
dlgSgPreferences.chk"Warn for slow rename detection"=Warn for slow rename detection
dlgSgPreferences.col"Accelerator"=Accelerator
dlgSgPreferences.col"Account"=Account
dlgSgPreferences.col"Applies To"=Applies To
dlgSgPreferences.col"Arguments"=Arguments
dlgSgPreferences.col"Command + Arguments"=Command + Arguments
dlgSgPreferences.col"Command"=Command
dlgSgPreferences.col"Default"=Default
dlgSgPreferences.col"Details"=Details
dlgSgPreferences.col"Dictionary File"=Dictionary File
dlgSgPreferences.col"File Pattern"=File Pattern
dlgSgPreferences.col"Key"=Key
dlgSgPreferences.col"Language"=Language
dlgSgPreferences.col"Name"=Name
dlgSgPreferences.col"Patterns"=Patterns
dlgSgPreferences.col"Repository"=Repository
dlgSgPreferences.col"Shortcut"=Shortcut
dlgSgPreferences.col"Value"=Value
dlgSgPreferences.edt"Date Format\*"=Date Format\*
dlgSgPreferences.edt"Double-Clicking Local File"=Double-Clicking Local File
dlgSgPreferences.edt"Email"=Email
dlgSgPreferences.edt"Example"=Example
dlgSgPreferences.edt"Fetch"=Fetch
dlgSgPreferences.edt"File Double-Click"=File Double-Click
dlgSgPreferences.edt"File Name Matches\*"=File Name Matches\*
dlgSgPreferences.edt"Font Family"=Font Family
dlgSgPreferences.edt"Font Size"=Font Size
dlgSgPreferences.edt"Functionality\*"=Functionality\*
dlgSgPreferences.edt"GPG Program"=GPG Program
dlgSgPreferences.edt"Git Executable"=Git Executable
dlgSgPreferences.edt"Hg Executable"=Hg Executable
dlgSgPreferences.edt"Host"=Host
dlgSgPreferences.edt"Known credentials"=Known credentials
dlgSgPreferences.edt"Language\*"=Language\*
dlgSgPreferences.edt"Name"=Name
dlgSgPreferences.edt"On startup"=On startup
dlgSgPreferences.edt"Password"=Password
dlgSgPreferences.edt"Port"=Port
dlgSgPreferences.edt"Prefer"=Prefer
dlgSgPreferences.edt"Preview"=Preview
dlgSgPreferences.edt"Shortcut"=Shortcut
dlgSgPreferences.edt"Signing Key"=Signing Key
dlgSgPreferences.edt"Startup Window"=Startup Window
dlgSgPreferences.edt"Submodule handling\*"=Submodule handling\*
dlgSgPreferences.edt"Suggest to"=Suggest to
dlgSgPreferences.edt"Text File Encoding"=Text File Encoding
dlgSgPreferences.edt"Theme"=Theme
dlgSgPreferences.edt"Theme\*"=Theme\*
dlgSgPreferences.edt"Time Format\*"=Time Format\*
dlgSgPreferences.edt"Username"=Username
dlgSgPreferences.hnt"Search"=Search
dlgSgPreferences.lbl"Application can be updated manually in the About dialog"=\
 Application can be updated manually in the About dialog
dlgSgPreferences.lbl"Changing these low-level properties can be harmful to the stability or performance of SmartGit. You should only continue if you are sure of what you are doing. Changed properties with a trailing \* need a restart to be applied."=\
 Changing these low-level properties can be harmful to the stability or performance of SmartGit. You should only continue if you are sure of what you are doing. Changed properties with a trailing \* need a restart to be applied.
dlgSgPreferences.lbl"Define external tools which will show up in the Tools menu. Those marked with a leading \* in front of the name can be used by the Open command."=\
 Define external tools which will show up in the Tools menu. Those marked with a leading \* in front of the name can be used by the Open command.
dlgSgPreferences.lbl"Here you can edit your account's 'gitconfig' which contains the defaults for all repositories."=\
 Here you can edit your account's 'gitconfig' which contains the defaults for all repositories.
dlgSgPreferences.lbl"Here you can view your account's 'gitconfig'. Because it contains 'include'-sections you need to edit it manually."=\
 Here you can view your account's 'gitconfig'. Because it contains 'include'-sections you need to edit it manually.
dlgSgPreferences.lbl"If you are using SSH to connect to other Git repositories, select what SSH client to use."=\
 If you are using SSH to connect to other Git repositories, select what SSH client to use.
dlgSgPreferences.lbl"In order to use all SmartGit functionality, you need to have command line Git installed on your system. Provide here the full path to the installed 'git' executable."=\
 In order to use all SmartGit functionality, you need to have command line Git installed on your system. Provide here the full path to the installed 'git' executable.
dlgSgPreferences.lbl"In order to use all SmartGit functionality, you need to have command line Git or Mercurial installed on your system. Provide here the full path to the installed 'git' or 'hg' executable."=\
 In order to use all SmartGit functionality, you need to have command line Git or Mercurial installed on your system. Provide here the full path to the installed 'git' or 'hg' executable.
dlgSgPreferences.lbl"Note: The password will be stored in plain text in SmartGit's configuration area!"=\
 Note: The password will be stored in plain text in SmartGit's configuration area!
dlgSgPreferences.lbl"Please help to improve SmartGit's quality by automatically sending 'crash footprints' which do not contain any sensitive information. You can change this option later in the preferences.\n\nA 'crash footprint' contains details about your machine \(e.g. version of operating system\), SmartGit's version/build number, the JVM state and where the internal error occurred.\n\nIt contains NO POTENTIALLY SENSITIVE INFORMATION like user names, email addresses, file contents, file paths or server names."=\
 Please help to improve SmartGit's quality by automatically sending 'crash footprints' which do not contain any sensitive information. You can change this option later in the preferences.\n\nA 'crash footprint' contains details about your machine \(e.g. version of operating system\), SmartGit's version/build number, the JVM state and where the internal error occurred.\n\nIt contains NO POTENTIALLY SENSITIVE INFORMATION like user names, email addresses, file contents, file paths or server names.
dlgSgPreferences.lbl"The proxy is primarily used for the Check for New Version. It will also be used for Git HTTP\(s\) connections if no reasonable system proxy configuration seems to be present already \(see documentation for details\)."=\
 The proxy is primarily used for the Check for New Version. It will also be used for Git HTTP\(s\) connections if no reasonable system proxy configuration seems to be present already \(see documentation for details\).
dlgSgPreferences.lbl"This file will be sent as is: $1"=\
 This file will be sent as is: $1
dlgSgPreferences.lbl"When comparing files, this list is searched from top to bottom to find a matching diff tool. If none is found, the built-in file compare is used for text files."=\
 When comparing files, this list is searched from top to bottom to find a matching diff tool. If none is found, the built-in file compare is used for text files.
dlgSgPreferences.lbl"When invoking the Conflict Solver feature, this list is searched from top to bottom to find a matching entry. If none is found, the built-in Conflict Solver is used for text files."=\
 When invoking the Conflict Solver feature, this list is searched from top to bottom to find a matching entry. If none is found, the built-in Conflict Solver is used for text files.
dlgSgPreferences.lbl"You may configure hosting provider accounts to simplify accessing your hosted repositories or to enable the GitHub pull request and comment features."=\
 You may configure hosting provider accounts to simplify accessing your hosted repositories or to enable the GitHub pull request and comment features.
dlgSgPreferences.lbl"\* if repository commit references non-pushed submodule commit"=\
 \* if repository commit references non-pushed submodule commit
dlgSgPreferences.lbl"\*\) these options require an application restart to be applied"=\
 \*\) these options require an application restart to be applied
dlgSgPreferences.lbl"\*\) this option requires an application restart to be applied"=\
 \*\) this option requires an application restart to be applied
dlgSgPreferences.lbl"easy to set up and use, supports public key and password authentication"=\
 easy to set up and use, supports public key and password authentication
dlgSgPreferences.lbl"may be harder to configure and use for new users, but is more flexible"=\
 may be harder to configure and use for new users, but is more flexible
dlgSgPreferences.mni"Accelerator"=Accelerator
dlgSgPreferences.mni"Account"=Account
dlgSgPreferences.mni"Applies To"=Applies To
dlgSgPreferences.mni"Arguments"=Arguments
dlgSgPreferences.mni"Command + Arguments"=Command + Arguments
dlgSgPreferences.mni"Command"=Command
dlgSgPreferences.mni"Copy Key"=Copy Key
dlgSgPreferences.mni"Copy Selection in Column"=Copy Selection in Column
dlgSgPreferences.mni"Default"=Default
dlgSgPreferences.mni"Details"=Details
dlgSgPreferences.mni"Dictionary File"=Dictionary File
dlgSgPreferences.mni"Edit"=Edit
dlgSgPreferences.mni"File Pattern"=File Pattern
dlgSgPreferences.mni"Language"=Language
dlgSgPreferences.mni"Name"=Name
dlgSgPreferences.mni"Patterns"=Patterns
dlgSgPreferences.mni"Repository"=Repository
dlgSgPreferences.mni"Reset to Default"=Reset to Default
dlgSgPreferences.mni"Reset"=Reset
dlgSgPreferences.mni"Select"=Select
dlgSgPreferences.mni"Shortcut"=Shortcut
dlgSgPreferences.mni"Swap"=Swap
dlgSgPreferences.rbt"Advanced \(merge, rebase, ignore, stashes, tags, history modifications\)"=\
 Advanced \(merge, rebase, ignore, stashes, tags, history modifications\)
dlgSgPreferences.rbt"Auto-detect the system proxy"=Auto-detect the system proxy
dlgSgPreferences.rbt"Automatically download and install updates"=Automatically download and install updates
dlgSgPreferences.rbt"Basic \(for simple workflows\)"=Basic \(for simple workflows\)
dlgSgPreferences.rbt"Check and report new updates"=Check and report new updates
dlgSgPreferences.rbt"Dark"=Dark
dlgSgPreferences.rbt"Do not check for new updates"=\
 Do not check for new updates
dlgSgPreferences.rbt"Don't use a proxy"=Don't use a proxy
dlgSgPreferences.rbt"Exact case \('Foo' will match 'Foo', but not 'foo'\)"=\
 Exact case \('Foo' will match 'Foo', but not 'foo'\)
dlgSgPreferences.rbt"Ignore case \('Foo' will match 'Foo' and 'foo'\)"=\
 Ignore case \('Foo' will match 'Foo' and 'foo'\)
dlgSgPreferences.rbt"Light"=Light
dlgSgPreferences.rbt"Log Graph"=Log Graph
dlgSgPreferences.rbt"Log graph \(commit oriented\)"=Log graph \(commit oriented\)
dlgSgPreferences.rbt"Prefer light-weight updates stored in home directory"=\
 Prefer light-weight updates stored in home directory
dlgSgPreferences.rbt"Show changes or open"=Show changes or open
dlgSgPreferences.rbt"Shows changes or opens the file"=\
 Shows changes or opens the file
dlgSgPreferences.rbt"Smart upper case \('FoB' will match 'FooBar', but neither 'foobar' nor 'Fob'\)"=\
 Smart upper case \('FoB' will match 'FooBar', but neither 'foobar' nor 'Fob'\)
dlgSgPreferences.rbt"Stage or unstage"=Stage or unstage
dlgSgPreferences.rbt"Stages or unstages changes"=Stages or unstages changes
dlgSgPreferences.rbt"Standard \(workflow oriented\)"=Standard \(workflow oriented\)
dlgSgPreferences.rbt"Update SmartGit application in-place \(may require administrator permissions\)"=\
 Update SmartGit application in-place \(may require administrator permissions\)
dlgSgPreferences.rbt"Use SmartGit as SSH client"=Use SmartGit as SSH client
dlgSgPreferences.rbt"Use following proxy"=Use following proxy
dlgSgPreferences.rbt"Use system SSH client"=Use system SSH client
dlgSgPreferences.rbt"Working Tree"=Working Tree
dlgSgPreferences.rbt"Working tree \(file oriented\)"=Working tree \(file oriented\)
dlgSgPreferences.tab"Behavior"=Behavior
dlgSgPreferences.tab"Colors"=Colors
dlgSgPreferences.tab"Encoding"=Encoding
dlgSgPreferences.tab"Font"=Font
dlgSgPreferences.tab"Languages"=Languages
dlgSgPreferences.tab"Pull"=Pull
dlgSgPreferences.tab"Push"=Push
dlgSgPreferences.tab"Signing"=Signing
dlgSgPreferences.tab"User"=User
dlgSgPreferences.tle=Preferences
dlgSgProcessKiller.btn"Kill Process"=Kill Process
dlgSgProcessKiller.btn"Wait"=Wait
dlgSgProcessKiller.lbl"If you think the process is hanging, click the 'Kill Process' button, otherwise 'Wait'."=\
 If you think the process is hanging, click the 'Kill Process' button, otherwise 'Wait'.
dlgSgProcessKiller.tle=Process Not Responding
dlgSgProviderPullRequestCreateNoTargetRepositories.fur=The repository is no GitHub-fork and there are no other remotes which are forks of this repository.
dlgSgProviderPullRequestCreateNoTargetRepositories.hdl=No target repositories found.
dlgSgProviderPullRequestCreateNoTargetRepositories.tle=Create Pull Request
dlgSgProviderPullRequestDropConfirmMr.btn"Drop"=Drop
dlgSgProviderPullRequestDropConfirmMr.fur=The merge request itself will not be deleted on the server.
dlgSgProviderPullRequestDropConfirmMr.hdl%1=Do you really want to drop the local commits of merge request $1?
dlgSgProviderPullRequestDropConfirmMr.tle=Drop Merge Request
dlgSgProviderPullRequestDropConfirmPr.btn"Drop"=Drop
dlgSgProviderPullRequestDropConfirmPr.fur=The pull request itself will not be deleted on the server.
dlgSgProviderPullRequestDropConfirmPr.hdl%1=Do you really want to drop the local commits of pull request $1?
dlgSgProviderPullRequestDropConfirmPr.tle=Drop Pull Request
dlgSgProviderPullRequestRetractMr.btn"Retract"=Retract
dlgSgProviderPullRequestRetractMr.edt"Comment"=Comment
dlgSgProviderPullRequestRetractMr.hdl=Retract Merge Request
dlgSgProviderPullRequestRetractMr.inf=Enter the comment which will be logged with the closed merge request.
dlgSgProviderPullRequestRetractMr.tle=Retract Merge Request
dlgSgProviderPullRequestRetractPr.btn"Retract"=Retract
dlgSgProviderPullRequestRetractPr.edt"Comment"=Comment
dlgSgProviderPullRequestRetractPr.hdl=Retract Pull Request
dlgSgProviderPullRequestRetractPr.inf=Enter the comment which will be logged with the closed pull request.
dlgSgProviderPullRequestRetractPr.tle=Retract Pull Request
dlgSgPull.btn"Fetch Only"=Fetch Only
dlgSgPull.btn"Pull"=Pull
dlgSgPull.chk"Fetch from all remotes"=Fetch from all remotes
dlgSgPull.chk"More Options"=More Options
dlgSgPull.chk"Remember as default for repository"=Remember as default for repository
dlgSgPull.chk"Update existing and fetch new tags"=\
 Update existing and fetch new tags
dlgSgPull.edt"Fetch From"=Fetch From
dlgSgPull.hdl=Pull commits from a remote repository
dlgSgPull.inf"In contrast to Fetch Only, Pull will also incorporate the fetched changes \(expand the options below to configure\)."=\
 In contrast to Fetch Only, Pull will also incorporate the fetched changes \(expand the options below to configure\).
dlgSgPull.inf"Select the remote repository to pull. In contrast to Fetch Only, Pull will also incorporate the fetched changes \(expand the options below to configure\)."=\
 Select the remote repository to pull. In contrast to Fetch Only, Pull will also incorporate the fetched changes \(expand the options below to configure\).
dlgSgPull.tle=Pull
dlgSgPullConfiguration.btn"Configure"=Configure
dlgSgPullConfiguration.chk"Remember as default for other repositories"=\
 Remember as default for other repositories
dlgSgPullConfiguration.hdl=Configure how to pull
dlgSgPullConfiguration.inf=Specify whether to merge or rebase on Pull for the current repository.
dlgSgPullConfiguration.lbl"Merging produces additional 'merge'-commits and is not recommended. It might however be a convention of your repository \(ask the maintainer to find out\)."=\
 Merging produces additional 'merge'-commits and is not recommended. It might however be a convention of your repository \(ask the maintainer to find out\).
dlgSgPullConfiguration.lbl"Rebasing gives a clean linear history and is recommended in general."=\
 Rebasing gives a clean linear history and is recommended in general.
dlgSgPullConfiguration.rbt"Merge"=Merge
dlgSgPullConfiguration.rbt"Rebase"=Rebase
dlgSgPullConfiguration.tle=Configure Pull
dlgSgPullMergeInsteadOfRebase.btn"Merge"=Merge
dlgSgPullMergeInsteadOfRebase.btn"Rebase"=Rebase
dlgSgPullMergeInsteadOfRebase.fur%1=Amongst the changes to rebase there is merge-commit $1. Rebasing merge-commits can easily cause troubles.
dlgSgPullMergeInsteadOfRebase.hdl=Do you want to merge your local changes instead of rebasing?
dlgSgPullMergeInsteadOfRebase.tle=Pull
dlgSgPullNoRemoteRepository.btn"Add Remote"=Add Remote
dlgSgPullNoRemoteRepository.fur=You first need to add a remote repository to pull from.
dlgSgPullNoRemoteRepository.hdl=No remote repository has been found.
dlgSgPullNoRemoteRepository.tle=Pull
dlgSgPullOrJustFetch.btn"Fetch"=Fetch
dlgSgPullOrJustFetch.btn"Pull"=Pull
dlgSgPullOrJustFetch.chk"Fetch from all remotes"=Fetch from all remotes
dlgSgPullOrJustFetch.chk"Update existing and fetch new tags"=\
 Update existing and fetch new tags
dlgSgPullOrJustFetch.fur=You can change the Pull behavior in the Repository Settings.
dlgSgPullOrJustFetch.hdl%1=Do you want to pull or just fetch $1 repositories?
dlgSgPullOrJustFetch.tle=Pull
dlgSgPushConfirmSingleBranch.btn"Push"=Push
dlgSgPushConfirmSingleBranch.chk=Don't show again
dlgSgPushConfirmSingleBranch.fur%1=1 branch will be pushed to '$1'.
dlgSgPushConfirmSingleBranch.hdl%1=Do you want to push branch '$1'?
dlgSgPushConfirmSingleBranch.tle=Push
dlgSgPushForced.btn"Force Push"=Force Push
dlgSgPushForced.fur=Pushing to the remote branch is not fast-forward, so the push has to be forced. The commits in the remote branch will be lost.
dlgSgPushForced.hdl=Do you want to force-push \(replace\) the remote branch?
dlgSgPushForced.tle=Push
dlgSgPushForcedSvn.btn"Force Push"=Force Push
dlgSgPushForcedSvn.fur=You are about to replace the remote branch. Revisions of that branch might not be \(easily\) accessible anymore.
dlgSgPushForcedSvn.hdl=Do you want to force-push \(replace\) the remote branch?
dlgSgPushForcedSvn.tle=Push
dlgSgPushOverwriteRemoteBranchConfirm.btn"Push"=Push
dlgSgPushOverwriteRemoteBranchConfirm.chk=Overwrite remote changes
dlgSgPushOverwriteRemoteBranchConfirm.fur=You are about to replace the remote branch, which contains commits that you haven't seen at all. Maybe you want to merge/rebase onto the remote changes before?
dlgSgPushOverwriteRemoteBranchConfirm.hdl=Do you really want to overwrite the remote branch?
dlgSgPushOverwriteRemoteBranchConfirm.tle=Push
dlgSgPushToNoTagsOrLocalBranches.fur=You can only push tags or local branches.
dlgSgPushToNoTagsOrLocalBranches.hdl=No tags or local branches to push.
dlgSgPushToNoTagsOrLocalBranches.tle=Push To
dlgSgPushToRef.btn"Push"=Push
dlgSgPushToRef.chk"Force pushing \(even if it's not fast-forward\)"=\
 Force pushing \(even if it's not fast-forward\)
dlgSgPushToRef.edt"Push To"=Push To
dlgSgPushToRef.edt"Target Repository"=Target Repository
dlgSgPushToRef.err"Enter the remote location to which the commits of the current branch should be pushed to."=\
 Enter the remote location to which the commits of the current branch should be pushed to.
dlgSgPushToRef.err"Please specify a valid Git ref."=\
 Please specify a valid Git ref.
dlgSgPushToRef.hdl"Push '$1' to a remote repository"=\
 Push '$1' to a remote repository
dlgSgPushToRef.hdl"Push '$1' to remote '$2'"=Push '$1' to remote '$2'
dlgSgPushToRef.inf=Select the target repository where to push the ref\(s\).
dlgSgPushToRef.rbt"Custom Ref:"=Custom Ref:
dlgSgPushToRef.rbt"Tracked or matching branch"=Tracked or matching branch
dlgSgPushToRef.tle=Push To
dlgSgPushToRemote.btn"Push"=Push
dlgSgPushToRemote.chk"Force pushing \(even if it's not fast-forward\)"=\
 Force pushing \(even if it's not fast-forward\)
dlgSgPushToRemote.chk"Remove remote branches which don't have a local counterpart"=\
 Remove remote branches which don't have a local counterpart
dlgSgPushToRemote.edt"Target Repository"=Target Repository
dlgSgPushToRemote.hdl%1=Push '$1' branches to another remote
dlgSgPushToRemote.inf%1=All branches of '$1' \(as locally represented by the corresponding remote branches\) will be pushed to the target repository.
dlgSgPushToRemote.tle=Push To
dlgSgPushToRemoteRemoveTargetBranches.btn"Remove"=Remove
dlgSgPushToRemoteRemoveTargetBranches.fur=Removed branches and their commits in the target remote which will be lost afterwards.
dlgSgPushToRemoteRemoveTargetBranches.hdl=Do you really want to remove target remote branches?
dlgSgPushToRemoteRemoveTargetBranches.tle=Push To
dlgSgPushToRemoteResetTargetBranches.btn"Force Push"=Force Push
dlgSgPushToRemoteResetTargetBranches.chk=Don't show again
dlgSgPushToRemoteResetTargetBranches.fur=Forcing push will overwrite branches and their commits in the target remote which will be lost afterwards.
dlgSgPushToRemoteResetTargetBranches.hdl=Do you really want to reset the target remote branches?
dlgSgPushToRemoteResetTargetBranches.tle=Push To
dlgSgPushTrackingConfigureSingle.btn"Configure"=Configure
dlgSgPushTrackingConfigureSingle.btn"Skip"=Skip
dlgSgPushTrackingConfigureSingle.fur=For your current branch tracking \(its corresponding remote branch\) has not been configured yet. Configuring tracking will keep your local branches in sync with the remote branches.
dlgSgPushTrackingConfigureSingle.hdl%1=Do you want to configure tracking for '$1' branch?
dlgSgPushTrackingConfigureSingle.tle=Push
dlgSgRebase.btn"Branches"=Branches
dlgSgRebase.btn"Rebase HEAD to"=Rebase HEAD to
dlgSgRebase.hdl=Rebase HEAD to
dlgSgRebase.inf=Select the commit to which the HEAD commits should be rebased.
dlgSgRebase.tle=Rebase
dlgSgRebaseConfirmUnreachable.btn"Rebase"=Rebase
dlgSgRebaseConfirmUnreachable.fur=You only might be able to access this commit using the 'Recyclable Commits' option of the Branches view.
dlgSgRebaseConfirmUnreachable.hdl%1=The Commit $1 would become unreachable by refs.
dlgSgRebaseConfirmUnreachable.tle=Rebase
dlgSgRebaseContinueAfterSplittingCommit.btn"Continue"=Continue
dlgSgRebaseContinueAfterSplittingCommit.fur%1=The splitting of commit $1 still is in progress and all changes of this commit have been applied.
dlgSgRebaseContinueAfterSplittingCommit.hdl=Do you want to continue after splitting the commit?
dlgSgRebaseContinueAfterSplittingCommit.tle=Rebase
dlgSgRebaseContinueConfirm.btn"Continue Rebase"=Continue Rebase
dlgSgRebaseContinueConfirm.fur=Continue the rebase operation after having resolved all conflicts.
dlgSgRebaseContinueConfirm.hdl=Do you want to continue the rebase?
dlgSgRebaseContinueConfirm.tle=Rebase
dlgSgRebaseContinueNothingToCommitContinue.btn"Continue Rebase"=Continue Rebase
dlgSgRebaseContinueNothingToCommitContinue.fur=The repository is in 'rebasing' state, but there is nothing to commit, so you may just continue the Rebase.
dlgSgRebaseContinueNothingToCommitContinue.hdl=Do you want to continue the rebase?
dlgSgRebaseContinueNothingToCommitContinue.tle=Rebase
dlgSgRebaseContinueNothingToCommitSkip.btn"Skip Commit"=Skip Commit
dlgSgRebaseContinueNothingToCommitSkip.fur=The repository is in 'rebasing' state, but there is nothing to commit, so you may just skip this rebased commit.
dlgSgRebaseContinueNothingToCommitSkip.hdl=Do you want to skip this rebased commit?
dlgSgRebaseContinueNothingToCommitSkip.tle=Rebase
dlgSgRebaseContinuePreserveUntrackedFiles.btn"Commit"=Commit
dlgSgRebaseContinuePreserveUntrackedFiles.btn"Preserve"=Preserve
dlgSgRebaseContinuePreserveUntrackedFiles.fur=Your working tree contains untracked files. You may either choose to preserve them in the working tree or include them for the rebased commit.
dlgSgRebaseContinuePreserveUntrackedFiles.hdl=Do you want to preserve untracked files in your working tree?
dlgSgRebaseContinuePreserveUntrackedFiles.tle=Rebase
dlgSgRebaseContinueWithoutApplyingAllChanges.btn"Continue Anyway"=Continue Anyway
dlgSgRebaseContinueWithoutApplyingAllChanges.btn"Put Changes into Index"=Put Changes into Index
dlgSgRebaseContinueWithoutApplyingAllChanges.fur%1=The splitting of commit $1 still is in progress, but not all changes of this commit have been applied.\n\nIf this is intentional, you can continue. Otherwise, you should click 'Put Changes into Index' and review your changes.
dlgSgRebaseContinueWithoutApplyingAllChanges.hdl=Do you want to continue splitting the commit without applying all changes?
dlgSgRebaseContinueWithoutApplyingAllChanges.tle=Rebase
dlgSgRebaseHeadToCommitConfirmBc.fur%1=This will apply all commits from the working tree branch '$1' \(HEAD\) onto the selected commit.
dlgSgRebaseHeadToCommitConfirmBc.hdl%1=Do you want to rebase '$1' onto the selected commit?
dlgSgRebaseHeadToCommitConfirmBr.fur%2=This will apply all commits from the working tree branch '$1' \(HEAD\) to '$2'.
dlgSgRebaseHeadToCommitConfirmBr.hdl%2=Do you want to rebase '$1' to '$2'?
dlgSgRebaseHeadToCommitConfirm(Br|Bc|Hr|Hc).btn"Rebase HEAD to"=Rebase HEAD to
dlgSgRebaseHeadToCommitConfirm(Br|Bc|Hr|Hc).btn"Rebase Interactively"=Rebase Interactively
dlgSgRebaseHeadToCommitConfirm(Br|Bc|Hr|Hc).tle=Rebase HEAD to Selected Commit
dlgSgRebaseInteractive.btn"Auto-Squash"=Auto-Squash
dlgSgRebaseInteractive.btn"Edit Message"=Edit Message
dlgSgRebaseInteractive.btn"Edit"=Edit
dlgSgRebaseInteractive.btn"Move Down"=Move Down
dlgSgRebaseInteractive.btn"Move Up"=Move Up
dlgSgRebaseInteractive.btn"Rebase"=Rebase
dlgSgRebaseInteractive.btn"Remove"=Remove
dlgSgRebaseInteractive.btn"Squash"=Squash
dlgSgRebaseInteractive.col"IDs"=IDs
dlgSgRebaseInteractive.col"Message"=Message
dlgSgRebaseInteractive.hdl=Rewrite History
dlgSgRebaseInteractive.inf=Reorder or squash commits according to your needs.
dlgSgRebaseInteractive.mni"Neighboring Commits"=Neighboring Commits
dlgSgRebaseInteractive.mni"To Bottom Commit"=To Bottom Commit
dlgSgRebaseInteractive.mni"To Top Commit"=To Top Commit
dlgSgRebaseInteractive.tle=Rebase Interactive
dlgSgRebaseInteractiveInitialCommitNotSupported.fur=You need to select the first commit in the current branch's history that should be modified. All commits between this commit and HEAD must have exactly one parent.
dlgSgRebaseInteractiveInitialCommitNotSupported.hdl=Changing the initial commit is not supported by the interactive rebase.
dlgSgRebaseInteractiveInitialCommitNotSupported.tle=Rebase Interactive
dlgSgRebaseInteractiveMessage.edt"Commit Message"=Commit Message
dlgSgRebaseInteractiveMessage.hdl=Edit commit message
dlgSgRebaseInteractiveMessage.inf=Provide the new message for the commit.
dlgSgRebaseInteractiveMessage.tle=Edit Message
dlgSgRebaseInteractiveRemoveCommit.btn"Remove"=Remove
dlgSgRebaseInteractiveRemoveCommit.fur=It might become hard or impossible to recover the commit again.
dlgSgRebaseInteractiveRemoveCommit.hdl%1=Do you want to remove the selected commit $1?
dlgSgRebaseInteractiveRemoveCommit.tle=Remove Commit
dlgSgRebaseTagCommit.btn"Add Tag"=Add Tag
dlgSgRebaseTagCommit.btn"Skip Tag"=Skip Tag
dlgSgRebaseTagCommit.fur=After the rebase, the remaining commit won't be reachable anymore.
dlgSgRebaseTagCommit.hdl%1=Should commit $1 be tagged?
dlgSgRebaseTagCommit.tle=Rebase
dlgSgRebasingAbortConfirm.btn"Abort Rebase"=Abort Rebase
dlgSgRebasingAbortConfirm.fur=Your working tree is in 'rebasing' state. You may abort rebasing; if you just want to skip the current patch, use Branch \| Rebase \| Rebase HEAD To instead.\n\nAborting will clean any local modification \(by invoking 'git reset --hard'\)!
dlgSgRebasingAbortConfirm.hdl=Do you want to abort the rebasing?
dlgSgRebasingAbortConfirm.tle=Rebase
dlgSgRecursiveStage.btn"Stage"=Stage
dlgSgRecursiveStage.chk"Don't show again"=Don't show again
dlgSgRecursiveStage.hdl=Save working tree changes in the Index for later commit
dlgSgRecursiveStage.inf=Select the files to stage to the Index.
dlgSgRecursiveStage.mni"Deselect All"=Deselect All
dlgSgRecursiveStage.mni"Select All"=Select All
dlgSgRecursiveStage.mni"Toggle"=Toggle
dlgSgRecursiveStage.tle=Stage
dlgSgRecursiveUnstage.btn"Unstage"=Unstage
dlgSgRecursiveUnstage.chk"Don't show again"=Don't show again
dlgSgRecursiveUnstage.hdl=Revert staged changes from the Index to the working tree
dlgSgRecursiveUnstage.inf=Select the files to unstage from the Index.
dlgSgRecursiveUnstage.tle=Unstage
dlgSgRecursive(Stage|Unstage).col"Directory"=Directory
dlgSgRecursive(Stage|Unstage).col"Name"=Name
dlgSgRemoteDeleteConfirm.btn"Delete"=Delete
dlgSgRemoteDeleteConfirm.fur=This will just delete the link to the remote repository.
dlgSgRemoteDeleteConfirm.hdl%1=Do you want to delete the remote repository '$1'?
dlgSgRemoteDeleteConfirm.tle=Delete Remote Repository
dlgSgRemoteFetchMore.btn"Fetch"=Fetch
dlgSgRemoteFetchMore.col"Branch"=Branch
dlgSgRemoteFetchMore.hdl=Fetch remote branches
dlgSgRemoteFetchMore.inf=Select the branches to fetch from the remote repository.
dlgSgRemoteFetchMore.tle=Fetch More
dlgSgRemoteFetchMoreNoMoreBranches.fur=All branches which are present in the remote repository are already locally present as well.
dlgSgRemoteFetchMoreNoMoreBranches.hdl=There are no more remote branches to fetch.
dlgSgRemoteFetchMoreNoMoreBranches.tle=Fetch More
dlgSgRemoteProperties.chk"Perform background Poll or Fetch"=Perform background Poll or Fetch
dlgSgRemoteProperties.edt"URL or Path"=URL or Path
dlgSgRemoteProperties.hdl=Configure remote properties
dlgSgRemoteProperties.inf=Change the URL and other properties for the remote.
dlgSgRemoteProperties.tle=Remote Properties
dlgSgRemoteSelect.edt"Remote"=Remote
dlgSgRemoteSelect.hdl=Initialize remote review database
dlgSgRemoteSelect.inf=Select the remote repository for which you want to initialize the review database.
dlgSgRemoteSelect.tle=Initialize Remote
dlgSgRemoteSetDepth.btn"Set Depth"=Set Depth
dlgSgRemoteSetDepth.edt"Depth"=Depth
dlgSgRemoteSetDepth.hdl=Set repository depth
dlgSgRemoteSetDepth.inf=Use a large number \(e.g. 100000\) to set an unlimited depth.
dlgSgRemoteSetDepth.tle=Set Depth
dlgSgRemotesAdd.btn"Add"=Add
dlgSgRemotesAdd.chk"Verify repository connection"=Verify repository connection
dlgSgRemotesAdd.edt"Name"=Name
dlgSgRemotesAdd.edt"URL or Path"=URL or Path
dlgSgRemotesAdd.hdl=Add a remote repository
dlgSgRemotesAdd.inf=Enter the URL and a short name for the remote repository.
dlgSgRemotesAdd.mni"Add Hosting Provider"=Add Hosting Provider
dlgSgRemotesAdd.mni"Select Local Repository"=Select Local Repository
dlgSgRemotesAdd.tle=Add Remote Repository
dlgSgRemotesNoRemoteDetected.fur%1=To perform the operation the repository configuration for $1 must contain one uniquely determined remote.
dlgSgRemotesNoRemoteDetected.hdl=No remote detected.
dlgSgRemotesNoRemoteDetected.tle=Push Up To
dlgSgRemove.btn"Remove"=Remove
dlgSgRemove.chk"Delete local files"=Delete local files
dlgSgRemove.col"Directory"=Directory
dlgSgRemove.col"Name"=Name
dlgSgRemove.hdl=Remove files from the repository
dlgSgRemove.inf=Select the files you want to remove from the repository or working tree \(stopped from tracking\).
dlgSgRemove.tle=Remove
dlgSgRenameBranch.btn"Rename"=Rename
dlgSgRenameBranch.edt"Name"=Name
dlgSgRenameBranch.hdl=Rename branch
dlgSgRenameBranch.inf%1=Enter the new name for the branch '$1'.
dlgSgRenameBranch.tle=Rename
dlgSgRenameFile.btn"Rename"=Rename
dlgSgRenameFile.edt"Path"=Path
dlgSgRenameFile.hdl=Rename the file
dlgSgRenameFile.inf=Enter the new path and name of the file.
dlgSgRenameFile.tle=Rename
dlgSgRenameRemote.btn"Rename"=Rename
dlgSgRenameRemote.edt"Name"=Name
dlgSgRenameRemote.hdl=Change the name of an existing remote
dlgSgRenameRemote.inf=Provide the new name of the selected remote.
dlgSgRenameRemote.tle=Rename Remote Repository
dlgSgRenameRepository.btn"Rename"=Rename
dlgSgRenameRepository.edt"Name"=Name
dlgSgRenameRepository.hdl=Rename repository
dlgSgRenameRepository.inf=Provide the new name for the repository. The repository directory will not be renamed.
dlgSgRenameRepository.tle=Rename
dlgSgRepositoriesSearch.btn"Start Search"=Start Search
dlgSgRepositoriesSearch.col"Path"=Path
dlgSgRepositoriesSearch.edt"Found repository \(selected ones will be remembered\)"=\
 Found repository \(selected ones will be remembered\)
dlgSgRepositoriesSearch.edt"Search In"=Search In
dlgSgRepositoriesSearch.hdl=Search existing local repositories
dlgSgRepositoriesSearch.inf=Select a root directory where the search should start and click 'Start Search''.
dlgSgRepositoriesSearch.mni"Deselect All"=Deselect All
dlgSgRepositoriesSearch.mni"Path"=Path
dlgSgRepositoriesSearch.mni"Select All"=Select All
dlgSgRepositoriesSearch.mni"Toggle"=Toggle
dlgSgRepositoriesSearch.tle=Search for Repositories
dlgSgRepositoryAddGroup.btn"Add"=Add
dlgSgRepositoryAddGroup.edt"Group Name"=Group Name
dlgSgRepositoryAddGroup.hdl=Enter the group name
dlgSgRepositoryAddGroup.inf=After having created the group, you can move repositories inside it.
dlgSgRepositoryAddGroup.tle=Add Group
dlgSgRepositoryClose.btn"Force Close"=Force Close
dlgSgRepositoryClose.fur=Note that currently running Git processes might not be interrupted.
dlgSgRepositoryClose.hdl=Do you really want to close now?
dlgSgRepositoryClose.tle=Close
dlgSgRepositoryFrameCloseWithoutPush.btn"Close Now"=Close Now
dlgSgRepositoryFrameCloseWithoutPush.chk=Don't show again
dlgSgRepositoryFrameCloseWithoutPush.fur=You have pushable commits. Maybe you want to push them before closing this window.
dlgSgRepositoryFrameCloseWithoutPush.hdl=Do you want to close without having pushed commits?
dlgSgRepositoryFrameCloseWithoutPush.tle=Close
dlgSgRepositoryOpen.btn"Remove"=Remove
dlgSgRepositoryOpen.fur=If it is relocated, remove it and add its new location.
dlgSgRepositoryOpen.hdl%1=Do you want to remove the missing repository '$1'?
dlgSgRepositoryOpen.tle=Repository Opening
dlgSgRepositoryRemoveMultiGroup.fur=Repositories inside a removed group will be moved out of the group.
dlgSgRepositoryRemoveMultiGroup.hdl%1=Do you want to remove $1 groups?
dlgSgRepositoryRemoveMultiRepo.fur=This will keep the repositories on disk, but just let SmartGit forget about them.
dlgSgRepositoryRemoveMultiRepo.hdl%1=Do you want to remove $1 repositories?
dlgSgRepositoryRemoveMultiRepoMultiGroup.fur=This will keep the repositories on disk, but just let SmartGit forget about them. Repositories inside a removed group will be moved out of the group.
dlgSgRepositoryRemoveMultiRepoMultiGroup.hdl%2=Do you want to remove $1 repositories and $2 groups?
dlgSgRepositoryRemoveMultiRepoSingleGroup.fur=This will keep the repositories on disk, but just let SmartGit forget about them. Repositories inside a removed group will be moved out of the group.
dlgSgRepositoryRemoveMultiRepoSingleGroup.hdl%2=Do you want to remove $1 repositories and the group "$2"?
dlgSgRepositoryRemoveSingleGroup.fur=Repositories inside a removed group will be moved out of the group.
dlgSgRepositoryRemoveSingleGroup.hdl%1=Do you want to remove the group "$1"?
dlgSgRepositoryRemoveSingleRepo.fur=This will keep the repositories on disk, but just let SmartGit forget about them.
dlgSgRepositoryRemoveSingleRepo.hdl%1=Do you want to remove the repository "$1"?
dlgSgRepositoryRemoveSingleRepoMultiGroup.fur=This will keep the repositories on disk, but just let SmartGit forget about them. Repositories inside a removed group will be moved out of the group.
dlgSgRepositoryRemoveSingleRepoMultiGroup.hdl%2=Do you want to remove the repository "$1" and $2 groups?
dlgSgRepositoryRemoveSingleRepoSingleGroup.fur=This will keep the repositories on disk, but just let SmartGit forget about them. Repositories inside a removed group will be moved out of the group.
dlgSgRepositoryRemoveSingleRepoSingleGroup.hdl%2=Do you want to remove the repository "$1" and the group "$2"?
dlgSgRepositorySettings.chk"Always fetch new commits, tags and branches from submodule"=\
 Always fetch new commits, tags and branches from submodule
dlgSgRepositorySettings.chk"Initialize new submodules"=Initialize new submodules
dlgSgRepositorySettings.chk"Prune obsolete remote tracked branches"=Prune obsolete remote tracked branches
dlgSgRepositorySettings.chk"Remember as default"=Remember as default
dlgSgRepositorySettings.chk"Sign all commits"=Sign all commits
dlgSgRepositorySettings.chk"Update registered submodules"=Update registered submodules
dlgSgRepositorySettings.edt"Email"=Email
dlgSgRepositorySettings.edt"GPG Program"=GPG Program
dlgSgRepositorySettings.edt"Name"=Name
dlgSgRepositorySettings.edt"Signing Key"=Signing Key
dlgSgRepositorySettings.edt"Submodule handling\*"=Submodule handling\*
dlgSgRepositorySettings.edt"Text File Encoding"=Text File Encoding
dlgSgRepositorySettings.err"Please enter a valid, comma-separated list of regular expressions."=\
 Please enter a valid, comma-separated list of regular expressions.
dlgSgRepositorySettings.hdl=Edit the effective repository settings
dlgSgRepositorySettings.inf=Here you can see and edit the effective Git settings for the user config file and the repository. To save the options as user settings, select 'Remember as default'.
dlgSgRepositorySettings.lbl"\* if repository commit references non-pushed submodule commit"=\
 \* if repository commit references non-pushed submodule commit
dlgSgRepositorySettings.tab"Encoding"=Encoding
dlgSgRepositorySettings.tab"Pull"=Pull
dlgSgRepositorySettings.tab"Push"=Push
dlgSgRepositorySettings.tab"Signing"=Signing
dlgSgRepositorySettings.tab"User & Encoding"=User & Encoding
dlgSgRepositorySettings.tab"User"=User
dlgSgRepositorySettings.tle=Repository Settings
dlgSgRepositorySettings.wrn"The entered email address does not look like a valid one."=\
 The entered email address does not look like a valid one.
dlgSgRepositorySettings.wrn"The name should not contain an email address."=\
 The name should not contain an email address.
dlgSgRepositorySettings.wrn"Without setting your name, you won't be able to commit."=\
 Without setting your name, you won't be able to commit.
dlgSgResetAdv.btn"Reset"=Reset
dlgSgResetAdv.chk"Thoroughly fix line endings according to .gitattributes"=\
 Thoroughly fix line endings according to .gitattributes
dlgSgResetAdv.chk"Thoroughly fix line-endings according to .gitattributes"=\
 Thoroughly fix line-endings according to .gitattributes
dlgSgResetAdv.hdl%1=Reset to commit $1
dlgSgResetAdv.inf=Reset the current branch head to the selected commit and optionally update Index and working tree.
dlgSgResetAdv.lbl"Current staged and local changes will be lost!"=\
 Current staged and local changes will be lost!
dlgSgResetAdv.lbl"Current staged changes will be lost!"=\
 Current staged changes will be lost!
dlgSgResetAdv.lbl"Similar to 'hard'. If a file to be replaced has working tree changes, the reset is aborted."=\
 Similar to 'hard'. If a file to be replaced has working tree changes, the reset is aborted.
dlgSgResetAdv.lbl"Similar to 'hard'. If a file to be replaced has working tree or Index changes, the reset is aborted."=\
 Similar to 'hard'. If a file to be replaced has working tree or Index changes, the reset is aborted.
dlgSgResetAdv.lbl"The Index will show all changes between the previous HEAD and the selected commit."=\
 The Index will show all changes between the previous HEAD and the selected commit.
dlgSgResetAdv.rbt"Don't touch the Index nor the working tree - 'soft'"=\
 Don't touch the Index nor the working tree - 'soft'
dlgSgResetAdv.rbt"Reset the Index and the working tree - 'hard'"=\
 Reset the Index and the working tree - 'hard'
dlgSgResetAdv.rbt"Reset the Index and the working tree, skipping modified files - 'keep'"=\
 Reset the Index and the working tree, skipping modified files - 'keep'
dlgSgResetAdv.rbt"Reset the Index and the working tree, skipping working tree modified files - 'merge'"=\
 Reset the Index and the working tree, skipping working tree modified files - 'merge'
dlgSgResetAdv.rbt"Reset the Index but not the working tree - 'mixed'"=\
 Reset the Index but not the working tree - 'mixed'
dlgSgResetAdv.tle=Reset
dlgSgResetConfirm.btn"Reset"=Reset
dlgSgResetConfirm.fur=Current staged and local changes will be lost!
dlgSgResetConfirm.hdl%1=Do you want to reset the HEAD to commit $1?
dlgSgResetConfirm.tle=Reset
dlgSgResolve.btn"Resolve"=Resolve
dlgSgResolve.chk"Stage file \(reset conflict state\)"=Stage file \(reset conflict state\)
dlgSgResolve.edt"Content"=Content
dlgSgResolve.hdl=Resolve Conflict
dlgSgResolve.inf=Select which content to use for the resolved file\(s\).
dlgSgResolve.rbt"Leave as is"=Leave as is
dlgSgResolve.rbt"Open Conflict Solver"=Open Conflict Solver
dlgSgResolve.rbt"Set to $1 \(\"ours\", $2\)"=Set to $1 \("ours", $2\)
dlgSgResolve.rbt"Set to $1 \(\"theirs\", $2\)"=Set to $1 \("theirs", $2\)
dlgSgResolve.rbt"Set to rebase target \(\"theirs\", $1\)"=\
 Set to rebase target \("theirs", $1\)
dlgSgResolve.rbt"Set to rebased branch '$1' \(\"ours\", $2\)"=\
 Set to rebased branch '$1' \("ours", $2\)
dlgSgResolve.tle=Resolve
dlgSgResolveManuallyModifiedSingle.btn"Overwrite"=Overwrite
dlgSgResolveManuallyModifiedSingle.fur%1=$1 seems to contain manual conflict resolutions. They will be lost when continuing.
dlgSgResolveManuallyModifiedSingle.hdl=Do you want to overwrite your manual conflict resolution?
dlgSgResolveManuallyModifiedSingle.tle=Resolve
dlgSgResolveSubmodule.btn"Resolve"=Resolve
dlgSgResolveSubmodule.hdl=Resolve Conflict
dlgSgResolveSubmodule.inf=Select to which submodule commit you want to resolve.
dlgSgResolveSubmodule.rbt"Check out and set submodule pointer to 'theirs' version"=\
 Check out and set submodule pointer to 'theirs' version
dlgSgResolveSubmodule.rbt"Leave submodule pointer as is"=Leave submodule pointer as is
dlgSgResolveSubmodule.tle=Resolve
dlgSgRevealCommitLocalOrTracked.btn"Reveal Local"=Reveal Local
dlgSgRevealCommitLocalOrTracked.btn"Reveal Tracked"=Reveal Tracked
dlgSgRevealCommitLocalOrTracked.chk=Always reveal local branch
dlgSgRevealCommitLocalOrTracked.fur%2=Select whether to reveal '$1' or '$2'.
dlgSgRevealCommitLocalOrTracked.hdl=Do you want to reveal the local or the tracked branch?
dlgSgRevealCommitLocalOrTracked.tle=Reveal Commit
dlgSgRevertAndCommitConfirmSingle.btn"Revert && Commit"=Revert && Commit
dlgSgRevertAndCommitConfirmSingle.btn"Revert"=Revert
dlgSgRevertAndCommitConfirmSingle.fur=This will undo the changes introduced with the selected commit.
dlgSgRevertAndCommitConfirmSingle.hdl=Do you want to revert the selected commit?
dlgSgRevertAndCommitConfirmSingle.tle=Revert
dlgSgRevertConfigurationFile.btn"Revert"=Revert
dlgSgRevertConfigurationFile.fur=Only changes of these files will be reverted \(without committing\).
dlgSgRevertConfigurationFile.hdl"Do you want to revert changes of '$1'?"=\
 Do you want to revert changes of '$1'?
dlgSgRevertConfigurationFile.tle=Revert
dlgSgRevertInProgress.fur=You have to finish the Revert before you can continue. To finish the Revert use Commit, to abort use Discard.
dlgSgRevertInProgress.hdl=There is currently a Revert in progress.
dlgSgRevertInProgress.tle=Revert
dlgSgRevertNotAllConflictsResolved.chk=Don't show again
dlgSgRevertNotAllConflictsResolved.fur=You may need to resolve the conflicts before proceeding.
dlgSgRevertNotAllConflictsResolved.hdl=Reverting failed because of conflicts.
dlgSgRevertNotAllConflictsResolved.tle=Revert
dlgSgReviewCommentAdd.btn"Add"=Add
dlgSgReviewCommentAdd.hdl=Add comment
dlgSgReviewCommentAdd.tle=Add Comment
dlgSgReviewCommentEdit.btn"Edit"=Edit
dlgSgReviewCommentEdit.hdl=Edit comment
dlgSgReviewCommentEdit.tle=Edit Comment
dlgSgReviewCommentReply.btn"Reply"=Reply
dlgSgReviewCommentReply.hdl=Reply to selected comment
dlgSgReviewCommentReply.tle=Reply To Comment
dlgSgReviewComment(Add|Edit|Reply).edt"Text"=Text
dlgSgReviewComment(Add|Edit|Reply).inf=Enter the text of the comment.
dlgSgReviewConfigureDisposeDatabase.btn"Dispose"=Dispose
dlgSgReviewConfigureDisposeDatabase.fur=This will disable the Reviewing system and unpushed local data will be lost.
dlgSgReviewConfigureDisposeDatabase.hdl=Do you really want to dispose all local review data?
dlgSgReviewConfigureDisposeDatabase.tle=Dispose Database
dlgSgReviewConfigureForGitHub.btn"Continue"=Continue
dlgSgReviewConfigureForGitHub.fur=This repository is connected to a GitHub server. GitHub comes with its own reviewing concepts, like commit comments and pull requests. Hence, you probably do not want to have SmartGit's review database in addition to GitHub's existing capabilities.
dlgSgReviewConfigureForGitHub.hdl=Do you really want to configure SmartGit's review database for your GitHub repository?
dlgSgReviewConfigureForGitHub.tle=Configure Review System
dlgSgReviewConfigureIntializeNew.btn"Initialize"=Initialize
dlgSgReviewConfigureIntializeNew.fur=This will create a new Review database in the current repository which may be pushed to other remotes later.
dlgSgReviewConfigureIntializeNew.hdl=Do you want to initialize a new Review database?
dlgSgReviewConfigureIntializeNew.tle=Configure Review System
dlgSgReviewConfigureWhat.btn"Dispose Database"=Dispose Database
dlgSgReviewConfigureWhat.btn"Edit Users"=Edit Users
dlgSgReviewConfigureWhat.btn"Initialize a Remote"=Initialize a Remote
dlgSgReviewConfigureWhat.fur=The user database allows to define aliases \(e.g. @mike\) that make addressing teammates easier in review comments.
dlgSgReviewConfigureWhat.hdl=Select what you want to configure.
dlgSgReviewConfigureWhat.tle=Configure Review Database
dlgSgReviewPullRequestClose.edt"Comment"=Comment
dlgSgReviewPullRequestClose.hdl=Close Pull Request
dlgSgReviewPullRequestClose.inf=Enter the comment which will be logged when closing the pull request.
dlgSgReviewPullRequestClose.tle=Close Pull Request
dlgSgReviewPullRequestCreate.btn"Create"=Create
dlgSgReviewPullRequestCreate.edt"Assignees"=Assignees
dlgSgReviewPullRequestCreate.edt"Message"=Message
dlgSgReviewPullRequestCreate.err"Unknown user '$1'."=Unknown user '$1'.
dlgSgReviewPullRequestCreate.hdl=Create a Pull Request
dlgSgReviewPullRequestCreate.inf=A Pull Request suggests the integration of one branch into another.
dlgSgReviewPullRequestCreate.lbl"The message will be displayed for the pull request node and will be the default commit message when integrating the pull request."=\
 The message will be displayed for the pull request node and will be the default commit message when integrating the pull request.
dlgSgReviewPullRequestCreate.lbl"The pull request will be highlighted to those users which are listed as assignees."=\
 The pull request will be highlighted to those users which are listed as assignees.
dlgSgReviewPullRequestCreate.tle=Create Pull Request
dlgSgReviewPullRequestState.btn"Assign"=Assign
dlgSgReviewPullRequestState.edt"Assignees"=Assignees
dlgSgReviewPullRequestState.edt"Comment"=Comment
dlgSgReviewPullRequestState.err"Unknown user '$1'."=Unknown user '$1'.
dlgSgReviewPullRequestState.hdl=Assign Pull Request
dlgSgReviewPullRequestState.inf=Enter the user\(s\) to which the Pull Request should be assigned to.
dlgSgReviewPullRequestState.tle=Assign
dlgSgReviewUserAddEdit.edt"Aliases"=Aliases
dlgSgReviewUserAddEdit.edt"Contact URI"=Contact URI
dlgSgReviewUserAddEdit.edt"Email"=Email
dlgSgReviewUserAddEdit.edt"Name"=Name
dlgSgReviewUserAddEdit.err"Email address is not valid."=Email address is not valid.
dlgSgReviewUserAddEdit.err"Enter at least one alias."=Enter at least one alias.
dlgSgReviewUserAddEdit.hdl=Edit User
dlgSgReviewUserAddEdit.inf=Enter the user's name and email address \(as used for Git\), one or more space- or comma-separated aliases and optional contact details.
dlgSgReviewUserAddEdit.lbl"Aliases have to be alphanumeric and can be used in comments, like '@bob please check'."=\
 Aliases have to be alphanumeric and can be used in comments, like '@bob please check'.
dlgSgReviewUserAddEdit.lbl"Contact URIs are the primary way to contact users through SmartGit, e.g. 'mailto:bob@office.com' or 'skype:bob?chat'."=\
 Contact URIs are the primary way to contact users through SmartGit, e.g. 'mailto:bob@office.com' or 'skype:bob?chat'.
dlgSgReviewUserAddEdit.tle=Edit
dlgSgReviewUsersEdit.btn"Add"=Add
dlgSgReviewUsersEdit.btn"Edit"=Edit
dlgSgReviewUsersEdit.btn"Import"=Import
dlgSgReviewUsersEdit.btn"Remove"=Remove
dlgSgReviewUsersEdit.col"Aliases"=Aliases
dlgSgReviewUsersEdit.col"Email"=Email
dlgSgReviewUsersEdit.col"Name"=Name
dlgSgReviewUsersEdit.hdl=Configure review database users
dlgSgReviewUsersEdit.inf=Users can have aliases which are used in comment texts and they have optional contact details.
dlgSgReviewUsersEdit.tle=Configure Users
dlgSgSelectBranch.edt"Auxiliary Branch"=Auxiliary Branch
dlgSgSelectBranch.edt"Tracked Branch"=Tracked Branch
dlgSgSelectBranch.hdl"Select tracked branch"=Select tracked branch
dlgSgSelectBranch.inf"Select the branch which should be tracked by '$1'."=\
 Select the branch which should be tracked by '$1'.
dlgSgSelectBranch.inf"Select which auxiliary branch should be shown in addition to the current branch."=\
 Select which auxiliary branch should be shown in addition to the current branch.
dlgSgSelectBranch.tle=Set Tracked Branch
dlgSgSetup.btn"Configure Proxy"=Configure Proxy
dlgSgSetup.btn"Exit"=Exit
dlgSgSetup.chk"Automatically send 'crash footprints' after an internal error has occurred"=\
 Automatically send 'crash footprints' after an internal error has occurred
dlgSgSetup.chk"I understand and agree to all terms and conditions of the"=\
 I understand and agree to all terms and conditions of the
dlgSgSetup.chk"Register existing license"=Register existing license
dlgSgSetup.chk"Send 'crash footprints' after an internal error has occurred"=\
 Send 'crash footprints' after an internal error has occurred
dlgSgSetup.chk"Send usage statistics"=Send usage statistics
dlgSgSetup.chk"Use gravatar.com to show images for the users"=\
 Use gravatar.com to show images for the users
dlgSgSetup.edt"Email"=Email
dlgSgSetup.edt"Git Executable"=Git Executable
dlgSgSetup.edt"Hg Executable"=Hg Executable
dlgSgSetup.edt"License File"=License File
dlgSgSetup.edt"Repository search"=Repository search
dlgSgSetup.edt"User Name"=User Name
dlgSgSetup.inf"Decide what SmartGit window you prefer. You can change this option later in the preferences."=\
 Decide what SmartGit window you prefer. You can change this option later in the preferences.
dlgSgSetup.inf"If you are using SSH to connect to other Git repositories, select what SSH client to use. You can change it later in the Preferences."=\
 If you are using SSH to connect to other Git repositories, select what SSH client to use. You can change it later in the Preferences.
dlgSgSetup.inf"Please review the following privacy options. You can change them later in the preferences."=\
 Please review the following privacy options. You can change them later in the preferences.
dlgSgSetup.inf"Please wait a few moments while searching for a Git installation."=\
 Please wait a few moments while searching for a Git or Hg installation.
dlgSgSetup.inf"SmartGit requires compatible Git installations on your system. Please specify the paths to your 'git' executable."=\
 SmartGit requires compatible Git installations on your system. Please specify the paths to your 'git' executable.
dlgSgSetup.inf"User name and email will be stored as part of your commits. Here you can configure the default values which are stored in .gitconfig."=\
 User name and email will be stored as part of your commits. Here you can configure the default values which are stored in .gitconfig.
dlgSgSetup.inf"Welcome to SmartGit! Please confirm that you are accepting the license agreement."=\
 Welcome to SmartGit! Please confirm that you are accepting the license agreement.
dlgSgSetup.lbl"Please help to improve SmartGit's quality by automatically sending 'crash footprints' which do not contain any sensitive information. You can change this option later in the preferences.\n\nA 'crash footprint' contains details about your machine \(e.g. version of operating system\), SmartGit's version/build number, the JVM state and where the internal error occurred.\n\nIt contains NO POTENTIALLY SENSITIVE INFORMATION like user names, email addresses, file contents, file paths or server names."=\
 Please help to improve SmartGit's quality by automatically sending 'crash footprints' which do not contain any sensitive information. You can change this option later in the preferences.\n\nA 'crash footprint' contains details about your machine \(e.g. version of operating system\), SmartGit's version/build number, the JVM state and where the internal error occurred.\n\nIt contains NO POTENTIALLY SENSITIVE INFORMATION like user names, email addresses, file contents, file paths or server names.
dlgSgSetup.lbl"You confirm that you will use SmartGit solely for non-commercial purposes."=\
 You confirm that you will use SmartGit solely for non-commercial purposes.
dlgSgSetup.lbl"You have purchased a SmartGit license and are eligible to use SmartGit for both commercial and non-commercial purposes."=\
 You have purchased a SmartGit license and are eligible to use SmartGit for both commercial and non-commercial purposes.
dlgSgSetup.lbl"You may try SmartGit free of charge for 30 days."=\
 You may try SmartGit free of charge for 30 days.
dlgSgSetup.rbt"Commits \(Log History\)"=Commits \(Log History\)
dlgSgSetup.rbt"Free SmartGit evaluation for commercial use"=\
 Free SmartGit evaluation for commercial use
dlgSgSetup.rbt"Log Graph \(commit oriented\)"=Log Graph \(commit oriented\)
dlgSgSetup.rbt"Non-commercial use only \(most features, no support\)"=\
 Non-commercial use only \(most features, no support\)
dlgSgSetup.rbt"Registered user, commercial use \(all features, support\)"=\
 Registered user, commercial use \(all features, support\)
dlgSgSetup.rbt"Standard \(workflow oriented\)"=Standard \(workflow oriented\)
dlgSgSetup.rbt"Undecided"=Undecided
dlgSgSetup.rbt"Use SmartGit as SSH client"=Use SmartGit as SSH client
dlgSgSetup.rbt"Use system SSH client"=Use system SSH client
dlgSgSetup.rbt"Working tree \(file oriented\)"=Working tree \(file oriented\)
dlgSgSetup.tle=Setup SmartGit
dlgSgShowLocalChanges.btn"Compare"=Compare
dlgSgShowLocalChanges.hdl%1=File $1 modified in Index and working tree
dlgSgShowLocalChanges.inf=Select the file states to compare.
dlgSgShowLocalChanges.rbt"HEAD vs. Index"=HEAD vs. Index
dlgSgShowLocalChanges.rbt"HEAD vs. Working Tree"=HEAD vs. Working Tree
dlgSgShowLocalChanges.rbt"Index vs. Working Tree"=Index vs. Working Tree
dlgSgShowLocalChanges.tle=Show Changes
dlgSgSplitOffFiles.btn"JIRA"=JIRA
dlgSgSplitOffFiles.btn"Split Off"=Split Off
dlgSgSplitOffFiles.edt"Commit Message"=Commit Message
dlgSgSplitOffFiles.hdl=Move files to a second commit
dlgSgSplitOffFiles.inf=Provide the message for the second commit that should contain the changes from the selected files.
dlgSgSplitOffFiles.tle=Split Off Files
dlgSgSplitOffFilesEmptyCommit.fur=By splitting off all files, the resulting commit would become empty.
dlgSgSplitOffFilesEmptyCommit.hdl=You can't split off all files from a commit
dlgSgSplitOffFilesEmptyCommit.tle=Commit
dlgSgSshCredentials.btn"Login"=Login
dlgSgSshCredentials.chk"Store passphrase"=Store passphrase
dlgSgSshCredentials.chk"Store password"=Store password
dlgSgSshCredentials.edt"Authentication Type"=Authentication Type
dlgSgSshCredentials.edt"Passphrase"=Passphrase
dlgSgSshCredentials.edt"Password"=Password
dlgSgSshCredentials.edt"Private Key File"=Private Key File
dlgSgSshCredentials.hdl=SSH Credentials
dlgSgSshCredentials.inf=Provide the credentials for authenticating to the SSH server 'git' as user 'root'.
dlgSgSshCredentials.rbt"Password"=Password
dlgSgSshCredentials.rbt"Private Key"=Private Key
dlgSgSshCredentials.tle=SSH Authentication
dlgSgSshCredentials.wrn"$1"=$1
dlgSgStageConflict.btn"Stage Anyway"=Stage Anyway
dlgSgStageConflict.fur=The file contains conflict markers which indicate that you have not resolved all conflicts.
dlgSgStageConflict.hdl%1=Should $1 really be staged?
dlgSgStageConflict.tle=Stage
dlgSgStageNoFilesFound.fur=Could not find files with modified working tree, untracked or missing files.
dlgSgStageNoFilesFound.hdl=No files found that could be staged.
dlgSgStageNoFilesFound.tle=Stage
dlgSgStartupExpired.btn"&Continue \($1\)"=&Continue \($1\)
dlgSgStartupExpired.btn"Continue \($1\)"=Continue \($1\)
dlgSgStartupExpired.btn"Download New Version"=Download New Version
dlgSgStartupExpired.btn"Exit"=Exit
dlgSgStartupExpired.fur=Please download and install a new one or a release version.
dlgSgStartupExpired.hdl=This beta version expired.
dlgSgStartupExpired.tle=Beta Version Expired
dlgSgStashAll.btn"+ Keep Index"=+ Keep Index
dlgSgStashAll.btn"+ Keep Working Tree"=+ Keep Working Tree
dlgSgStashAll.btn"Stash All"=Stash All
dlgSgStashAll.btn"Stash Selection"=Stash Selection
dlgSgStashAll.edt"Message"=Message
dlgSgStashAll.hdl=Stash Index and Working Tree changes
dlgSgStashAll.inf=The saved stash can be applied later. By default, Index and Working Tree are cleaned, but you may keep the Index or both.
dlgSgStashAll.tle=Save Stash
dlgSgStashApply.btn"Apply && Drop"=Apply && Drop
dlgSgStashApply.btn"Apply"=Apply
dlgSgStashApply.chk"Restore Index"=Restore Index
dlgSgStashApply.hdl"Apply a previously saved stash"=Apply a previously saved stash
dlgSgStashApply.hdl"Apply the latest saved stash"=Apply the latest saved stash
dlgSgStashApply.inf=Decide how to apply the stash to the Index or working tree.
dlgSgStashApply.tle=Apply Stash
dlgSgStashApplyWithoutRestoringIndex.btn"Try Without Restoring Index"=Try Without Restoring Index
dlgSgStashApplyWithoutRestoringIndex.fur=Restoring the index failed while applying the patch.
dlgSgStashApplyWithoutRestoringIndex.hdl=Should the stash been applied without restoring the index?
dlgSgStashApplyWithoutRestoringIndex.tle=Apply Stash
dlgSgStashOnDemandConfirmation.btn"Discard"=Discard
dlgSgStashOnDemandConfirmation.btn"Save Stash"=Save Stash
dlgSgStashOnDemandConfirmation.chk=Automatically save stash
dlgSgStashOnDemandConfirmation.fur=Please either select to save them as a stash for later manual re-applying or discard them.
dlgSgStashOnDemandConfirmation.hdl=What to do with the working tree or Index changes?
dlgSgStashOnDemandConfirmation.tle=Reset
dlgSgStashOnDemandLocalChangesCantBeReapplied.fur=Once you have concluded the Pull, you should manually apply the latest stash to get your local changes back into the working tree.
dlgSgStashOnDemandLocalChangesCantBeReapplied.hdl=Your local changes have been stashed away, but could not be reapplied.
dlgSgStashOnDemandLocalChangesCantBeReapplied.tle=Pull
dlgSgStashOnDemandProceedWithoutStashing.btn"Proceed"=Proceed
dlgSgStashOnDemandProceedWithoutStashing.fur=Auto-stashing changes is not possible due to technical reasons. Changes will be discarded!
dlgSgStashOnDemandProceedWithoutStashing.hdl=Do you want to proceed without stashing changes?
dlgSgStashOnDemandProceedWithoutStashing.tle=Reset
dlgSgStashRename.btn"Rename"=Rename
dlgSgStashRename.edt"Message"=Message
dlgSgStashRename.hdl=Rename Stash
dlgSgStashRename.inf=Enter the new message for the stash
dlgSgStashRename.tle=Rename
dlgSgStashesDropConfirm.btn"Drop Stash"=Drop Stash
dlgSgStashesDropConfirm.btn"Drop Stashes"=Drop Stashes
dlgSgStashesDropConfirm.fur=The stashed changes will be lost.
dlgSgStashesDropConfirm.hdl=Do you want to drop the selected stash?
dlgSgStashesDropConfirm.tle=Drop Stash
dlgSgSubmoduleAdd.chk"Map SVN trunk, tags and branches to Git"=\
 Map SVN trunk, tags and branches to Git
dlgSgSubmoduleAdd.edt"Branch"=Branch
dlgSgSubmoduleAdd.edt"Local Directory"=Local Directory
dlgSgSubmoduleAdd.edt"Local Path"=Local Path
dlgSgSubmoduleAdd.edt"Repository URL"=Repository URL
dlgSgSubmoduleAdd.edt"URL"=URL
dlgSgSubmoduleAdd.inf"Provide the path where the submodule should be added relative to the outer repository root directory."=\
 Provide the path where the submodule should be added relative to the outer repository root directory.
dlgSgSubmoduleAdd.inf"Specify the repository to clone as submodule."=\
 Specify the repository to clone as submodule.
dlgSgSubmoduleAdd.lbl"e.g. https://user@server:port/path/to/repository"=e.g. https://user@server:port/path/to/repository
dlgSgSubmoduleAdd.mni"Add Hosting Provider"=Add Hosting Provider
dlgSgSubmoduleAdd.rbt"Local repository"=Local repository
dlgSgSubmoduleAdd.rbt"Remote repository"=Remote repository
dlgSgSubmoduleAdd.tle=Add Submodule
dlgSgSubmoduleDeinitConfirm.btn"Deinit"=Deinit
dlgSgSubmoduleDeinitConfirm.fur=The submodule will be skipped from the working tree. To get rid from the \(remote\) repository, you have to use Unregister instead.
dlgSgSubmoduleDeinitConfirm.hdl%1=Do you want to deinit submodule '$1'?
dlgSgSubmoduleDeinitConfirm.tle=Deinit Submodule
dlgSgSubmoduleResetConfirm.btn"Reset"=Reset
dlgSgSubmoduleResetConfirm.fur=The corresponding commit will be checked out, so the submodule content will match the content of the registered commit.
dlgSgSubmoduleResetConfirm.hdl%1=Do you want to reset submodule '$1' to the commit registered in the repository?
dlgSgSubmoduleResetConfirm.tle=Reset Submodule
dlgSgSubmoduleSync.btn"Synchronize"=Synchronize
dlgSgSubmoduleSync.chk"Pull submodule repositories"=Pull submodule repositories
dlgSgSubmoduleSync.hdl=Synchronize all submodules
dlgSgSubmoduleSync.inf=Submodule entries will be updated in .git/config. You may customize the URLs afterwards or pull immediately.
dlgSgSubmoduleSync.tle=Synchronize Submodules
dlgSgSubtreeAdd.chk"Create local branch \(for advanced operations\)"=\
 Create local branch \(for advanced operations\)
dlgSgSubtreeAdd.chk"Squash subtree into single commit"=Squash subtree into single commit
dlgSgSubtreeAdd.edt"Branch"=Branch
dlgSgSubtreeAdd.edt"Local Directory"=Local Directory
dlgSgSubtreeAdd.edt"Local Path"=Local Path
dlgSgSubtreeAdd.edt"Remote"=Remote
dlgSgSubtreeAdd.edt"Repository URL"=Repository URL
dlgSgSubtreeAdd.inf"Provide the path where the subtree should be added relative to the outer repository root directory."=\
 Provide the path where the subtree should be added relative to the outer repository root directory.
dlgSgSubtreeAdd.inf"Specify the repository to clone as subtree."=\
 Specify the repository to clone as subtree.
dlgSgSubtreeAdd.lbl"Local branches for subtrees will only be useful if you plan to use Subtree-Split and Subtree-Reset operations."=\
 Local branches for subtrees will only be useful if you plan to use Subtree-Split and Subtree-Reset operations.
dlgSgSubtreeAdd.lbl"e.g. https://user@server:port/path/to/repository"=e.g. https://user@server:port/path/to/repository
dlgSgSubtreeAdd.rbt"Local repository"=Local repository
dlgSgSubtreeAdd.rbt"Remote repository"=Remote repository
dlgSgSubtreeAdd.tle=Add Subtree
dlgSgSvnClientCertificate.btn"Login"=Login
dlgSgSvnClientCertificate.chk"Store passphrase"=Store passphrase
dlgSgSvnClientCertificate.edt"Certificate"=Certificate
dlgSgSvnClientCertificate.edt"Passphrase"=Passphrase
dlgSgSvnClientCertificate.hdl=Client Certificate
dlgSgSvnClientCertificate.inf%1=Provide the client certificate for authentication to the SVN repository '$1'.
dlgSgSvnClientCertificate.tle=SVN Authentication
dlgSgSvnClientCertificate.wrn"Authentication to the SVN repository '$1' failed with error: $2"=\
 Authentication to the SVN repository '$1' failed with error: $2'
dlgSgSvnSslFingerprintChanged.btn"Accept"=Accept
dlgSgSvnSslFingerprintChanged.btn"Reject"=Reject
dlgSgSvnSslFingerprintChanged.edt"MD5 fingerprint"=MD5 fingerprint
dlgSgSvnSslFingerprintChanged.edt"SHA fingerprint"=SHA fingerprint
dlgSgSvnSslFingerprintChanged.edt"Server"=Server
dlgSgSvnSslFingerprintChanged.lbl"The server fingerprint has changed! Is the change correct?"=\
 The server fingerprint has changed! Is the change correct?
dlgSgSvnSslFingerprintChanged.lbl"This might indicate a security problem! When in doubt, contact your server administrator."=\
 This might indicate a security problem! When in doubt, contact your server administrator.
dlgSgSvnSslFingerprintChanged.tle=SVN Authentication
dlgSgSyncConfirm.btn"Synchronize"=Synchronize
dlgSgSyncConfirm.chk=Don't show again
dlgSgSyncConfirm.fur=First, local changes will be pushed, then possible remote changes pulled. The advantage over a normal push is that if it fails because of remote changes, they will be pulled automatically.
dlgSgSyncConfirm.hdl=Do you want to proceed with sync?
dlgSgSyncConfirm.tle=Synchronize
dlgSgTagAdd.btn"Add Tag && Push"=Add Tag && Push
dlgSgTagAdd.btn"Add Tag"=Add Tag
dlgSgTagAdd.chk"GPG-sign tag"=GPG-sign tag
dlgSgTagAdd.edt"Annotated Tag Message"=Annotated Tag Message
dlgSgTagAdd.edt"Tag"=Tag
dlgSgTagAdd.err"The name must not end with a slash or dot."=\
 The name must not end with a slash or dot.
dlgSgTagAdd.hdl=Add tag to current HEAD commit
dlgSgTagAdd.inf=Enter the name of the tag to create. If entering a message, an annotated tag is created.
dlgSgTagAdd.tle=Add Tag
dlgSgTagAddOverwrite.btn"Overwrite"=Overwrite
dlgSgTagAddOverwrite.fur=Click 'Cancel' to choose a different tag name.
dlgSgTagAddOverwrite.hdl%1=The tag '$1' already exists. Do you want to overwrite it?
dlgSgTagAddOverwrite.tle=Add Tag
dlgSgTagDeleteConfirmSingle.btn"Delete"=Delete
dlgSgTagDeleteConfirmSingle.chk%1=Delete from remote '$1'
dlgSgTagDeleteConfirmSingle.fur=You will not be able to restore it.
dlgSgTagDeleteConfirmSingle.hdl%1=Do you want to delete the tag '$1'?
dlgSgTagDeleteConfirmSingle.tle=Delete
dlgSgToolAdd.edt"Keyboard Shortcut"=Keyboard Shortcut
dlgSgToolAdd.err"Please enter a confirmation message."=Please enter a confirmation message.
dlgSgToolAdd.err"Please enter the name for this command."=\
 Please enter the name for this command.
dlgSgToolAdd.err"Select the command which should be invoked."=\
 Select the command which should be invoked.
dlgSgToolAdd.err"The options 'Can be used by the Open command' and 'Show output and wait until finished' cannot both be set."=\
 The options 'Can be used by the Open command' and 'Show output and wait until finished' cannot both be set.
dlgSgToolAdd.hdl=Add external tool
dlgSgToolAdd.tle=Add
dlgSgToolEdit.edt"Keyboard Shortcut"=Keyboard Shortcut
dlgSgToolEdit.err"Please enter the name for this command."=\
 Please enter the name for this command.
dlgSgToolEdit.hdl=Edit external tool
dlgSgToolEdit.tle=Edit
dlgSgTool(Add|Edit).btn"Clear"=Clear
dlgSgTool(Add|Edit).chk"Can be used by the Open command"=\
 Can be used by the Open command
dlgSgTool(Add|Edit).chk"Request confirmation before invoking:"=Request confirmation before invoking:
dlgSgTool(Add|Edit).chk"Show output and wait until finished"=\
 Show output and wait until finished
dlgSgTool(Add|Edit).edt"Accelerator"=Accelerator
dlgSgTool(Add|Edit).edt"Applies To"=Applies To
dlgSgTool(Add|Edit).edt"Arguments"=Arguments
dlgSgTool(Add|Edit).edt"Command"=Command
dlgSgTool(Add|Edit).edt"Handles"=Handles
dlgSgTool(Add|Edit).edt"Menu Item Name"=Menu Item Name
dlgSgTool(Add|Edit).inf=Define the name of the tool menu item, the command which should be executed and configure its arguments. The used variables define on what selection the tool may be used.
dlgSgTool(Add|Edit).lbl"Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html"=\
 Valid wildcards are ?\u00a0\(one arbitrary character\) and \*\u00a0\(any number of arbitrary characters\). Separate multiple patterns by comma. Example:\u00a0\*.txt,\u00a0\*.html
dlgSgTool(Add|Edit).mni"2nd Commit ID or Ref \(optional\)"=\
 2nd Commit ID or Ref \(optional\)
dlgSgTool(Add|Edit).mni"2nd Commit ID or Ref"=2nd Commit ID or Ref
dlgSgTool(Add|Edit).mni"Commit ID or Ref"=Commit ID or Ref
dlgSgTool(Add|Edit).mni"Configured Text File Encoding"=Configured Text File Encoding
dlgSgTool(Add|Edit).mni"File or Directory Name"=File or Directory Name
dlgSgTool(Add|Edit).mni"File or Directory Path"=File or Directory Path
dlgSgTool(Add|Edit).mni"File or Directory URI"=File or Directory URI
dlgSgTool(Add|Edit).mni"Git Executable"=Git Executable
dlgSgTool(Add|Edit).mni"Git Installation"=Git Installation
dlgSgTool(Add|Edit).mni"Hg Executable"=Hg Executable
dlgSgTool(Add|Edit).mni"Hg Installation"=Hg Installation
dlgSgTool(Add|Edit).mni"Remote \(Push\) URL"=Remote \(Push\) URL
dlgSgTool(Add|Edit).mni"Repository Root Path"=Repository Root Path
dlgSgTool(Add|Edit).mni"Selection File"=Selection File
dlgSgTool(Add|Edit).mni"Show Directory Selection Dialog"=Show Directory Selection Dialog
dlgSgTool(Add|Edit).mni"Show Open File Dialog"=Show Open File Dialog
dlgSgTool(Add|Edit).mni"Show Save File Dialog"=Show Save File Dialog
dlgSgTool(Add|Edit).mni"SmartGit Installation"=SmartGit Installation
dlgSgTool(Add|Edit).rbt"Both"=Both
dlgSgTool(Add|Edit).rbt"Commits"=Commits
dlgSgTool(Add|Edit).rbt"Directories"=Directories
dlgSgTool(Add|Edit).rbt"Files"=Files
dlgSgTool(Add|Edit).rbt"Refs"=Refs
dlgSgUndoLastCommitConfirm.btn"Undo"=Undo
dlgSgUndoLastCommitConfirm.fur"Message: $1"=Message: $1
dlgSgUndoLastCommitConfirm.fur"Undoing an already pushed commit might cause serious problems!\n\nMessage: $1"=\
 Undoing an already pushed commit might cause serious problems!\n\nMessage: $1
dlgSgUndoLastCommitConfirm.hdl=Do you want to undo the last local commit?
dlgSgUndoLastCommitConfirm.tle=Undo Last Commit
dlgSgUnstageNoFilesFound.fur=Could not find files with staged changes.
dlgSgUnstageNoFilesFound.hdl=No files found that could be unstaged.
dlgSgUnstageNoFilesFound.tle=Unstage
dlgSgWelcome.chk"Show this dialog if no repository was opened"=\
 Show this dialog if no repository was opened
dlgSgWelcome.hdl=What do you want to do?
dlgSgWelcome.inf=Select whether to open a new, local repository, clone a \(remote\) repository or open an existing repository.
dlgSgWelcome.rbt"Add an existing local or create a new repository"=\
 Add an existing local or create a new repository
dlgSgWelcome.rbt"Clone existing repository"=Clone existing repository
dlgSgWelcome.rbt"Reopen previously used repository:"=Reopen previously used repository:
dlgSgWelcome.tle=Welcome to SmartGit
dlgSgWorktreeAdd.edt"Branch"=Branch
dlgSgWorktreeAdd.edt"Directory"=Directory
dlgSgWorktreeAdd.hdl=Create another worktree from this repository
dlgSgWorktreeAdd.inf=Select the branch and directory to use for the new worktree.
dlgSgWorktreeAdd.tle=Add Worktree
dlgSgWorktreeAddNoMoreLocalBranches.fur=You only can create worktrees for existing local branches that don't yet have an associated worktree.
dlgSgWorktreeAddNoMoreLocalBranches.hdl=No \(more\) local branches available.
dlgSgWorktreeAddNoMoreLocalBranches.tle=Add Worktree
dlgSgWorktreePruneNoWorktree.fur=All your worktrees are still available.
dlgSgWorktreePruneNoWorktree.hdl=No worktree to prune.
dlgSgWorktreePruneNoWorktree.tle=Prune Obsolete Worktrees
dlgSg(Preferences|Pull|RepositorySettings).rbt"Merge fetched remote changes"=Merge fetched remote changes
dlgSg(Preferences|Pull|RepositorySettings).rbt"Rebase local branch onto fetched changes"=\
 Rebase local branch onto fetched changes
dlgShPushTrackingLocalSvnBranches.btn"Push as New"=Push as New
dlgShPushTrackingLocalSvnBranches.btn"Push onto Existing"=Push onto Existing
dlgShPushTrackingLocalSvnBranches.fur=You are going to push local branches back to the SVN repository. These branches may either be pushed as new branches or onto their existing SVN counterparts \(recommended in most cases\).
dlgShPushTrackingLocalSvnBranches.hdl=Do you want to push local branches as new SVN branches?
dlgShPushTrackingLocalSvnBranches.tle=Push
dlgTxtEditor.fileModified.btn"Keep Content"=Keep Content
dlgTxtEditor.fileModified.btn"Reload"=Reload
dlgTxtEditor.fileModified.fur=Unless you want to see the old file state, it is recommended to reload.
dlgTxtEditor.fileModified.hdl=The file config was changed. Reload it?
dlgTxtEditor.fileModified.tle=Editor
dlg(DgRefMapperGroupConfig|SgPreferences|SgRepositorySettings).edt"Group Patterns"=Group Patterns
dlg(DgRefMapperGroupConfig|SgPreferences|SgRepositorySettings).edt"Single Patterns"=Single Patterns
dlg(DgRefMapperGroupConfig|SgPreferences|SgRepositorySettings).lbl"Tags, branches and other refs matched by this configuration will be grouped in the File Log and show up in the Commit details. It will also be used for grouping the 'Tags'-category of the Branches view."=\
 Tags, branches and other refs matched by this configuration will be grouped in the File Log and show up in the Commit details. It will also be used for grouping the 'Tags'-category of the Branches view.
dlg(DgRefMapperGroupConfig|SgPreferences|SgRepositorySettings).tab"Tag-Grouping"=Tag-Grouping
dlg(ScConflictSolverAdd|ScConflictSolverEdit|ScFileComparatorAdd|ScFileComparatorEdit).err"Please enter a file pattern \(e.g. \*.txt, \*.java\)."=\
 Please enter a file pattern \(e.g. \*.txt, \*.java\).
dlg(ScConflictSolverAdd|ScConflictSolverEdit|ScFileComparatorAdd|ScFileComparatorEdit).err"Select the command which should be invoked."=\
 Select the command which should be invoked.
dlg(ScConflictSolverAdd|ScConflictSolverEdit|ScFileComparatorAdd|ScFileComparatorEdit).err"Specify the necessary arguments for the command, especially the required variable."=\
 Specify the necessary arguments for the command, especially the required variable.
dlg(ScConflictSolverAdd|ScConflictSolverEdit|ScFileComparatorAdd|ScFileComparatorEdit).err"Specify the necessary arguments for the command, especially the required variables."=\
 Specify the necessary arguments for the command, especially the required variables.
dlg(ScConflictSolverAdd|ScConflictSolverEdit|ScFileComparatorAdd|ScFileComparatorEdit).err"The Arguments require the variable \$\{file\}."=\
 The Arguments require the variable \$\{file\}.
dlg(ScConflictSolverAdd|ScConflictSolverEdit|ScFileComparatorAdd|ScFileComparatorEdit).err"The Arguments require the variables \$\{leftFile\} and \$\{rightFile\}."=\
 The Arguments require the variables \$\{leftFile\} and \$\{rightFile\}.
dlg(ScConflictSolverAdd|ScConflictSolverEdit|ScFileComparatorAdd|ScFileComparatorEdit).err"The Arguments require the variables \$\{leftFile\}, \$\{rightFile\} and \$\{mergedFile\}."=\
 The Arguments require the variables \$\{leftFile\}, \$\{rightFile\} and \$\{mergedFile\}.
dlg(ScConflictSolverAdd|ScConflictSolverEdit|ScFileComparatorAdd|ScFileComparatorEdit).lbl"You must use the variable \$\{file\}."=\
 You must use the variable \$\{file\}.
dlg(ScConflictSolverAdd|ScConflictSolverEdit|ScFileComparatorAdd|ScFileComparatorEdit).lbl"You must use the variables \$\{leftFile\} and \$\{rightFile\}."=\
 You must use the variables \$\{leftFile\} and \$\{rightFile\}.
dlg(SgDeleteFileTrash|SgDeleteFilesTrash).btn"Delete"=Delete
dlg(SgDeleteFileTrash|SgDeleteFilesTrash).btn"Move to Trash"=Move to Trash
dlg(SgDeleteFileTrash|SgDeleteFilesTrash).fur=If you click Delete you may require file recovery tools to restore the deleted files!
dlg(SgDeleteFileTrash|SgDeleteFilesTrash).tle=Delete
dlg(SgRepositoryRemoveMultiGroup|SgRepositoryRemoveMultiRepo|SgRepositoryRemoveMultiRepoMultiGroup|SgRepositoryRemoveMultiRepoSingleGroup|SgRepositoryRemoveSingleGroup|SgRepositoryRemoveSingleRepo|SgRepositoryRemoveSingleRepoMultiGroup|SgRepositoryRemoveSingleRepoSingleGroup).btn"Remove"=Remove
dlg(SgRepositoryRemoveMultiGroup|SgRepositoryRemoveMultiRepo|SgRepositoryRemoveMultiRepoMultiGroup|SgRepositoryRemoveMultiRepoSingleGroup|SgRepositoryRemoveSingleGroup|SgRepositoryRemoveSingleRepo|SgRepositoryRemoveSingleRepoMultiGroup|SgRepositoryRemoveSingleRepoSingleGroup).chk=Don't show again
dlg(SgRepositoryRemoveMultiGroup|SgRepositoryRemoveMultiRepo|SgRepositoryRemoveMultiRepoMultiGroup|SgRepositoryRemoveMultiRepoSingleGroup|SgRepositoryRemoveSingleGroup|SgRepositoryRemoveSingleRepo|SgRepositoryRemoveSingleRepoMultiGroup|SgRepositoryRemoveSingleRepoSingleGroup).tle=Remove
edt"Search For"=Search For
ntmCredentialHelper"In case you are encountering strange errors or unexpected dialog popups, try to disable this configuration and let SmartGit handle the authentication itself."=\
 In case you are encountering strange errors or unexpected dialog popups, try to disable this configuration and let SmartGit handle the authentication itself.
ntmCredentialHelper"In general this should be fine and is the recommended configuration when working with multiple Git clients."=\
 In general this should be fine and is the recommended configuration when working with multiple Git clients.
ntmCredentialHelper"SmartGit has detected that <b>credential.helper</b> is configured in config file $1."=\
 SmartGit has detected that <b>credential.helper</b> is configured in config file $1.
ntmCredentialHelper"To disable this configuration, open the above config file, locate the <b>\[credential\]</b>-section and comment out the <b>helper\=</b> line using <b>#</b>"=\
 To disable this configuration, open the above config file, locate the <b>\[credential\]</b>-section and comment out the <b>helper\=</b> line using <b>#</b>
ntmFollowUsOnTwitter"It's a great way to help shaping future versions of SmartGit!"=\
 It's a great way to help shaping future versions of SmartGit!
ntmFollowUsOnTwitter"We are using Twitter to:"=We are using Twitter to:
ntmFollowUsOnTwitter"announce new versions, including previews"=announce new versions, including previews
ntmFollowUsOnTwitter"inform about new features"=inform about new features
ntmFollowUsOnTwitter"poll for opinions on how to implement new or change existing features"=\
 poll for opinions on how to implement new or change existing features
ntmHighMemoryUsage"If you are working with huge repositories, this may be OK. In this case, edit $1, increase the value of the -Xmx option, for example to -Xmx1024m \(or add it if not yet existing\) for better performance."=\
 If you are working with huge repositories, this may be OK. In this case, edit $1, increase the value of the -Xmx option, for example to -Xmx1024m \(or add it if not yet existing\) for better performance.
ntmHighMemoryUsage"If you think that the configured memory limit is already quite high or you are not working with huge repositories, this may indicate a problem. Please let us know about it."=\
 If you think that the configured memory limit is already quite high or you are not working with huge repositories, this may indicate a problem. Please let us know about it.
ntmHighMemoryUsage"SmartGit is close to the configured memory limit."=\
 SmartGit is close to the configured memory limit.
ntmHostingProviderIntegrationNotYetConfigured"SmartGit provides special support for $1. The integration can be configured in the Preferences."=\
 SmartGit provides special support for $1. The integration can be configured in the Preferences.
ntmMarkRepositoriesAsFavorite"Git repositories marked as 'favorites' will be refreshed and fetched automatically in the background."=\
 Git repositories marked as 'favorites' will be refreshed and fetched automatically in the background.
ntmMarkRepositoriesAsFavorite"To mark a repository as 'favorite', right-click on it in the 'Repositories' view and select 'Mark as Favorite'."=\
 To mark a repository as 'favorite', right-click on it in the 'Repositories' view and select 'Mark as Favorite'.
ntmPreferencesChangesRestartRequired"Some preferences options have been changed which will only be applied after restarting SmartGit."=\
 Some preferences options have been changed which will only be applied after restarting SmartGit.
ntmProblematicGcConfiguration"Git's garbage collection is \(by default\) configured to run in background \(gc.autoDetach\) in your .gitconfig. This configuration is appropriate for command line client, but may cause troubles in combinations with GUI clients like SmartGit."=\
 Git's garbage collection is \(by default\) configured to run in background \(gc.autoDetach\) in your .gitconfig. This configuration is appropriate for command line client, but may cause troubles in combinations with GUI clients like SmartGit.
ntmSupportExpired"To extend your support, please purchase an update license and upgrade to the latest SmartGit version."=\
 To extend your support, please purchase an update license and upgrade to the latest SmartGit version.
ntmSupportExpired"You may continue to use SmartGit, just your support period expired."=\
 You may continue to use SmartGit, just your support period expired.
ntmUpdateCheckFetchVersionStart"After the new version has been downloaded successfully, you will be notified again."=\
 After the new version has been downloaded successfully, you will be notified again.
ntmUpdateCheckFetchVersionSuccess"SmartGit needs to be restarted now for the changes to take effect."=\
 SmartGit needs to be restarted now for the changes to take effect.
ntmUpdateCheckFetchVersionSuccess"Your SmartGit installation needs to be upgraded now."=\
 Your SmartGit installation needs to be upgraded now.
ntmVoteForUs"Let us and other users know why you prefer SmartGit over other Git clients or what parts of SmartGit still need work!"=\
 Let us and other users know why you prefer SmartGit over other Git clients or what parts of SmartGit still need work!
ntmVoteForUs"share the pros and cons at <link1>slant.co</link1>"=\
 share the pros and cons at <link1>slant.co</link1>
ntmVoteForUs"vote at <link1>alternativeto.net</link1>"=vote at <link1>alternativeto.net</link1>
nttCredentialHelper"External Credentials Helper detected"=External Credentials Helper detected
nttFollowUsOnTwitter"Follow SmartGit on Twitter!"=Follow SmartGit on Twitter!
nttFollowUsOnTwitter"Follow on Twitter"=Follow on Twitter
nttGeneral"Don't show again"=Don't show again
nttGeneral"Remind me later"=Remind me later
nttHighMemoryUsage"Contact Support"=Contact Support
nttHighMemoryUsage"High memory usage"=High memory usage
nttHostingProviderIntegrationNotYetConfigured"$1-integration is not yet configured."=$1-integration is not yet configured.
nttHostingProviderIntegrationNotYetConfigured"Configure Now"=Configure Now
nttMarkRepositoriesAsFavorite"Mark repositories as 'favorite' for automatic background refresh."=\
 Mark repositories as 'favorite' for automatic background refresh.
nttPreferencesChangesRestartRequired"Exit SmartGit"=Exit SmartGit
nttPreferencesChangesRestartRequired"Restart Required"=Restart Required
nttPreferencesChangesRestartRequired"Restart SmartGit"=Restart SmartGit
nttProblematicGcConfiguration"Disable Background GC"=Disable Background GC
nttProblematicGcConfiguration"Possibly problematic Git GC configuration"=Possibly problematic Git GC configuration
nttSupportExpired"Purchase Update"=Purchase Update
nttSupportExpired"Your support period has expired on $1."=\
 Your support period has expired on $1.
nttUpdateCheckFetchVersionStart"Started downloading version $1 \($2\)."=Started downloading version $1 \($2\).
nttUpdateCheckFetchVersionSuccess"Restart SmartGit"=Restart SmartGit
nttUpdateCheckFetchVersionSuccess"Show Changelog"=Show Changelog
nttUpdateCheckFetchVersionSuccess"Successfully downloaded version $1."=Successfully downloaded version $1.
nttUpdateCheckFetchVersionSuccess"Upgrade SmartGit"=Upgrade SmartGit
nttVoteForUs"What do you like in SmartGit?"=\
 What do you like in SmartGit?
pop"$1 succeeded."=$1 succeeded.
pop"Command $1 has been aborted."=Command $1 has been aborted.
pop"Modify the previous commit and commit."=\
 Modify the previous commit and commit.
pop"No more change."=No more change.
pop"No more changes."=No more changes.
pop"Please review the files to commit."=\
 Please review the files to commit.
pop"Select the branch for which to stop tracking."=\
 Select the branch for which to stop tracking.
pop"Select the remote to fetch from."=\
 Select the remote to fetch from.
pop"Select the remote to rename."=Select the remote to rename.
pop"Select the stash to drop."=Select the stash to drop.
pop"Select the stash to rename."=Select the stash to rename.
pop"There are no obsolete repositories."=There are no obsolete repositories.
pop"There is no action available for this drop operation."=\
 There is no action available for this drop operation.
pop"Unstage unwanted changes for the 1st commit, and commit."=\
 Unstage unwanted changes for the 1st commit, and commit.
ttpClonePartialWarning"<b>Warning!</b>\n\nThis functionality depends on the capabilities of your server.\nOnce the clone has finished, check the Output view for possible warnings."=\
 <b>Warning!</b>\n\nThis functionality depends on the capabilities of your server.\nOnce the clone has finished, check the Output view for possible warnings.
ttpTagGroupingGroupPatterns"Refs will be categorized into groups: when traversing the repository root log, refs will first be assigned to matching groups. Every group will store only the most recently encountered ref, i.e. if a new ref is encountered, it will replace all existing refs in the current group.\n\nNext, the refs remaining in the group will be passed on from child to parent commit. Now, once again they will be assigned to matching groups, possibly replacing other refs or possibly becoming replaced by more recent refs.\n\nPatterns will be matched against the full ref-name, including the <tt>refs</tt>-prefix. For a matching ref, its name will be shortened to the last path-segment \('\\/'\). For example, <tt>refs/tags/build-.\*</tt> will match a tag <tt>refs/tags/build-123</tt> and its name will be shortened to <tt>build-123</tt>. You may add a <i>named regex capturing group</i> called <tt>name</tt> to further customize the name extraction. For example, <tt>refs/tags/build-\(?&lt;name&gt;.\*\)</tt> will match <tt>refs/tags/build-123</tt> and its name will be shortened to <tt>123</tt>.\n\nYou can assign a title to a pattern by prefixing it by <tt>title:</tt>; the title may only contain letters, digits and '_'.\n\nYou can specify multiple groups patterns, separated by comma \(<tt>,</tt>\), which will be processed in the specified order: if you define two groups which both match a set of refs, such refs will be assigned to the first group.\n\nExample: <tt>build:refs/tags/build\(?&lt;name&gt;.\*\),version:refs/tags/\\d+\\.\\d+\\..\*</tt>"=\
 Refs will be categorized into groups: when traversing the repository root log, refs will first be assigned to matching groups. Every group will store only the most recently encountered ref, i.e. if a new ref is encountered, it will replace all existing refs in the current group.\n\nNext, the refs remaining in the group will be passed on from child to parent commit. Now, once again they will be assigned to matching groups, possibly replacing other refs or possibly becoming replaced by more recent refs.\n\nPatterns will be matched against the full ref-name, including the <tt>refs</tt>-prefix. For a matching ref, its name will be shortened to the last path-segment \('\\/'\). For example, <tt>refs/tags/build-.\*</tt> will match a tag <tt>refs/tags/build-123</tt> and its name will be shortened to <tt>build-123</tt>. You may add a <i>named regex capturing group</i> called <tt>name</tt> to further customize the name extraction. For example, <tt>refs/tags/build-\(?&lt;name&gt;.\*\)</tt> will match <tt>refs/tags/build-123</tt> and its name will be shortened to <tt>123</tt>.\n\nYou can assign a title to a pattern by prefixing it by <tt>title:</tt>; the title may only contain letters, digits and '_'.\n\nYou can specify multiple groups patterns, separated by comma \(<tt>,</tt>\), which will be processed in the specified order: if you define two groups which both match a set of refs, such refs will be assigned to the first group.\n\nExample: <tt>build:refs/tags/build\(?&lt;name&gt;.\*\),version:refs/tags/\\d+\\.\\d+\\..\*</tt>
ttpTagGroupingSinglePattern"In addition to the grouping logic, a ref matching the <b>Single Patterns</b> will be assigned to a group on its own. This is a shortcut for enumerating each of these refs as explicit pattern in <b>Group Patterns</b>.\n\nFor example, you want to make sure that each of your release branches is considered as group on its own and thus show up in the log graph or will be treated separately by the 'on-refs' calculation.\n\nExample: <tt>refs\\/remotes\\/origin\\/release-.\\\*</tt>"=\
 In addition to the grouping logic, a ref matching the <b>Single Patterns</b> will be assigned to a group on its own. This is a shortcut for enumerating each of these refs as explicit pattern in <b>Group Patterns</b>.\n\nFor example, you want to make sure that each of your release branches is considered as group on its own and thus show up in the log graph or will be treated separately by the 'on-refs' calculation.\n\nExample: <tt>refs\\/remotes\\/origin\\/release-.\\\*</tt>
wndAnnotate.edt"By"=By
wndAnnotate.edt"Commit"=Commit
wndAnnotate.edt"Highlight"=Highlight
wndAnnotate.edt"View Commit"=View Commit
wndAnnotate.mni"Copy Details"=Copy Details
wndAnnotate.mni"Copy ID"=Copy ID
wndAnnotate.mni"Copy Selection"=Copy Selection
wndAnnotate.mni"Open Log"=Open Log
wndAnnotate.mni"Show Changes"=Show Changes
wndAnnotate.mniCommit-first=Go to First Commit
wndAnnotate.mniCommit-last=Go to Last Commit
wndAnnotate.mniCommit-next=Go to Next Commit
wndAnnotate.mniCommit-preceding-line=Go to Preceding Commit
wndAnnotate.mniCommit-previous=Go to Previous Commit
wndAnnotate.mniCompare=Show Changes
wndAnnotate.mniCustomize=Customize
wndAnnotate.mniEdit-copy=Copy
wndAnnotate.mniFile-close=Close
wndAnnotate.mniGoto-line=Go to Line
wndAnnotate.mniLog=Open Log
wndAnnotate.mniSearch-find=Find
wndAnnotate.mniSearch-next=Find Next
wndAnnotate.mniSearch-previous=Find Previous
wndAnnotate.mniSet-syntax=Syntax Language
wndAnnotate.mniShowChanges=Show Changes
wndAnnotate.mniUndo-goto=Undo Go To
wndAnnotate.mniView-settings=Settings
wndAnnotate.mniWindowHideView=Hide View
wndAnnotate.mniWindowLineHistory=Line History
wndAnnotate.mnu"Edit"=Edit
wndAnnotate.mnu"File"=File
wndAnnotate.mnu"Go To"=Go To
wndAnnotate.mnu"View"=View
wndAnnotate.rbt"Commit Index"=Commit Index
wndAnnotate.rbt"Time"=Time
wndAnnotate.tab"Document"=Document
wndAnnotate.tab"History of current line"=History of current line
wndCompare.mniRefresh=Reload
wndCompare.mniView-layout-left-beside-right=Left Beside Right
wndCompare.mniView-layout-left-over-right=Left Above Right
wndCompare.tbtEdit-take-left=Take the left block to the right. Depending on the left block, this will insert, replace or delete at the right.
wndCompare.tbtEdit-take-right=Take the right block to the left. Depending on the right block, this will insert, replace or delete at the left.
wndCompare.tbtFile-save=Save file modifications.
wndCompare.tbtGoto-next-diff=Go to next change.
wndCompare.tbtGoto-previous-diff=Go to previous change.
wndCompare.tbtRefresh=Reload content from file system and recompare.
wndConflictSolver.mni"Apply Inner-line Difference to Working Tree"=\
 Apply Inner-line Difference to Working Tree
wndConflictSolver.mni"Apply Line to Working Tree"=Apply Line to Working Tree
wndConflictSolver.mni"Apply Selection to Working Tree"=Apply Selection to Working Tree
wndConflictSolver.mniView-layout-all=All
wndConflictSolver.mniView-layout-left-merge=Left and Merge
wndConflictSolver.mniView-layout-left-right-above-merge=Left and Right Above Merge
wndConflictSolver.mniView-layout-right-merge=Merge and Right
wndConflictSolver.tbr"All"=All
wndConflictSolver.tbr"Base + Right"=Base + Right
wndConflictSolver.tbr"Base Below"=Base Below
wndConflictSolver.tbr"Base Changes"=Base Changes
wndConflictSolver.tbr"Left + Base"=Left + Base
wndConflictSolver.tbr"Left + Merge"=Left + Merge
wndConflictSolver.tbr"Merge + Right"=Merge + Right
wndConflictSolver.tbr"Merge Below"=Merge Below
wndConflictSolver.tbr"Next Conflict"=Next Conflict
wndConflictSolver.tbr"Prev. Conflict"=Prev. Conflict
wndConflictSolver.tbr"Take Left, Right"=Take Left, Right
wndConflictSolver.tbr"Take Right, Left"=Take Right, Left
wndConflictSolver.tbtEdit-take-left=Take the left block to the merge result. Depending on the left block, this will insert, replace or delete at the merge result.
wndConflictSolver.tbtEdit-take-left-right=Take the left block, then the right one.
wndConflictSolver.tbtEdit-take-right=Take the right block to the merge result. Depending on the right block, this will insert, replace or delete at the merge result.
wndConflictSolver.tbtEdit-take-right-left=Take the right block, then the left one.
wndConflictSolver.tbtFile-open-base=Open the left and right changes from the common base file.
wndConflictSolver.tbtFile-save=Save file modifications.
wndConflictSolver.tbtGoto-next-conflict=Go to next conflict.
wndConflictSolver.tbtGoto-next-diff=Go to next change.
wndConflictSolver.tbtGoto-previous-conflict=Go to previous conflict.
wndConflictSolver.tbtGoto-previous-diff=Go to previous change.
wndConflictSolver.tbtView-layout-all=Show the left, merge and right file.
wndConflictSolver.tbtView-layout-left-merge=Show the left and merge file.
wndConflictSolver.tbtView-layout-left-right-above-merge=Show the left and right files above the merge file.
wndConflictSolver.tbtView-layout-right-merge=Show the merge and right file.
wndDeepgit.btn"Go Deeper"=Go Deeper
wndDeepgit.col"File"=File
wndDeepgit.col"Modifications"=Modifications
wndDeepgit.ihp"The \*Origin View\*: it highlights the selected origin candidate. By invoking \*Blame \(go deeper\)\* DeepGit will move its /focus/ onto the shown file\\/commit and select the corresponding commit in the \*Navigation\* view."=\
 The \*Origin View\*: it highlights the selected origin candidate. By invoking \*Blame \(go deeper\)\* DeepGit will move its /focus/ onto the shown file\\/commit and select the corresponding commit in the \*Navigation\* view.
wndDeepgit.ihp"This view displays all /origin candidates/ for the selected line from the \*Blame\* view: If the selected line has not been modified\\/added in the \*Blame\* view commit itself, the \*Appeared here\* origin takes you to this commit. Otherwise, the \*Changed in-place\* entry shows the actual change. \*Moved\* entries denote possible moves. The selected origin candidate will be highlighted in the \*Blame\* view as well as the \*Origin\* view. To inspect changes of the origin candidate in greater detail, switch to the \*Origins\* perspective."=\
 This view displays all /origin candidates/ for the selected line from the \*Blame\* view: If the selected line has not been modified\\/added in the \*Blame\* view commit itself, the \*Appeared here\* origin takes you to this commit. Otherwise, the \*Changed in-place\* entry shows the actual change. \*Moved\* entries denote possible moves. The selected origin candidate will be highlighted in the \*Blame\* view as well as the \*Origin\* view. To inspect changes of the origin candidate in greater detail, switch to the \*Origins\* perspective.
wndDeepgit.ihp"This view displays all changes for the selected commit from the \*Navigation\* view. The selected file will be compared in the below view."=\
 This view displays all changes for the selected commit from the \*Navigation\* view. The selected file will be compared in the below view.
wndDeepgit.ihp"This view displays all files which have changed as part of the selected \*Blame\* line's commit. The selected file will be compared in the below view."=\
 This view displays all files which have changed as part of the selected \*Blame\* line's commit. The selected file will be compared in the below view.
wndDeepgit.ihp"This view shows how the selected line from the \*Blame\* view has changed in the past."=\
 This view shows how the selected line from the \*Blame\* view has changed in the past.
wndDeepgit.ihp"This view shows the Log for the investigated file and for all previous files you have navigated to. For the selected commit, more details will be displayed which depend on the current perspective: \n# in the \*Blame\* perspective the file's content will be displayed in the \*Blame\* view, \n# in the \*Diff\* perspective the file's modifications will be displayed, \n# in the \*Log\* perspective a summary of all modified files will be displayed in the \*Files\* view."=\
 This view shows the Log for the investigated file and for all previous files you have navigated to. For the selected commit, more details will be displayed which depend on the current perspective: \n# in the \*Blame\* perspective the file's content will be displayed in the \*Blame\* view, \n# in the \*Diff\* perspective the file's modifications will be displayed, \n# in the \*Log\* perspective a summary of all modified files will be displayed in the \*Files\* view.
wndDeepgit.ihp"This view shows the blame for the selected file\\/commit from the \*Navigation\* tree. When selecting a line DeepGit will start searching for the origin of this line and show results in the \*Origin Candidates\* view \(only available in the \*Blame+Origins\* perspective\). The best origin candidate will be selected and highlighted. DeepGit will follow across line moves and file renames and taking into account the line's vicinity, so origin candidates will usually be blocks, not just single lines."=\
 This view shows the blame for the selected file\\/commit from the \*Navigation\* tree. When selecting a line DeepGit will start searching for the origin of this line and show results in the \*Origin Candidates\* view \(only available in the \*Blame+Origins\* perspective\). The best origin candidate will be selected and highlighted. DeepGit will follow across line moves and file renames and taking into account the line's vicinity, so origin candidates will usually be blocks, not just single lines.
wndDeepgit.ihp"This view shows the diff for the selected file from the above \*Files\* view."=\
 This view shows the diff for the selected file from the above \*Files\* view.
wndDeepgit.ihp"This view shows the diff for the selected origin candidate\\/file from the above \*Origin Candidates\*\\/\*Files\* view."=\
 This view shows the diff for the selected origin candidate\\/file from the above \*Origin Candidates\*\\/\*Files\* view.
wndDeepgit.lbl"Similarity detection was only performed for single lines, some results may be omitted \(View\|Extend Lines to Blocks\)"=\
 Similarity detection was only performed for single lines, some results may be omitted \(View\|Extend Lines to Blocks\)
wndDeepgit.lblBlameHeader"Blame \(in progress...\)"=Blame \(in progress...\)
wndDeepgit.lblBlameHeader"Blame \(in progress\u2026\)"=Blame \(in progress\u2026\)
wndDeepgit.lblBlameHeader"Blame for"=Blame for
wndDeepgit.lblBlameMatchPopup"Appeared here"=Appeared here
wndDeepgit.lblBlameMatchPopup"Changed in-place"=Changed in-place
wndDeepgit.lblBlameMatchPopup"Lines first appeared at this position"=\
 Lines first appeared at this position
wndDeepgit.lblBlameMatchPopup"Lines have possibly been changed in-place"=\
 Lines have possibly been changed in-place
wndDeepgit.lblBlameMatchPopup"Lines have possibly been moved over from somewhere else"=\
 Lines have possibly been moved over from somewhere else
wndDeepgit.lblBlameMatchPopup"Moved"=Moved
wndDeepgit.lblBlameMatchPopup"other possible origins"=other possible origins
wndDeepgit.lblBlameMatchPopup"single origin, high likelihood"=single origin, high likelihood
wndDeepgit.lblCompareHeader"New contents"=New contents
wndDeepgit.lblCompareHeader"Old contents"=Old contents
wndDeepgit.lblOriginCandidate"Appeared here"=Appeared here
wndDeepgit.lblOriginCandidate"Changed in-place"=Changed in-place
wndDeepgit.lblOriginCandidate"Line has been introduced in this commit"=\
 Line has been introduced in this commit
wndDeepgit.lblOriginCandidate"Lines have been added"=Lines have been added
wndDeepgit.lblOriginCandidate"Lines have been introduced in this commit"=\
 Lines have been introduced in this commit
wndDeepgit.lblOriginCandidate"Lines have been modified"=Lines have been modified
wndDeepgit.lblOriginCandidate"Moved"=Moved
wndDeepgit.lblOriginCandidate"Origins from '$1' omitted: file is binary"=\
 Origins from '$1' omitted: file is binary
wndDeepgit.lblOriginCandidate"Similarity detection was only performed for single lines, some results may be omitted \(View\|Extend Lines to Blocks\)"=\
 Similarity detection was only performed for single lines, some results may be omitted \(View\|Extend Lines to Blocks\)
wndDeepgit.lblOriginCandidate"as 'git diff' sees it"=as 'git diff' sees it
wndDeepgit.lblOriginCandidate"for the first time"=for the first time
wndDeepgit.lblOriginCandidate"from $1 previous line"=from $1 previous line
wndDeepgit.lblOriginCandidate"from $1 previous lines"=from $1 previous lines
wndDeepgit.lblOriginCandidate"of"=of
wndDeepgit.lblOriginCandidate"over from somewhere else"=over from somewhere else
wndDeepgit.lblOriginCandidate"similarity for $1 origin line"=similarity for $1 origin line
wndDeepgit.lblOriginCandidate"similarity for $1 origin lines"=similarity for $1 origin lines
wndDeepgit.lblOriginHeader"No file to compare"=No file to compare
wndDeepgit.lblOriginHeader"Possibly modified \(or added\) as part of <b>surrounding block</b> in old contents"=\
 Possibly modified \(or added\) as part of <b>surrounding block</b> in old contents
wndDeepgit.lblOriginHeader"Possibly moved from <b>similar lines</b> from old contents"=\
 Possibly moved from <b>similar lines</b> from old contents
wndDeepgit.lblOriginHeader"Possibly originates from <b>in-place change</b> since old contents"=\
 Possibly originates from <b>in-place change</b> since old contents
wndDeepgit.lblTextHeader"Commit"=Commit
wndDeepgit.lblTextHeader"File"=File
wndDeepgit.lblTextHeader"Msg"=Msg
wndDeepgit.lblTextHeader"at"=at
wndDeepgit.lblTextHeader"by"=by
wndDeepgit.lblTextHeader"on"=on
wndDeepgit.mni"Copy Details"=Copy Details
wndDeepgit.mni"Copy ID"=Copy ID
wndDeepgit.mni"Copy Selection in Column"=Copy Selection in Column
wndDeepgit.mni"Copy Selection"=Copy Selection
wndDeepgit.mni"Copy"=Copy
wndDeepgit.mni"File"=File
wndDeepgit.mni"Modifications"=Modifications
wndDeepgit.mni"Open File Log"=Open File Log
wndDeepgit.mni"Open Repository Log"=Open Repository Log
wndDeepgit.mniAbout=About DeepGit
wndDeepgit.mniBack=Go Back
wndDeepgit.mniConfigureRefGroups=Tag-Grouping
wndDeepgit.mniEdit-copy=Copy
wndDeepgit.mniExtendLineToBlock=Extend Lines To Blocks
wndDeepgit.mniFile-close=Close
wndDeepgit.mniFilterAddSelection=Add Selection to Filter
wndDeepgit.mniFilterReset=Reset Filter
wndDeepgit.mniFilterSetSelection=Set Selection as Filter
wndDeepgit.mniFollowRenames=Follow Renames
wndDeepgit.mniForward=Go Forward
wndDeepgit.mniGoto-line=Go to Line
wndDeepgit.mniGoto-next-diff=Next Change
wndDeepgit.mniGoto-previous-diff=Previous Change
wndDeepgit.mniHighlightBlameChanges=Highlight Changes of Current Blame Commit
wndDeepgit.mniHighlightOriginChanges=Highlight Changes of Current Origin Commit
wndDeepgit.mniIgnoreWhitespaceOnlyChanges=Ignore Whitespace Changes
wndDeepgit.mniLicenseAgreement=License Agreement
wndDeepgit.mniNextChange=Next Change
wndDeepgit.mniOpenFileLog=Open File Log
wndDeepgit.mniOpenRepositoryLog=Open Repository Log
wndDeepgit.mniOptimizeCreationOrigins=Optimize 'Appeared Here' Origins
wndDeepgit.mniPerspectiveBlameOrigin=Blame+Origins Perspective
wndDeepgit.mniPerspectiveBlameSimple=Blame Perspective
wndDeepgit.mniPerspectiveCommit=Log Perspective
wndDeepgit.mniPerspectiveHistory=Diff Perspective
wndDeepgit.mniPerspectiveOrigins=Origins Perspective
wndDeepgit.mniPreviousChange=Previous Change
wndDeepgit.mniResetInlineHelp=Reshow All Inline Help
wndDeepgit.mniSearch-find=Find
wndDeepgit.mniSearch-next=Find Next
wndDeepgit.mniSearch-previous=Find Previous
wndDeepgit.mniSetEncoding=Encoding
wndDeepgit.mniShowAtRefs=Show At Refs
wndDeepgit.mniShowLinePrefixes=Show Line Prefixes
wndDeepgit.mniShowOnRefs=Show On Refs
wndDeepgit.mniToggleLineHistory=Line History
wndDeepgit.mniViewToolbar=Show Toolbar
wndDeepgit.mniWindowHorizontalLayout=Horizontal Blame + Origins Layout
wndDeepgit.mniWindowVerticalLayout=Vertical Blame + Origins Layout
wndDeepgit.mnu"Edit"=Edit
wndDeepgit.mnu"File"=File
wndDeepgit.mnu"Go To"=Go To
wndDeepgit.mnu"Help"=Help
wndDeepgit.mnu"View"=View
wndDeepgit.tab"Files \(in progress\)"=Files \(in progress\)
wndDeepgit.tab"Files changed in commit $1"=Files changed in commit $1
wndDeepgit.tab"Files"=Files
wndDeepgit.tab"Navigation \(initializing...\)"=Navigation \(initializing...\)
wndDeepgit.tab"Navigation"=Navigation
wndDeepgit.tab"Origin Candidates \($1 hunks processed...\)"=Origin Candidates \($1 hunks processed...\)
wndDeepgit.tab"Origin Candidates \(in progress\)"=Origin Candidates \(in progress\)
wndDeepgit.tab"Origin Candidates for line $1 of commit $2"=\
 Origin Candidates for line $1 of commit $2
wndDeepgit.tab"Origin Candidates"=Origin Candidates
wndDeepgit.tbr"Back"=Back
wndDeepgit.tbr"Blame"=Blame
wndDeepgit.tbr"Blame+Origins"=Blame+Origins
wndDeepgit.tbr"Diff"=Diff
wndDeepgit.tbr"Forward"=Forward
wndDeepgit.tbr"Log"=Log
wndDeepgit.tbr"Origins"=Origins
wndDeepgit.tbt"Go to next change."=Go to next change.
wndDeepgit.tbt"Go to previous change."=Go to previous change.
wndDeepgit.tbtBack=Go back to previous blame...
wndDeepgit.tbtForward=Go forward to next blame...
wndDeepgit.tbtPerspectiveBlameOrigin=Find where the line originates from in cases where you need to choose from one of possible Origins.
wndDeepgit.tbtPerspectiveBlameSimple=Find where the line originates from in simple cases when there are no alternative Origins.
wndDeepgit.tbtPerspectiveCommit=Investigate Log.
wndDeepgit.tbtPerspectiveHistory=Investigate Diff between file's revisions.
wndDeepgit.tbtPerspectiveOrigins=Find out what else happened where the line originates from.\n\nIn order to inspect available Origins, they have to be evaluated first. First, select the file you want to investigate using File\|Open and select a line in it. Then wait until the calculation of possible Origins has finished.
wndEditor.mni"CR \(classic macOS\)"=CR \(classic macOS\)
wndEditor.mni"CR+LF \(Windows\)"=CR+LF \(Windows\)
wndEditor.mni"LF \(Unix, macOS\)"=LF \(Unix, macOS\)
wndEditor.mniEdit-undo=Undo
wndEditor.mniEofEnforceLineEnding=Enforce Line Ending on End of File
wndEditor.mniReplaceTabsWithSpaces=Replace Tabs With Spaces
wndEditor.mniView-remember-as-default=Remember as Default
wndEditor.mniView-settings=Settings
wndEditor.tbtFile-save=Save file modifications.
wndGit.indexEditor.mni"Discard Inner-line Change"=Discard Inner-line Change
wndGit.indexEditor.mni"Discard Line"=Discard Line
wndGit.indexEditor.mni"Discard Selection"=Discard Selection
wndGit.indexEditor.mni"Stage Inner-line Change"=Stage Inner-line Change
wndGit.indexEditor.mni"Stage Line"=Stage Line
wndGit.indexEditor.mni"Stage Selection"=Stage Selection
wndGit.indexEditor.mni"Unstage Inner-line Change"=Unstage Inner-line Change
wndGit.indexEditor.mni"Unstage Line"=Unstage Line
wndGit.indexEditor.mni"Unstage Selection"=Unstage Selection
wndGit.indexEditor.mniView-layout-all=All
wndGit.indexEditor.mniView-layout-head-index=HEAD and Index
wndGit.indexEditor.mniView-layout-head-index-wt=All
wndGit.indexEditor.mniView-layout-head-wt-above-index=HEAD and Working Tree Above Index
wndGit.indexEditor.mniView-layout-index-wt=Index and Working Tree
wndGit.indexEditor.mniView-layout-left-merge=HEAD and Index
wndGit.indexEditor.mniView-layout-left-right-above-merge=HEAD and Working Tree Above Index
wndGit.indexEditor.mniView-layout-right-merge=Index and Working Tree
wndGit.indexEditor.tbtEdit-take-left=Take the left block to the merge result. Depending on the left block, this will insert, replace or delete at the merge result.
wndGit.indexEditor.tbtEdit-take-right=Take the right block to the merge result. Depending on the right block, this will insert, replace or delete at the merge result.
wndGit.indexEditor.tbtFile-save=Save file modifications.
wndGit.indexEditor.tbtGoto-next-diff=Go to next change.
wndGit.indexEditor.tbtGoto-previous-diff=Go to previous change.
wndLog.col"LFS"=LFS
wndLog.hnt"Filter"=Filter
wndLog.lbl"$1 files hidden"=$1 files hidden
wndLog.lblStatusBarMessage"Please wait \u2026"=Please wait \u2026
wndLog.mni"Cherry-Pick $1 to '$2'"=Cherry-Pick $1 to '$2'
wndLog.mni"Committer Abbreviated"=Committer Abbreviated
wndLog.mni"Committer Avatar"=Committer Avatar
wndLog.mni"Committer with Full Name and Email"=\
 Committer with Full Name and Email
wndLog.mni"Committer with Full Name"=Committer with Full Name
wndLog.mni"Copy Branch"=Copy Branch
wndLog.mni"Copy Email Address"=Copy Email Address
wndLog.mni"Modification"=Modification
wndLog.mni"Select Branch"=Select Branch
wndLog.mni"Select Commit"=Select Commit
wndLog.mni"Send Mail"=Send Mail
wndLog.mni"Unstage Hunk"=Unstage Hunk
wndLog.mni"Unstage Innerline Change"=Unstage Innerline Change
wndLog.mni"Unstage Line"=Unstage Line
wndLog.mni"Unstage Selection"=Unstage Selection
wndLog.tab"Graph \(Loading\u2026\)"=Graph \(Loading\u2026\)
wndLog.tbt"If selected and Index as well as Working Tree changes are available, show them separately."=\
 If selected and Index as well as Working Tree changes are available, show them separately.
wndLog.tbt"Reading incoming pull requests from '$1'."=\
 Reading incoming pull requests from '$1'.
wndLog.tbt"Refresh information from Bitbucket."=Refresh information from Bitbucket.
wndProject.lbl"$1 files hidden"=$1 files hidden
wndProject.mni"Log Selection"=Log Selection
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std|).lblStatusBarMessage"Ready"=Ready
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std|).mniWindow-fullScreen=Full Screen
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std|).mniWindow-maximizeMaximize=Maximize
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std|).mniWindow-maximizeRestore=Restore
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std|).mniWindow-minimize=Minimize
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std|).mniWindowMaximizeRestore"Maximize View"=Maximize View
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std|).mniWindowMaximizeRestore"Restore Maximized View"=Restore Maximized View
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std|).mnu"< No Windows >"=< No Windows >
wnd(Annotate|Compare|ConflictSolver|Deepgit|Git.indexEditor|Editor|Log|Project|Std|).mnu"Window"=Window
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-take-left=Take Left Block
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-take-left-right=Take Left, then Right Block
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-take-right=Take Right Block
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-take-right-left=Take Right, then Left Block
wnd(Compare|ConflictSolver|Git.indexEditor).mniEdit-undo=Undo
wnd(Compare|ConflictSolver|Git.indexEditor).mniFile-export-html=Export as HTML-File
wnd(Compare|ConflictSolver|Git.indexEditor).mniFile-open-base=Open Base File Changes
wnd(Compare|ConflictSolver|Git.indexEditor).mniGoto-next-conflict=Next Conflict
wnd(Compare|ConflictSolver|Git.indexEditor).mniGoto-next-diff=Next Change
wnd(Compare|ConflictSolver|Git.indexEditor).mniGoto-previous-conflict=Previous Conflict
wnd(Compare|ConflictSolver|Git.indexEditor).mniGoto-previous-diff=Previous Change
wnd(Compare|ConflictSolver|Git.indexEditor).mniShow-line-numbers=Show Line Numbers
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-ignore-whitespaces-all=Ignore All Whitespaces for Line Comparison
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-ignore-whitespaces-leading-trailing=Ignore Leading/Trailing Whitespaces for Line Comparison
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-ignore-whitespaces-none=Ignore No Whitespace for Line Comparison
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-refresh=Reload
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-remember-as-default=Remember as Default
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-settings=Settings
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-show-current-line-control=Show Long Current Lines
wnd(Compare|ConflictSolver|Git.indexEditor).mniView-synchronize-scrolling=Synchronize Scrolling
wnd(Compare|ConflictSolver|Git.indexEditor).tbr"Next Change"=Next Change
wnd(Compare|ConflictSolver|Git.indexEditor).tbr"Prev. Change"=Prev. Change
wnd(Compare|ConflictSolver|Git.indexEditor).tbr"Reload"=Reload
wnd(Compare|ConflictSolver|Git.indexEditor).tbr"Take Left"=Take Left
wnd(Compare|ConflictSolver|Git.indexEditor).tbr"Take Right"=Take Right
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mni"Copy Selection"=Copy Selection
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniCustomize=Customize
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniEdit-copy=Copy
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniEdit-cut=Cut
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniEdit-ignore-case-changes=Ignore Case Change for Line Comparison
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniEdit-paste=Paste
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniEdit-redo=Redo
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniFile-close=Close
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniFile-save=Save
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniGoto-line=Go to Line
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniSearch-find=Find
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniSearch-next=Find Next
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniSearch-previous=Find Previous
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniSearch-replace=Find and Replace
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mniSet-syntax=Syntax Language
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mnu"Edit"=Edit
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mnu"File"=File
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mnu"Go To"=Go To
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).mnu"View"=View
wnd(Compare|ConflictSolver|Git.indexEditor|Editor).tbr"Save"=Save
wnd(Log|Project).tab"Changes \(EOL: Windows\)"=Changes \(EOL: Windows\)
wnd(Log|Project).tab"Changes of $1 - Index vs. Working Tree \(EOL: Unix\)"=\
 Changes of $1 - Index vs. Working Tree \(EOL: Unix\)
wnd(Log|Project).tab"Changes of $1 \(Added\)"=Changes of $1 \(Added\)
wnd(Log|Project).tab"Changes of $1 \(Modified\)"=Changes of $1 \(Modified\)
wnd(Log|Project|Std|)."Abort"=Abort
wnd(Log|Project|Std|)."Commit"=Commit
wnd(Log|Project|Std|)."Conflict Solver"=Conflict Solver
wnd(Log|Project|Std|)."Continue"=Continue
wnd(Log|Project|Std|)."Mark HEAD as Bad"=Mark HEAD as Bad
wnd(Log|Project|Std|)."Mark HEAD as Good"=Mark HEAD as Good
wnd(Log|Project|Std|)."Mark Resolved"=Mark Resolved
wnd(Log|Project|Std|)."Recreate Conflict"=Recreate Conflict
wnd(Log|Project|Std|)."Rerun Thoroughly"=Rerun Thoroughly
wnd(Log|Project|Std|)."Reset"=Reset
wnd(Log|Project|Std|)."Reveal"=Reveal
wnd(Log|Project|Std|)."Show Local Changes"=Show Local Changes
wnd(Log|Project|Std|)."Step"=Step
wnd(Log|Project|Std|)."Swap"=Swap
wnd(Log|Project|Std|)."Take Ours"=Take Ours
wnd(Log|Project|Std|)."Take Theirs"=Take Theirs
wnd(Log|Project|Std|).btn"Abort"=Abort
wnd(Log|Project|Std|).btn"Commit"=Commit
wnd(Log|Project|Std|).btn"Conflict Solver"=Conflict Solver
wnd(Log|Project|Std|).btn"Continue"=Continue
wnd(Log|Project|Std|).btn"Mark HEAD as Bad"=Mark HEAD as Bad
wnd(Log|Project|Std|).btn"Mark HEAD as Good"=Mark HEAD as Good
wnd(Log|Project|Std|).btn"Mark Resolved"=Mark Resolved
wnd(Log|Project|Std|).btn"Recreate Conflict"=Recreate Conflict
wnd(Log|Project|Std|).btn"Rerun Thoroughly"=Rerun Thoroughly
wnd(Log|Project|Std|).btn"Reset"=Reset
wnd(Log|Project|Std|).btn"Reveal"=Reveal
wnd(Log|Project|Std|).btn"Show Local Changes"=Show Local Changes
wnd(Log|Project|Std|).btn"Stage"=Stage
wnd(Log|Project|Std|).btn"Step"=Step
wnd(Log|Project|Std|).btn"Swap"=Swap
wnd(Log|Project|Std|).btn"Take Ours"=Take Ours
wnd(Log|Project|Std|).btn"Take Theirs"=Take Theirs
wnd(Log|Project|Std|).chk"Add 'Signed-off-by' signature"=Add 'Signed-off-by' signature
wnd(Log|Project|Std|).chk"Amend last commit instead of creating new one"=\
 Amend last commit instead of creating new one
wnd(Log|Project|Std|).chk"Amend last commit"=Amend last commit
wnd(Log|Project|Std|).chk"Bypass commit hook"=Bypass commit hook
wnd(Log|Project|Std|).chk"Create simple commit \('squash'\)"=Create simple commit \('squash'\)
wnd(Log|Project|Std|).chk"Push"=Push
wnd(Log|Project|Std|).col"Assignee"=Assignee
wnd(Log|Project|Std|).col"Author"=Author
wnd(Log|Project|Std|).col"Branch"=Branch
wnd(Log|Project|Std|).col"Copied From"=Copied From
wnd(Log|Project|Std|).col"Copied from"=Copied from
wnd(Log|Project|Std|).col"Date"=Date
wnd(Log|Project|Std|).col"Entry"=Entry
wnd(Log|Project|Std|).col"Ext."=Ext.
wnd(Log|Project|Std|).col"Index State"=Index State
wnd(Log|Project|Std|).col"Last Changed On"=Last Changed On
wnd(Log|Project|Std|).col"Modification"=Modification
wnd(Log|Project|Std|).col"Name"=Name
wnd(Log|Project|Std|).col"Path"=Path
wnd(Log|Project|Std|).col"Relative Directory"=Relative Directory
wnd(Log|Project|Std|).col"Relative Path"=Relative Path
wnd(Log|Project|Std|).col"Renamed Path"=Renamed Path
wnd(Log|Project|Std|).col"Size"=Size
wnd(Log|Project|Std|).col"State"=State
wnd(Log|Project|Std|).col"Submodule"=Submodule
wnd(Log|Project|Std|).col"Text"=Text
wnd(Log|Project|Std|).col"Working Tree State"=Working Tree State
wnd(Log|Project|Std|).edt"Commit to"=Commit to
wnd(Log|Project|Std|).hnt"File Filter"=File Filter
wnd(Log|Project|Std|).hnt"Filter or Tag Search"=Filter or Tag Search
wnd(Log|Project|Std|).lbl"$1 files hidden"=$1 files hidden
wnd(Log|Project|Std|).lbl"Directories"=Directories
wnd(Log|Project|Std|).lbl"Directory"=Directory
wnd(Log|Project|Std|).lbl"File"=File
wnd(Log|Project|Std|).lbl"Files"=Files
wnd(Log|Project|Std|).lblStatusBarMessage"$1"=$1
wnd(Log|Project|Std|).mni"  Show Rewritten Behind Commits"=\
 Show Rewritten Behind Commits
wnd(Log|Project|Std|).mni"<no entry>"=<no entry>
wnd(Log|Project|Std|).mni"<none>"=<none>
wnd(Log|Project|Std|).mni"Abbreviated"=Abbreviated
wnd(Log|Project|Std|).mni"Add GitHub Comment"=Add GitHub Comment
wnd(Log|Project|Std|).mni"Add GitLab Comment"=Add GitLab Comment
wnd(Log|Project|Std|).mni"Add Review Comment"=Add Review Comment
wnd(Log|Project|Std|).mni"All"=All
wnd(Log|Project|Std|).mni"Apply Patch"=Apply Patch
wnd(Log|Project|Std|).mni"Assign"=Assign
wnd(Log|Project|Std|).mni"Assignee"=Assignee
wnd(Log|Project|Std|).mni"Author Abbreviated"=Author Abbreviated
wnd(Log|Project|Std|).mni"Author Avatar"=Author Avatar
wnd(Log|Project|Std|).mni"Author with Full Name and Email"=\
 Author with Full Name and Email
wnd(Log|Project|Std|).mni"Author with Full Name"=Author with Full Name
wnd(Log|Project|Std|).mni"Author"=Author
wnd(Log|Project|Std|).mni"Branch Coloring"=Branch Coloring
wnd(Log|Project|Std|).mni"Branches and Tags"=Branches and Tags
wnd(Log|Project|Std|).mni"Branching:"=Branching:
wnd(Log|Project|Std|).mni"Cancel"=Cancel
wnd(Log|Project|Std|).mni"Check Out"=Check Out
wnd(Log|Project|Std|).mni"Checkout"=Checkout
wnd(Log|Project|Std|).mni"Cherry-Pick Commits to $1"=Cherry-Pick Commits to $1
wnd(Log|Project|Std|).mni"Clear History"=Clear History
wnd(Log|Project|Std|).mni"Close"=Close
wnd(Log|Project|Std|).mni"Coloring:"=Coloring:
wnd(Log|Project|Std|).mni"Columns"=Columns
wnd(Log|Project|Std|).mni"Columns:"=Columns:
wnd(Log|Project|Std|).mni"Comment $1"=Comment $1
wnd(Log|Project|Std|).mni"Commit"=Commit
wnd(Log|Project|Std|).mni"Committer"=Committer
wnd(Log|Project|Std|).mni"Compact Author"=Compact Author
wnd(Log|Project|Std|).mni"Copy Full ID"=Copy Full ID
wnd(Log|Project|Std|).mni"Copy ID"=Copy ID
wnd(Log|Project|Std|).mni"Copy Name"=Copy Name
wnd(Log|Project|Std|).mni"Copy Selection in Column"=Copy Selection in Column
wnd(Log|Project|Std|).mni"Copy Selection"=Copy Selection
wnd(Log|Project|Std|).mni"Copy URL"=Copy URL
wnd(Log|Project|Std|).mni"Copy"=Copy
wnd(Log|Project|Std|).mni"Create Merge Request"=Create Merge Request
wnd(Log|Project|Std|).mni"Create Pull Request"=Create Pull Request
wnd(Log|Project|Std|).mni"Cut"=Cut
wnd(Log|Project|Std|).mni"Date"=Date
wnd(Log|Project|Std|).mni"Default Coloring"=Default Coloring
wnd(Log|Project|Std|).mni"Delete 'Comment $1'"=Delete 'Comment $1'
wnd(Log|Project|Std|).mni"Delete"=Delete
wnd(Log|Project|Std|).mni"Diff Tool"=Diff Tool
wnd(Log|Project|Std|).mni"Discard Hunk"=Discard Hunk
wnd(Log|Project|Std|).mni"Discard Inner-line Change"=Discard Inner-line Change
wnd(Log|Project|Std|).mni"Discard Line"=Discard Line
wnd(Log|Project|Std|).mni"Discard Selection"=Discard Selection
wnd(Log|Project|Std|).mni"Drop Local Data"=Drop Local Data
wnd(Log|Project|Std|).mni"Edit 'Comment $1'"=Edit 'Comment $1'
wnd(Log|Project|Std|).mni"Edit in Index Editor"=Edit in Index Editor
wnd(Log|Project|Std|).mni"Edit"=Edit
wnd(Log|Project|Std|).mni"Ext."=Ext.
wnd(Log|Project|Std|).mni"Fast-Forward Merge"=Fast-Forward Merge
wnd(Log|Project|Std|).mni"Fetch Merge Request"=Fetch Merge Request
wnd(Log|Project|Std|).mni"Fetch Pull Request"=Fetch Pull Request
wnd(Log|Project|Std|).mni"File Content \(very expensive\)"=File Content \(very expensive\)
wnd(Log|Project|Std|).mni"File \(expensive\)"=File \(expensive\)
wnd(Log|Project|Std|).mni"Files from Subdirectories"=Files from Subdirectories
wnd(Log|Project|Std|).mni"Follow All Parents"=Follow All Parents
wnd(Log|Project|Std|).mni"Follow Only First Parent"=Follow Only First Parent
wnd(Log|Project|Std|).mni"Forget Pattern"=Forget Pattern
wnd(Log|Project|Std|).mni"Forget"=Forget
wnd(Log|Project|Std|).mni"Format Patch"=Format Patch
wnd(Log|Project|Std|).mni"Full Author With Email"=Full Author With Email
wnd(Log|Project|Std|).mni"Full Author"=Full Author
wnd(Log|Project|Std|).mni"Full Name With Email"=Full Name With Email
wnd(Log|Project|Std|).mni"Full Name"=Full Name
wnd(Log|Project|Std|).mni"Git Config"=Git Config
wnd(Log|Project|Std|).mni"Git-LFS Version"=Git-LFS Version
wnd(Log|Project|Std|).mni"ID"=ID
wnd(Log|Project|Std|).mni"Include Merge Only if File was Changed"=\
 Include Merge Only if File was Changed
wnd(Log|Project|Std|).mni"Integrate"=Integrate
wnd(Log|Project|Std|).mni"Jump To"=Jump To
wnd(Log|Project|Std|).mni"LFS"=LFS
wnd(Log|Project|Std|).mni"Last Changed On"=Last Changed On
wnd(Log|Project|Std|).mni"Mark as Bad"=Mark as Bad
wnd(Log|Project|Std|).mni"Mark as Good"=Mark as Good
wnd(Log|Project|Std|).mni"Merge '$1'"=Merge '$1'
wnd(Log|Project|Std|).mni"Merge Directly To"=Merge Directly To
wnd(Log|Project|Std|).mni"Merge Merge Request"=Merge Merge Request
wnd(Log|Project|Std|).mni"Merge Pull Request"=Merge Pull Request
wnd(Log|Project|Std|).mni"Merge"=Merge
wnd(Log|Project|Std|).mni"Message"=Message
wnd(Log|Project|Std|).mni"More options"=More options
wnd(Log|Project|Std|).mni"Move Commit"=Move Commit
wnd(Log|Project|Std|).mni"Move To"=Move To
wnd(Log|Project|Std|).mni"Move and Squash Commit"=Move and Squash Commit
wnd(Log|Project|Std|).mni"Name"=Name
wnd(Log|Project|Std|).mni"Neither"=Neither
wnd(Log|Project|Std|).mni"New Group"=New Group
wnd(Log|Project|Std|).mni"No Group"=No Group
wnd(Log|Project|Std|).mni"Only If Changed"=Only If Changed
wnd(Log|Project|Std|).mni"Only Selected"=Only Selected
wnd(Log|Project|Std|).mni"Open in Browser"=Open in Browser
wnd(Log|Project|Std|).mni"Open in Web Browser"=Open in Web Browser
wnd(Log|Project|Std|).mni"Other Branch"=Other Branch
wnd(Log|Project|Std|).mni"Paste"=Paste
wnd(Log|Project|Std|).mni"Path"=Path
wnd(Log|Project|Std|).mni"Please select Index or Working Tree."=\
 Please select Index or Working Tree.
wnd(Log|Project|Std|).mni"Print Git Version"=Print Git Version
wnd(Log|Project|Std|).mni"Pull, then Push"=Pull, then Push
wnd(Log|Project|Std|).mni"Push To"=Push To
wnd(Log|Project|Std|).mni"Push"=Push
wnd(Log|Project|Std|).mni"Push, then Pull"=Push, then Pull
wnd(Log|Project|Std|).mni"Quick Stash All"=Quick Stash All
wnd(Log|Project|Std|).mni"Quick Stash Selection"=Quick Stash Selection
wnd(Log|Project|Std|).mni"Rebase $1 commit from $2 to $3"=\
 Rebase $1 commit from $2 to $3
wnd(Log|Project|Std|).mni"Rebase $1 commits from $2 to $3"=\
 Rebase $1 commits from $2 to $3
wnd(Log|Project|Std|).mni"Rebase HEAD to '$1'"=Rebase HEAD to '$1'
wnd(Log|Project|Std|).mni"Regular Expressions"=Regular Expressions
wnd(Log|Project|Std|).mni"Reject Pull Request"=Reject Pull Request
wnd(Log|Project|Std|).mni"Relative Directory"=Relative Directory
wnd(Log|Project|Std|).mni"Relative Path"=Relative Path
wnd(Log|Project|Std|).mni"Remember Pattern"=Remember Pattern
wnd(Log|Project|Std|).mni"Rename"=Rename
wnd(Log|Project|Std|).mni"Renamed Path"=Renamed Path
wnd(Log|Project|Std|).mni"Reorder Commits"=Reorder Commits
wnd(Log|Project|Std|).mni"Reply '$1'"=Reply '$1'
wnd(Log|Project|Std|).mni"Reply"=Reply
wnd(Log|Project|Std|).mni"Reset HEAD to $1"=Reset HEAD to $1
wnd(Log|Project|Std|).mni"Reset to Default"=Reset to Default
wnd(Log|Project|Std|).mni"Resolve"=Resolve
wnd(Log|Project|Std|).mni"Retract Merge Request"=Retract Merge Request
wnd(Log|Project|Std|).mni"Retract Pull Request"=Retract Pull Request
wnd(Log|Project|Std|).mni"Revert $1"=Revert $1
wnd(Log|Project|Std|).mni"Review"=Review
wnd(Log|Project|Std|).mni"Rewrap"=Rewrap
wnd(Log|Project|Std|).mni"Select from JIRA"=Select from JIRA
wnd(Log|Project|Std|).mni"Select from Log"=Select from Log
wnd(Log|Project|Std|).mni"Set '$1' to $2"=Set '$1' to $2
wnd(Log|Project|Std|).mni"Show All Refs"=Show All Refs
wnd(Log|Project|Std|).mni"Show Auxiliary Branch"=Show Auxiliary Branch
wnd(Log|Project|Std|).mni"Show Branch Labels"=Show Branch Labels
wnd(Log|Project|Std|).mni"Show Common Commits"=Show Common Commits
wnd(Log|Project|Std|).mni"Show Incoming Commits"=Show Incoming Commits
wnd(Log|Project|Std|).mni"Show More Commits \(Temporarily\)"=Show More Commits \(Temporarily\)
wnd(Log|Project|Std|).mni"Show Only Selected Branches and Tags"=\
 Show Only Selected Branches and Tags
wnd(Log|Project|Std|).mni"Show Only Selected Refs"=Show Only Selected Refs
wnd(Log|Project|Std|).mni"Show Unchanged Directories"=Show Unchanged Directories
wnd(Log|Project|Std|).mni"Show Working Tree On Demand"=Show Working Tree On Demand
wnd(Log|Project|Std|).mni"Show Working Tree Permanently"=Show Working Tree Permanently
wnd(Log|Project|Std|).mni"Size"=Size
wnd(Log|Project|Std|).mni"Sort By Time"=Sort By Time
wnd(Log|Project|Std|).mni"Sort First Parents before Merge Parents"=\
 Sort First Parents before Merge Parents
wnd(Log|Project|Std|).mni"Sort Merge Parents before First Parents"=\
 Sort Merge Parents before First Parents
wnd(Log|Project|Std|).mni"Squash"=Squash
wnd(Log|Project|Std|).mni"Stage Hunk"=Stage Hunk
wnd(Log|Project|Std|).mni"Stage Inner-line Change"=Stage Inner-line Change
wnd(Log|Project|Std|).mni"Stage Innerline Change"=Stage Innerline Change
wnd(Log|Project|Std|).mni"Stage Line"=Stage Line
wnd(Log|Project|Std|).mni"Stage Lines"=Stage Lines
wnd(Log|Project|Std|).mni"Stage Selection"=Stage Selection
wnd(Log|Project|Std|).mni"Stash Selection"=Stash Selection
wnd(Log|Project|Std|).mni"State"=State
wnd(Log|Project|Std|).mni"Subtree"=Subtree
wnd(Log|Project|Std|).mni"Template!"=Template!
wnd(Log|Project|Std|).mni"Test"=Test
wnd(Log|Project|Std|).mni"Text"=Text
wnd(Log|Project|Std|).mni"Toggle Hosting Provider Integration"=Toggle Hosting Provider Integration
wnd(Log|Project|Std|).mni"Toggle"=Toggle
wnd(Log|Project|Std|).mni"Varying Coloring"=Varying Coloring
wnd(Log|Project|Std|).mniAbout=About SmartGit
wnd(Log|Project|Std|).mniAdd=Add
wnd(Log|Project|Std|).mniAnnotate=Blame
wnd(Log|Project|Std|).mniAssume-unchanged-toggle=Toggle 'Assume Unchanged'
wnd(Log|Project|Std|).mniBisectBad=Mark HEAD as Bad
wnd(Log|Project|Std|).mniBisectExit=Reset
wnd(Log|Project|Std|).mniBisectGood=Mark HEAD as Good
wnd(Log|Project|Std|).mniBisectStart=Start
wnd(Log|Project|Std|).mniBranchAbort=Abort
wnd(Log|Project|Std|).mniBranchAdd=Add Branch
wnd(Log|Project|Std|).mniBranchAddTag=Add Tag
wnd(Log|Project|Std|).mniBranchClose=Close
wnd(Log|Project|Std|).mniBranchContinue=Continue
wnd(Log|Project|Std|).mniBranchDelete=Delete
wnd(Log|Project|Std|).mniBranchRename=Rename
wnd(Log|Project|Std|).mniBranchResetTracking=Stop Tracking
wnd(Log|Project|Std|).mniBranchSetTracking=Set Tracked Branch
wnd(Log|Project|Std|).mniBranchSplit=Modify or Split Commit
wnd(Log|Project|Std|).mniBranchSplitFiles=Split Off Files
wnd(Log|Project|Std|).mniBranchesGitFlowRemoteOnly=Show remote branches in their Git-Flow sections
wnd(Log|Project|Std|).mniBranchesGitFlowTracked=Show remote, tracked branches
wnd(Log|Project|Std|).mniBranchesSectionize=Group tags and branches by path-like name \(foo/bar\)
wnd(Log|Project|Std|).mniBranchesSectionizeAfterLastSlash=After last slash
wnd(Log|Project|Std|).mniBranchesSectionizeCompact=Except for single items
wnd(Log|Project|Std|).mniBranchesSectionsBeforeRefs=Show groups first
wnd(Log|Project|Std|).mniBranchesSelectObsolete=Select Obsolete Local Branches
wnd(Log|Project|Std|).mniBranchesSortByName=Sort Refs by Name
wnd(Log|Project|Std|).mniBranchesSortByNameReversed=Sort Refs by Name \(Numbers Reversed\)
wnd(Log|Project|Std|).mniBranchesSortByTime=Sort Refs by Commit Time
wnd(Log|Project|Std|).mniChangesView.compact=Compact
wnd(Log|Project|Std|).mniChangesView.ignoreLineSeparators=Ignore Line-Ending Changes
wnd(Log|Project|Std|).mniChangesView.sideBySide=Side by Side
wnd(Log|Project|Std|).mniChangesView.unified=Unified
wnd(Log|Project|Std|).mniCheckForLatestBuild=Check for Latest Build
wnd(Log|Project|Std|).mniCheckForNewVersion=Check for New Version
wnd(Log|Project|Std|).mniCheckout=Check Out
wnd(Log|Project|Std|).mniCherryPick=Cherry-Pick
wnd(Log|Project|Std|).mniClean=Clean Working Tree
wnd(Log|Project|Std|).mniClearOutput=Clear Output
wnd(Log|Project|Std|).mniCommit=Commit
wnd(Log|Project|Std|).mniCompact-display=Compact Change Display
wnd(Log|Project|Std|).mniCompareWithWorkingTree=Compare with Working Tree
wnd(Log|Project|Std|).mniConfigureTagGrouping=Tag-Grouping
wnd(Log|Project|Std|).mniConfigureToolbar=Configure Toolbar
wnd(Log|Project|Std|).mniConflictSolver=Conflict Solver
wnd(Log|Project|Std|).mniContactSupport=Contact Support
wnd(Log|Project|Std|).mniCopyCommitId=Copy ID
wnd(Log|Project|Std|).mniCopyCommitMessage=Copy Message
wnd(Log|Project|Std|).mniCopyName=Copy Name
wnd(Log|Project|Std|).mniCopyPath=Copy Path
wnd(Log|Project|Std|).mniCopyRelativePath=Copy Relative Path
wnd(Log|Project|Std|).mniCustomize=Customize
wnd(Log|Project|Std|).mniDebugCreateHeapDump=Create Heap Dump
wnd(Log|Project|Std|).mniDebugCreateThreadDumps=Create Periodical Thread Dumps
wnd(Log|Project|Std|).mniDebugEnableRefreshTraceLogging=Starting Tracing Refreshing
wnd(Log|Project|Std|).mniDebugLogFileMonitorEvents=Log File Monitor Events
wnd(Log|Project|Std|).mniDebugLogFileMonitorState=Log File Monitor State
wnd(Log|Project|Std|).mniDebugLogOpenRepositories=Log Open Repositories
wnd(Log|Project|Std|).mniDebugRestart=Restart
wnd(Log|Project|Std|).mniDebugRunGc=Run GC
wnd(Log|Project|Std|).mniDelete=Delete
wnd(Log|Project|Std|).mniDiscard=Discard
wnd(Log|Project|Std|).mniEdit-ignore-case-changes=Ignore Case Change for Line Comparison
wnd(Log|Project|Std|).mniEditCommitAuthor=Edit Author
wnd(Log|Project|Std|).mniEditCommitMessage=Edit Commit Message
wnd(Log|Project|Std|).mniEditFile=Edit File
wnd(Log|Project|Std|).mniExit=Exit
wnd(Log|Project|Std|).mniFastForward=Fast-Forward Merge
wnd(Log|Project|Std|).mniFetch=Pull
wnd(Log|Project|Std|).mniFile-close=Close
wnd(Log|Project|Std|).mniFilterCommits=Filter Commits
wnd(Log|Project|Std|).mniFilterFiles=Filter Files
wnd(Log|Project|Std|).mniFindAction=Find Command
wnd(Log|Project|Std|).mniFindObject=Find Object
wnd(Log|Project|Std|).mniFixup=Fixup
wnd(Log|Project|Std|).mniFlowConfigure=Configure
wnd(Log|Project|Std|).mniFlowContext=Git-Flow
wnd(Log|Project|Std|).mniFlowFeatureFinish=Finish Feature
wnd(Log|Project|Std|).mniFlowFeatureStart=Start Feature
wnd(Log|Project|Std|).mniFlowHotfixFinish=Finish Hotfix
wnd(Log|Project|Std|).mniFlowHotfixStart=Start Hotfix
wnd(Log|Project|Std|).mniFlowIntegrateDevelop=Integrate Develop
wnd(Log|Project|Std|).mniFlowReleaseFinish=Finish Release
wnd(Log|Project|Std|).mniFlowReleaseStart=Start Release
wnd(Log|Project|Std|).mniFlowSupportStart=Start Support Branch
wnd(Log|Project|Std|).mniForgetCommit=Forget Commit
wnd(Log|Project|Std|).mniGoto-next-diff=Next Change
wnd(Log|Project|Std|).mniGoto-previous-diff=Previous Change
wnd(Log|Project|Std|).mniGotoChildrenCommit=Select Child Commit
wnd(Log|Project|Std|).mniGotoParentsCommit=Select Parent Commit
wnd(Log|Project|Std|).mniIgnore=Ignore
wnd(Log|Project|Std|).mniIgnore-line-separators=Ignore Line-Ending Changes
wnd(Log|Project|Std|).mniIgnoreReveal=Edit Ignore File
wnd(Log|Project|Std|).mniIncludeTrackedRemoteBranches=Include Tracked Remote Branches
wnd(Log|Project|Std|).mniIndexEditor=Index Editor
wnd(Log|Project|Std|).mniInvestigate=Investigate
wnd(Log|Project|Std|).mniLfsInstall=Install
wnd(Log|Project|Std|).mniLfsLock=Lock
wnd(Log|Project|Std|).mniLfsPrune=Prune
wnd(Log|Project|Std|).mniLfsTrack=Track
wnd(Log|Project|Std|).mniLfsUnlock=Unlock
wnd(Log|Project|Std|).mniLicenseAgreement=License Agreement
wnd(Log|Project|Std|).mniLocalGc=Run Garbage Collector
wnd(Log|Project|Std|).mniLog=Log
wnd(Log|Project|Std|).mniLogCommitsColoringBranch=Branch Coloring
wnd(Log|Project|Std|).mniLogCommitsColoringDefault=Default Coloring
wnd(Log|Project|Std|).mniLogCommitsColoringLegacy=Varying Coloring
wnd(Log|Project|Std|).mniLogCommitsColoringMerge=Mergeable Coloring
wnd(Log|Project|Std|).mniLogRepository=Show Log Window
wnd(Log|Project|Std|).mniLogShowAllParents=Follow All Parents
wnd(Log|Project|Std|).mniLogShowOnlyFirstParents=Show Only First Parents
wnd(Log|Project|Std|).mniLogTopoFiltering=Show Graph While Filtering
wnd(Log|Project|Std|).mniLogWorkingTreeIndexOnDemand=Show Working Tree  Index On Demand
wnd(Log|Project|Std|).mniLogWorkingTreeIndexPermanent=Show Working Tree  Index Permanently
wnd(Log|Project|Std|).mniMailingList=SmartGit Website
wnd(Log|Project|Std|).mniMerge=Merge
wnd(Log|Project|Std|).mniModifyCommit=Modify
wnd(Log|Project|Std|).mniNewStandardWindow=Show Standard Window
wnd(Log|Project|Std|).mniNewWindow=New Window
wnd(Log|Project|Std|).mniOpen=Open from Working Tree
wnd(Log|Project|Std|).mniOpenDocumentation=Online Documentation
wnd(Log|Project|Std|).mniOpenRootLog=Open Root Log
wnd(Log|Project|Std|).mniOpenUserEcho=Feature Requests
wnd(Log|Project|Std|).mniOpenWorkingTree=Open Working Tree
wnd(Log|Project|Std|).mniPreferences=Preferences
wnd(Log|Project|Std|).mniPreviewCommentNext=Next Comment
wnd(Log|Project|Std|).mniPreviewCommentPrevious=Previous Comment
wnd(Log|Project|Std|).mniPreviewCompareAutomatic=Automatic
wnd(Log|Project|Std|).mniPreviewCompareHeadVsIndex=HEAD vs. Index
wnd(Log|Project|Std|).mniPreviewCompareIndexVsWT=Index vs. Working Tree
wnd(Log|Project|Std|).mniPreviewRefresh=Reload
wnd(Log|Project|Std|).mniPreviewShowCurrentLines=Show Long Current Lines
wnd(Log|Project|Std|).mniPreviewUndo=Undo
wnd(Log|Project|Std|).mniPush=Push
wnd(Log|Project|Std|).mniPushCommits=Push Up To
wnd(Log|Project|Std|).mniPushTo=Push To
wnd(Log|Project|Std|).mniPushToGerrit=Push to Gerrit
wnd(Log|Project|Std|).mniRebaseAbort=Abort
wnd(Log|Project|Std|).mniRebaseContinue=Continue
wnd(Log|Project|Std|).mniRebaseHeadTo=Rebase HEAD To
wnd(Log|Project|Std|).mniRebaseInteractive=Rebase Interactive From
wnd(Log|Project|Std|).mniRebaseSkip=Skip
wnd(Log|Project|Std|).mniRebaseStep=Step
wnd(Log|Project|Std|).mniRebaseToHead=Rebase to HEAD
wnd(Log|Project|Std|).mniRebaseToHead"Rebase to HEAD \($1\)"=Rebase to HEAD \($1\)
wnd(Log|Project|Std|).mniRebaseToHead"Rebase to HEAD"=Rebase to HEAD
wnd(Log|Project|Std|).mniRefresh=Refresh
wnd(Log|Project|Std|).mniRegister=Register
wnd(Log|Project|Std|).mniRemoteAdd=Add
wnd(Log|Project|Std|).mniRemoteCopyUrl=Copy URL
wnd(Log|Project|Std|).mniRemoteDelete=Delete
wnd(Log|Project|Std|).mniRemoteFetch=Fetch
wnd(Log|Project|Std|).mniRemoteFetchAll=Fetch All
wnd(Log|Project|Std|).mniRemoteFetchMore=Fetch More
wnd(Log|Project|Std|).mniRemoteProperties=Properties
wnd(Log|Project|Std|).mniRemoteRename=Rename
wnd(Log|Project|Std|).mniRemove=Remove
wnd(Log|Project|Std|).mniRename=Rename
wnd(Log|Project|Std|).mniRepositoryAdd=Add or Create
wnd(Log|Project|Std|).mniRepositoryAddGroup=Add Group
wnd(Log|Project|Std|).mniRepositoryClone=Clone
wnd(Log|Project|Std|).mniRepositoryClose=Close
wnd(Log|Project|Std|).mniRepositoryEditConfig=Repository
wnd(Log|Project|Std|).mniRepositoryEditConfigUser=User
wnd(Log|Project|Std|).mniRepositoryFavorite=Unmark as Favorite
wnd(Log|Project|Std|).mniRepositoryFavorite"Mark as Favorite"=Mark as Favorite
wnd(Log|Project|Std|).mniRepositoryFavorite"Unmark as Favorite"=Unmark as Favorite
wnd(Log|Project|Std|).mniRepositoryOpen=Open Repository
wnd(Log|Project|Std|).mniRepositoryOpenInNewWindow=Open Repository in New Window
wnd(Log|Project|Std|).mniRepositoryRemove=Remove
wnd(Log|Project|Std|).mniRepositoryRename=Rename
wnd(Log|Project|Std|).mniRepositorySearch=Search for Repositories
wnd(Log|Project|Std|).mniRepositorySelectObsolete=Select Obsolete Repositories
wnd(Log|Project|Std|).mniRepositorySettings=Settings
wnd(Log|Project|Std|).mniReset=Reset
wnd(Log|Project|Std|).mniResetAdvanced=Reset Advanced
wnd(Log|Project|Std|).mniResolve=Resolve
wnd(Log|Project|Std|).mniResolveOurs=Take Ours
wnd(Log|Project|Std|).mniResolveRecreateConflict=Recreate Conflict
wnd(Log|Project|Std|).mniResolveTheirs=Take Theirs
wnd(Log|Project|Std|).mniRevealCommit=Reveal Commit
wnd(Log|Project|Std|).mniRevealCommitExtend=Compare with Selected Commit
wnd(Log|Project|Std|).mniRevealCommitWithHead=Compare with HEAD
wnd(Log|Project|Std|).mniRevealPrevCommit=Reveal Previous Commit
wnd(Log|Project|Std|).mniRevealWorkingTree=Reveal Working Tree
wnd(Log|Project|Std|).mniRevert=Revert
wnd(Log|Project|Std|).mniReviewCommentCreate=Add Comment
wnd(Log|Project|Std|).mniReviewConfigure=Configure
wnd(Log|Project|Std|).mniReviewDumpDatabase=Dump Database
wnd(Log|Project|Std|).mniReviewPullRequestCreate=Create Pull Request
wnd(Log|Project|Std|).mniReviewPullRequestCreate"Create Merge Request"=Create Merge Request
wnd(Log|Project|Std|).mniReviewPullRequestCreate"Create Pull Request"=Create Pull Request
wnd(Log|Project|Std|).mniReviewShowClosedPullRequests=Show Closed Pull Requests
wnd(Log|Project|Std|).mniReviewSync=Sync
wnd(Log|Project|Std|).mniRewriteTextFile=Fix Line-Endings
wnd(Log|Project|Std|).mniSaveAs=Save As
wnd(Log|Project|Std|).mniSearch-find=Find
wnd(Log|Project|Std|).mniSearch-next=Find Next
wnd(Log|Project|Std|).mniSearch-previous=Find Previous
wnd(Log|Project|Std|).mniSelectCommittableFiles=Select Committable Files
wnd(Log|Project|Std|).mniSelectDirectory=Select Directory
wnd(Log|Project|Std|).mniSelectRoot=Select Repository Root
wnd(Log|Project|Std|).mniSet-syntax=Syntax Language
wnd(Log|Project|Std|).mniSetDepth=Set Depth
wnd(Log|Project|Std|).mniShow-line-numbers=Show Line Numbers
wnd(Log|Project|Std|).mniShowChanges=Show Changes
wnd(Log|Project|Std|).mniSkipWorkTree=Toggle 'Skip Worktree'
wnd(Log|Project|Std|).mniSortCommitsAsIs=Sort Commits by Time
wnd(Log|Project|Std|).mniSortCommitsFirstParentsBeforeMergeParents=Sort First Parents before Merge Parents
wnd(Log|Project|Std|).mniSortCommitsMergeParentsBeforeFirstParents=Sort Merge Parents before First Parents
wnd(Log|Project|Std|).mniSplitCommit=Split
wnd(Log|Project|Std|).mniSquashCommits=Squash Commits
wnd(Log|Project|Std|).mniStage=Stage
wnd(Log|Project|Std|).mniStashApply=Apply Stash
wnd(Log|Project|Std|).mniStashDrop=Drop Stash
wnd(Log|Project|Std|).mniStashRename=Rename Stash
wnd(Log|Project|Std|).mniStashSave=Stash All
wnd(Log|Project|Std|).mniStashSaveSelection=Stash Selection
wnd(Log|Project|Std|).mniSubmoduleDeactivate=Deactivate
wnd(Log|Project|Std|).mniSubmoduleDeinit=Deinit
wnd(Log|Project|Std|).mniSubmoduleInit=Initialize
wnd(Log|Project|Std|).mniSubmoduleRegister=Add
wnd(Log|Project|Std|).mniSubmoduleReset=Reset
wnd(Log|Project|Std|).mniSubmoduleSync=Synchronize
wnd(Log|Project|Std|).mniSubmoduleUnregister=Unregister
wnd(Log|Project|Std|).mniSubtreeAdd=Add
wnd(Log|Project|Std|).mniSubtreeMerge=Merge
wnd(Log|Project|Std|).mniSubtreePush=Push
wnd(Log|Project|Std|).mniSubtreeReset=Reset
wnd(Log|Project|Std|).mniSubtreeSplit=Split
wnd(Log|Project|Std|).mniSync=Synchronize
wnd(Log|Project|Std|).mniUndoLastCommit=Undo Last Commit
wnd(Log|Project|Std|).mniUnstage=Unstage
wnd(Log|Project|Std|).mniView-ignore-whitespaces-all=Ignore All Whitespaces for Line Comparison
wnd(Log|Project|Std|).mniView-ignore-whitespaces-leading-trailing=Ignore Leading/Trailing Whitespaces for Line Comparison
wnd(Log|Project|Std|).mniView-ignore-whitespaces-none=Ignore No Whitespace for Line Comparison
wnd(Log|Project|Std|).mniView-remember-as-default=Remember as Default
wnd(Log|Project|Std|).mniView-settings=Settings
wnd(Log|Project|Std|).mniView-show-current-line-control=Show Long Current Lines
wnd(Log|Project|Std|).mniViewFromSubmodules=Show Files From Submodules
wnd(Log|Project|Std|).mniViewIgnored=Show Ignored Files
wnd(Log|Project|Std|).mniViewRecursive=Files from Subdirectories
wnd(Log|Project|Std|).mniViewRenameSource=Show Rename Source Files
wnd(Log|Project|Std|).mniViewSeparateWtAndIndex=Separate Working Tree and Index
wnd(Log|Project|Std|).mniViewSetAnchorCommit=Set Anchor Commit
wnd(Log|Project|Std|).mniViewSkipped=Show Skipped Files
wnd(Log|Project|Std|).mniViewStaged=Show Staged Files
wnd(Log|Project|Std|).mniViewStyleIndex=Only Index
wnd(Log|Project|Std|).mniViewStyleMixed=Mixed
wnd(Log|Project|Std|).mniViewStyleWorkingTree=Only Working Tree
wnd(Log|Project|Std|).mniViewToolBar=Show Toolbar
wnd(Log|Project|Std|).mniViewUnchanged=Show Unchanged Files
wnd(Log|Project|Std|).mniViewUnchangedAssumed=Show Assume-Unchanged Files
wnd(Log|Project|Std|).mniViewUnversioned=Show Unversioned Files
wnd(Log|Project|Std|).mniWindowBranches=Branches
wnd(Log|Project|Std|).mniWindowChanges=Changes
wnd(Log|Project|Std|).mniWindowClose=Close
wnd(Log|Project|Std|).mniWindowComments=Comments
wnd(Log|Project|Std|).mniWindowCommit=Commit
wnd(Log|Project|Std|).mniWindowDebugLog=Debug Log
wnd(Log|Project|Std|).mniWindowDirectories=Repositories
wnd(Log|Project|Std|).mniWindowFiles=Files
wnd(Log|Project|Std|).mniWindowGraph=Graph
wnd(Log|Project|Std|).mniWindowHideView=Hide View
wnd(Log|Project|Std|).mniWindowJournal=Journal
wnd(Log|Project|Std|).mniWindowLayoutSetMain=Main Perspective
wnd(Log|Project|Std|).mniWindowLayoutSetReview=Review Perspective
wnd(Log|Project|Std|).mniWindowOutput=Output
wnd(Log|Project|Std|).mniWindowWorkingTree=Show Working Tree Window
wnd(Log|Project|Std|).mniWorktreeAdd=Add Worktree
wnd(Log|Project|Std|).mniWorktreePrune=Prune Obsolete Worktrees
wnd(Log|Project|Std|).mniWorktreeRemove=Remove Worktree
wnd(Log|Project|Std|).mnu"Bisect"=Bisect
wnd(Log|Project|Std|).mnu"Branch"=Branch
wnd(Log|Project|Std|).mnu"Branches"=Branches
wnd(Log|Project|Std|).mnu"Changes"=Changes
wnd(Log|Project|Std|).mnu"Commits"=Commits
wnd(Log|Project|Std|).mnu"Debug"=Debug
wnd(Log|Project|Std|).mnu"Edit Git Config"=Edit Git Config
wnd(Log|Project|Std|).mnu"Edit"=Edit
wnd(Log|Project|Std|).mnu"Git-Flow"=Git-Flow
wnd(Log|Project|Std|).mnu"Help"=Help
wnd(Log|Project|Std|).mnu"LFS"=LFS
wnd(Log|Project|Std|).mnu"Local"=Local
wnd(Log|Project|Std|).mnu"Query"=Query
wnd(Log|Project|Std|).mnu"Rebase"=Rebase
wnd(Log|Project|Std|).mnu"Remote"=Remote
wnd(Log|Project|Std|).mnu"Repositories"=Repositories
wnd(Log|Project|Std|).mnu"Repository"=Repository
wnd(Log|Project|Std|).mnu"Resolve"=Resolve
wnd(Log|Project|Std|).mnu"Review"=Review
wnd(Log|Project|Std|).mnu"Submodule"=Submodule
wnd(Log|Project|Std|).mnu"Subtree"=Subtree
wnd(Log|Project|Std|).mnu"Tools"=Tools
wnd(Log|Project|Std|).mnu"View"=View
wnd(Log|Project|Std|).tab"Branches"=Branches
wnd(Log|Project|Std|).tab"Changes of $1 - $2 \($3\)"=\
 Changes of $1 - $2 \($3\)
wnd(Log|Project|Std|).tab"Changes of $1 - $2"=Changes of $1 - $2
wnd(Log|Project|Std|).tab"Changes of $1 \($2\) - $3"=\
 Changes of $1 \($2\) - $3
wnd(Log|Project|Std|).tab"Changes of $1 \($2\)"=Changes of $1 \($2\)
wnd(Log|Project|Std|).tab"Changes"=Changes
wnd(Log|Project|Std|).tab"Comments \($1\)"=Comments \($1\)
wnd(Log|Project|Std|).tab"Comments"=Comments
wnd(Log|Project|Std|).tab"Commit Message"=Commit Message
wnd(Log|Project|Std|).tab"Commit"=Commit
wnd(Log|Project|Std|).tab"Debug Log"=Debug Log
wnd(Log|Project|Std|).tab"Files \(Working Tree\)"=Files \(Working Tree\)
wnd(Log|Project|Std|).tab"Files"=Files
wnd(Log|Project|Std|).tab"Graph \(Initializing Log-Cache...\)"=Graph \(Initializing Log-Cache...\)
wnd(Log|Project|Std|).tab"Graph \(Initializing Subtree-Cache...\)"=Graph \(Initializing Subtree-Cache...\)
wnd(Log|Project|Std|).tab"Graph \(Initializing...\)"=Graph \(Initializing...\)
wnd(Log|Project|Std|).tab"Graph \(Loading...\)"=Graph \(Loading...\)
wnd(Log|Project|Std|).tab"Graph \(Running log...\)"=Graph \(Running log...\)
wnd(Log|Project|Std|).tab"Graph \(Scanning WT...\)"=Graph \(Scanning WT...\)
wnd(Log|Project|Std|).tab"Graph"=Graph
wnd(Log|Project|Std|).tab"Journal"=Journal
wnd(Log|Project|Std|).tab"Output"=Output
wnd(Log|Project|Std|).tab"Repositories"=Repositories
wnd(Log|Project|Std|).tbr"  History  "=History
wnd(Log|Project|Std|).tbr"Add Tag"=Add Tag
wnd(Log|Project|Std|).tbr"Add or Create"=Add or Create
wnd(Log|Project|Std|).tbr"Add"=Add
wnd(Log|Project|Std|).tbr"Apply Stash"=Apply Stash
wnd(Log|Project|Std|).tbr"Blame"=Blame
wnd(Log|Project|Std|).tbr"Branch"=Branch
wnd(Log|Project|Std|).tbr"Changes"=Changes
wnd(Log|Project|Std|).tbr"Check Out"=Check Out
wnd(Log|Project|Std|).tbr"Cherry-Pick"=Cherry-Pick
wnd(Log|Project|Std|).tbr"Clone"=Clone
wnd(Log|Project|Std|).tbr"Commit"=Commit
wnd(Log|Project|Std|).tbr"Compact"=Compact
wnd(Log|Project|Std|).tbr"Conflict Solver"=Conflict Solver
wnd(Log|Project|Std|).tbr"Delete"=Delete
wnd(Log|Project|Std|).tbr"Discard"=Discard
wnd(Log|Project|Std|).tbr"Drop Stash"=Drop Stash
wnd(Log|Project|Std|).tbr"Fetch"=Fetch
wnd(Log|Project|Std|).tbr"Finish"=Finish
wnd(Log|Project|Std|).tbr"Git-Flow"=Git-Flow
wnd(Log|Project|Std|).tbr"Ignore"=Ignore
wnd(Log|Project|Std|).tbr"Index Editor"=Index Editor
wnd(Log|Project|Std|).tbr"Integrate"=Integrate
wnd(Log|Project|Std|).tbr"Investigate"=Investigate
wnd(Log|Project|Std|).tbr"Local Files"=Local Files
wnd(Log|Project|Std|).tbr"Log Selection"=Log Selection
wnd(Log|Project|Std|).tbr"Log"=Log
wnd(Log|Project|Std|).tbr"Main"=Main
wnd(Log|Project|Std|).tbr"Merge"=Merge
wnd(Log|Project|Std|).tbr"Pull"=Pull
wnd(Log|Project|Std|).tbr"Push To"=Push To
wnd(Log|Project|Std|).tbr"Push"=Push
wnd(Log|Project|Std|).tbr"Rebase"=Rebase
wnd(Log|Project|Std|).tbr"Refresh"=Refresh
wnd(Log|Project|Std|).tbr"Remove"=Remove
wnd(Log|Project|Std|).tbr"Reset Adv."=Reset Adv.
wnd(Log|Project|Std|).tbr"Reset"=Reset
wnd(Log|Project|Std|).tbr"Revert"=Revert
wnd(Log|Project|Std|).tbr"Review"=Review
wnd(Log|Project|Std|).tbr"Save Stash"=Save Stash
wnd(Log|Project|Std|).tbr"Search"=Search
wnd(Log|Project|Std|).tbr"Side by Side"=Side by Side
wnd(Log|Project|Std|).tbr"Stage"=Stage
wnd(Log|Project|Std|).tbr"Start"=Start
wnd(Log|Project|Std|).tbr"Sync"=Sync
wnd(Log|Project|Std|).tbr"Unified"=Unified
wnd(Log|Project|Std|).tbr"Unstage"=Unstage
wnd(Log|Project|Std|).tbt"Clear logging."=Clear logging.
wnd(Log|Project|Std|).tbt"Commit Message History"=Commit Message History
wnd(Log|Project|Std|).tbt"Hosting provider is not configured for the current repository. Go to the Preferences to add a configuration."=\
 Hosting provider is not configured for the current repository. Go to the Preferences to add a configuration.
wnd(Log|Project|Std|).tbt"If selected, files from subdirectories are shown."=\
 If selected, files from subdirectories are shown.
wnd(Log|Project|Std|).tbt"If selected, the directories will be shown."=\
 If selected, the directories will be shown.
wnd(Log|Project|Std|).tbt"Indicates how many files or directories are selected."=\
 Indicates how many files or directories are selected.
wnd(Log|Project|Std|).tbt"Interpret the search pattern as regular expression."=\
 Interpret the search pattern as regular expression.
wnd(Log|Project|Std|).tbt"Options"=Options
wnd(Log|Project|Std|).tbt"Reading incoming merge requests from '$1'."=\
 Reading incoming merge requests from '$1'.
wnd(Log|Project|Std|).tbt"Reading repository info from '$1'."=Reading repository info from '$1'.
wnd(Log|Project|Std|).tbt"Refresh information from GitLab."=Refresh information from GitLab.
wnd(Log|Project|Std|).tbt"Show directories tree"=Show directories tree
wnd(Log|Project|Std|).tbtAnnotate=Show a blame \(annotated\) view of the selected file.
wnd(Log|Project|Std|).tbtBranchAdd=Add a new branch for the current commit.
wnd(Log|Project|Std|).tbtBranchAddTag=Add a new tag for the current commit.
wnd(Log|Project|Std|).tbtCheckout=Check out an existing commit.
wnd(Log|Project|Std|).tbtCherryPick=Merge changes from other branches.
wnd(Log|Project|Std|).tbtClearOutput=Clear output pane.
wnd(Log|Project|Std|).tbtCommit=Commit local changes.
wnd(Log|Project|Std|).tbtConflictSolver=Open the Conflict Solver \(or configured external merge tool\) to resolve conflicts.
wnd(Log|Project|Std|).tbtDelete=Delete the selected local files or directory.
wnd(Log|Project|Std|).tbtDiscard=Discard local changes.
wnd(Log|Project|Std|).tbtFetch=Fetch commits from a remote repository and \(optionally\) integrate them with possible local commits.
wnd(Log|Project|Std|).tbtFlowContext=Finish a Git-Flow feature.
wnd(Log|Project|Std|).tbtFlowFeatureFinish=Finish a Git-Flow feature.
wnd(Log|Project|Std|).tbtFlowFeatureStart=Start a new Git-Flow feature.
wnd(Log|Project|Std|).tbtFlowHotfixFinish=Finish a Git-Flow hotfix.
wnd(Log|Project|Std|).tbtFlowHotfixStart=Start a new Git-Flow hotfix.
wnd(Log|Project|Std|).tbtFlowIntegrateDevelop=Integrate new base commits into a Git-Flow feature.
wnd(Log|Project|Std|).tbtGoto-next-diff=Go to next change.
wnd(Log|Project|Std|).tbtGoto-previous-diff=Go to previous change.
wnd(Log|Project|Std|).tbtIgnore=Mark unversioned local files/directories to be ignored.
wnd(Log|Project|Std|).tbtIndexEditor=Edit the Index state of the selected file, e.g. to decide which lines should be staged.
wnd(Log|Project|Std|).tbtInvestigate=Investigate history line-wise with DeepGit.
wnd(Log|Project|Std|).tbtLog=Show the history for selected file or directory.
wnd(Log|Project|Std|).tbtLogRepository=Show the history for the whole repository.
wnd(Log|Project|Std|).tbtMerge=Merge changes from other branches.
wnd(Log|Project|Std|).tbtPreviewRefresh=Reload the previewed file contents.
wnd(Log|Project|Std|).tbtPush=Push local commits to the remote origin repository.
wnd(Log|Project|Std|).tbtPushTo=Push local commits to a remote repository, allowing to choose the target repository.
wnd(Log|Project|Std|).tbtRebaseHeadTo=Apply the HEAD commits to the selected commit.
wnd(Log|Project|Std|).tbtRefresh=Refresh the log view.
wnd(Log|Project|Std|).tbtRemoteFetch=Fetch commits from all remote repositories.
wnd(Log|Project|Std|).tbtRemove=Remove selected files or directories from repository.
wnd(Log|Project|Std|).tbtRepositoryAdd=Add or create a new repository.
wnd(Log|Project|Std|).tbtRepositoryClone=Clone a new repository.
wnd(Log|Project|Std|).tbtRepositorySearch=Search for existing repositories.
wnd(Log|Project|Std|).tbtReset=Reset current HEAD to another commit.
wnd(Log|Project|Std|).tbtResetAdvanced=Reset current HEAD to another commit and keep the difference in Index or Working Tree.
wnd(Log|Project|Std|).tbtRevealHomeCommit=Reveal HEAD/working tree in graph.
wnd(Log|Project|Std|).tbtRevealPrevCommit=Reveal selected commits before invoking Reveal Working Tree.
wnd(Log|Project|Std|).tbtRevealWorkingTree=Reveal working tree node in graph.
wnd(Log|Project|Std|).tbtRevert=Undo the changes of an existing commit by "reverse" merging it.
wnd(Log|Project|Std|).tbtShowChanges=Open the file compare for the selected file.
wnd(Log|Project|Std|).tbtStage=Store working tree files in the index to prepare the next commit.
wnd(Log|Project|Std|).tbtStashApply=Reapply local changes from a stash.
wnd(Log|Project|Std|).tbtStashDrop=Drop one or more stashes from the repository.
wnd(Log|Project|Std|).tbtStashSave=Stash current local changes.
wnd(Log|Project|Std|).tbtStdSetModeHistory=Show the history view.
wnd(Log|Project|Std|).tbtStdSetModeWt=Show the local files of the repository \(Working Tree\).
wnd(Log|Project|Std|).tbtSync=Push local commits of the current branch and pull remote changes.
wnd(Log|Project|Std|).tbtUnstage=Remove staged changes from index.
wnd(Log|Project|Std|).tbtViewFromSubmodules=If selected, files from submodules will be shown.
wnd(Log|Project|Std|).tbtViewIgnored=If selected, ignored files will be shown.
wnd(Log|Project|Std|).tbtViewRenameSource=If selected, removed/missing source files of detected renames will be shown.
wnd(Log|Project|Std|).tbtViewSkipped=If selected, skipped files will be shown.
wnd(Log|Project|Std|).tbtViewStaged=If selected, files with staged \(Index\) changes and without working tree changes will be shown.
wnd(Log|Project|Std|).tbtViewUnchanged=If selected, unchanged files will be shown.
wnd(Log|Project|Std|).tbtViewUnchangedAssumed=If selected, files having the 'assume-unchanged' flag will be shown.
wnd(Log|Project|Std|).tbtViewUnversioned=If selected, not yet version controlled files will be shown.
wnd(Log|Project|Std|).tbtWindowLayoutSetMain=Switch to the Main perspective.
wnd(Log|Project|Std|).tbtWindowLayoutSetReview=Switch to the Review perspective.
